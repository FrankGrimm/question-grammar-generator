{
  "grammarEntries" : [ {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1912 ?", "Welche Person heiratete Filmjahr 1912 ?", "Welche Personen heiraten Filmjahr 1912 ?", "Welche Personen heirateten Filmjahr 1912 ?", "Wer heiratet Filmjahr 1912 ?", "Wer heiratete Filmjahr 1912 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1912_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1917 ?", "Welche Person heiratete Filmjahr 1917 ?", "Welche Personen heiraten Filmjahr 1917 ?", "Welche Personen heirateten Filmjahr 1917 ?", "Wer heiratet Filmjahr 1917 ?", "Wer heiratete Filmjahr 1917 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1917_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1942 ?", "Welche Person heiratete Filmjahr 1942 ?", "Welche Personen heiraten Filmjahr 1942 ?", "Welche Personen heirateten Filmjahr 1942 ?", "Wer heiratet Filmjahr 1942 ?", "Wer heiratete Filmjahr 1942 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1942_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1943 ?", "Welche Person heiratete Filmjahr 1943 ?", "Welche Personen heiraten Filmjahr 1943 ?", "Welche Personen heirateten Filmjahr 1943 ?", "Wer heiratet Filmjahr 1943 ?", "Wer heiratete Filmjahr 1943 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1943_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1945 ?", "Welche Person heiratete Filmjahr 1945 ?", "Welche Personen heiraten Filmjahr 1945 ?", "Welche Personen heirateten Filmjahr 1945 ?", "Wer heiratet Filmjahr 1945 ?", "Wer heiratete Filmjahr 1945 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1945_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1947 ?", "Welche Person heiratete Filmjahr 1947 ?", "Welche Personen heiraten Filmjahr 1947 ?", "Welche Personen heirateten Filmjahr 1947 ?", "Wer heiratet Filmjahr 1947 ?", "Wer heiratete Filmjahr 1947 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1947_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet NFL 1950 ?", "Welche Person heiratete NFL 1950 ?", "Welche Personen heiraten NFL 1950 ?", "Welche Personen heirateten NFL 1950 ?", "Wer heiratet NFL 1950 ?", "Wer heiratete NFL 1950 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1950_NFL_season>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1950 ?", "Welche Person heiratete Filmjahr 1950 ?", "Welche Personen heiraten Filmjahr 1950 ?", "Welche Personen heirateten Filmjahr 1950 ?", "Wer heiratet Filmjahr 1950 ?", "Wer heiratete Filmjahr 1950 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1950_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1951 ?", "Welche Person heiratete Filmjahr 1951 ?", "Welche Personen heiraten Filmjahr 1951 ?", "Welche Personen heirateten Filmjahr 1951 ?", "Wer heiratet Filmjahr 1951 ?", "Wer heiratete Filmjahr 1951 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1951_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1953 ?", "Welche Person heiratete Filmjahr 1953 ?", "Welche Personen heiraten Filmjahr 1953 ?", "Welche Personen heirateten Filmjahr 1953 ?", "Wer heiratet Filmjahr 1953 ?", "Wer heiratete Filmjahr 1953 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1953_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1959 ?", "Welche Person heiratete Filmjahr 1959 ?", "Welche Personen heiraten Filmjahr 1959 ?", "Welche Personen heirateten Filmjahr 1959 ?", "Wer heiratet Filmjahr 1959 ?", "Wer heiratete Filmjahr 1959 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1959_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Automobil-Weltmeisterschaft 1960 ?", "Welche Person heiratete Automobil-Weltmeisterschaft 1960 ?", "Welche Personen heiraten Automobil-Weltmeisterschaft 1960 ?", "Welche Personen heirateten Automobil-Weltmeisterschaft 1960 ?", "Wer heiratet Automobil-Weltmeisterschaft 1960 ?", "Wer heiratete Automobil-Weltmeisterschaft 1960 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1960_Formula_One_season>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet NFL 1960 ?", "Welche Person heiratete NFL 1960 ?", "Welche Personen heiraten NFL 1960 ?", "Welche Personen heirateten NFL 1960 ?", "Wer heiratet NFL 1960 ?", "Wer heiratete NFL 1960 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1960_NFL_season>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Filmjahr 1960 ?", "Welche Person heiratete Filmjahr 1960 ?", "Welche Personen heiraten Filmjahr 1960 ?", "Welche Personen heirateten Filmjahr 1960 ?", "Wer heiratet Filmjahr 1960 ?", "Wer heiratete Filmjahr 1960 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/1960_in_film>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Präsidentschaftswahl in Venezuela 2013 ?", "Welche Person heiratete Präsidentschaftswahl in Venezuela 2013 ?", "Welche Personen heiraten Präsidentschaftswahl in Venezuela 2013 ?", "Welche Personen heirateten Präsidentschaftswahl in Venezuela 2013 ?", "Wer heiratet Präsidentschaftswahl in Venezuela 2013 ?", "Wer heiratete Präsidentschaftswahl in Venezuela 2013 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/2013_Venezuelan_presidential_election>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Olympische Sommerspiele 2016 ?", "Welche Person heiratete Olympische Sommerspiele 2016 ?", "Welche Personen heiraten Olympische Sommerspiele 2016 ?", "Welche Personen heirateten Olympische Sommerspiele 2016 ?", "Wer heiratet Olympische Sommerspiele 2016 ?", "Wer heiratete Olympische Sommerspiele 2016 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/2016_Summer_Olympics>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Britische Unterhauswahl 2017 ?", "Welche Person heiratete Britische Unterhauswahl 2017 ?", "Welche Personen heiraten Britische Unterhauswahl 2017 ?", "Welche Personen heirateten Britische Unterhauswahl 2017 ?", "Wer heiratet Britische Unterhauswahl 2017 ?", "Wer heiratete Britische Unterhauswahl 2017 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/2017_United_Kingdom_general_election>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Grammy Awards 1963 ?", "Welche Person heiratete Grammy Awards 1963 ?", "Welche Personen heiraten Grammy Awards 1963 ?", "Welche Personen heirateten Grammy Awards 1963 ?", "Wer heiratet Grammy Awards 1963 ?", "Wer heiratete Grammy Awards 1963 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/5th_Annual_Grammy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Oscarverleihung 1989 ?", "Welche Person heiratete Oscarverleihung 1989 ?", "Welche Personen heiraten Oscarverleihung 1989 ?", "Welche Personen heirateten Oscarverleihung 1989 ?", "Wer heiratet Oscarverleihung 1989 ?", "Wer heiratete Oscarverleihung 1989 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/61st_Academy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Golden Globe Awards 2006 ?", "Welche Person heiratete Golden Globe Awards 2006 ?", "Welche Personen heiraten Golden Globe Awards 2006 ?", "Welche Personen heirateten Golden Globe Awards 2006 ?", "Wer heiratet Golden Globe Awards 2006 ?", "Wer heiratete Golden Globe Awards 2006 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/63rd_Golden_Globe_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Oscarverleihung 1992 ?", "Welche Person heiratete Oscarverleihung 1992 ?", "Welche Personen heiraten Oscarverleihung 1992 ?", "Welche Personen heirateten Oscarverleihung 1992 ?", "Wer heiratet Oscarverleihung 1992 ?", "Wer heiratete Oscarverleihung 1992 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/64th_Academy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Oscarverleihung 1994 ?", "Welche Person heiratete Oscarverleihung 1994 ?", "Welche Personen heiraten Oscarverleihung 1994 ?", "Welche Personen heirateten Oscarverleihung 1994 ?", "Wer heiratet Oscarverleihung 1994 ?", "Wer heiratete Oscarverleihung 1994 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/66th_Academy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Golden Globe Awards 2010 ?", "Welche Person heiratete Golden Globe Awards 2010 ?", "Welche Personen heiraten Golden Globe Awards 2010 ?", "Welche Personen heirateten Golden Globe Awards 2010 ?", "Wer heiratet Golden Globe Awards 2010 ?", "Wer heiratete Golden Globe Awards 2010 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/67th_Golden_Globe_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Primetime-Emmy-Verleihung 2019 ?", "Welche Person heiratete Primetime-Emmy-Verleihung 2019 ?", "Welche Personen heiraten Primetime-Emmy-Verleihung 2019 ?", "Welche Personen heirateten Primetime-Emmy-Verleihung 2019 ?", "Wer heiratet Primetime-Emmy-Verleihung 2019 ?", "Wer heiratete Primetime-Emmy-Verleihung 2019 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/71st_Primetime_Emmy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Oscarverleihung 2000 ?", "Welche Person heiratete Oscarverleihung 2000 ?", "Welche Personen heiraten Oscarverleihung 2000 ?", "Welche Personen heirateten Oscarverleihung 2000 ?", "Wer heiratet Oscarverleihung 2000 ?", "Wer heiratete Oscarverleihung 2000 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/72nd_Academy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Oscarverleihung 2004 ?", "Welche Person heiratete Oscarverleihung 2004 ?", "Welche Personen heiraten Oscarverleihung 2004 ?", "Welche Personen heirateten Oscarverleihung 2004 ?", "Wer heiratet Oscarverleihung 2004 ?", "Wer heiratete Oscarverleihung 2004 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/76th_Academy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Oscarverleihung 2016 ?", "Welche Person heiratete Oscarverleihung 2016 ?", "Welche Personen heiraten Oscarverleihung 2016 ?", "Welche Personen heirateten Oscarverleihung 2016 ?", "Wer heiratet Oscarverleihung 2016 ?", "Wer heiratete Oscarverleihung 2016 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/88th_Academy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Primetime-Emmy-Verleihung 1956 ?", "Welche Person heiratete Primetime-Emmy-Verleihung 1956 ?", "Welche Personen heiraten Primetime-Emmy-Verleihung 1956 ?", "Welche Personen heirateten Primetime-Emmy-Verleihung 1956 ?", "Wer heiratet Primetime-Emmy-Verleihung 1956 ?", "Wer heiratete Primetime-Emmy-Verleihung 1956 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/8th_Primetime_Emmy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Oscarverleihung 1937 ?", "Welche Person heiratete Oscarverleihung 1937 ?", "Welche Personen heiraten Oscarverleihung 1937 ?", "Welche Personen heirateten Oscarverleihung 1937 ?", "Wer heiratet Oscarverleihung 1937 ?", "Wer heiratete Oscarverleihung 1937 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/9th_Academy_Awards>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lowell Sherman ?", "Welche Person heiratete Lowell Sherman ?", "Welche Personen heiraten Lowell Sherman ?", "Welche Personen heirateten Lowell Sherman ?", "Wer heiratet Lowell Sherman ?", "Wer heiratete Lowell Sherman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lowell_Sherman>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Loïc Le Meur ?", "Welche Person heiratete Loïc Le Meur ?", "Welche Personen heiraten Loïc Le Meur ?", "Welche Personen heirateten Loïc Le Meur ?", "Wer heiratet Loïc Le Meur ?", "Wer heiratete Loïc Le Meur ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Loïc_Le_Meur>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lu Xun ?", "Welche Person heiratete Lu Xun ?", "Welche Personen heiraten Lu Xun ?", "Welche Personen heirateten Lu Xun ?", "Wer heiratet Lu Xun ?", "Wer heiratete Lu Xun ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lu_Xun>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Luana Patten ?", "Welche Person heiratete Luana Patten ?", "Welche Personen heiraten Luana Patten ?", "Welche Personen heirateten Luana Patten ?", "Wer heiratet Luana Patten ?", "Wer heiratete Luana Patten ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Luana_Patten>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Luang Prabang ?", "Welche Person heiratete Luang Prabang ?", "Welche Personen heiraten Luang Prabang ?", "Welche Personen heirateten Luang Prabang ?", "Wer heiratet Luang Prabang ?", "Wer heiratete Luang Prabang ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Luang_Prabang>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Luc Besson ?", "Welche Person heiratete Luc Besson ?", "Welche Personen heiraten Luc Besson ?", "Welche Personen heirateten Luc Besson ?", "Wer heiratet Luc Besson ?", "Wer heiratete Luc Besson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Luc_Besson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Luc Tuymans ?", "Welche Person heiratete Luc Tuymans ?", "Welche Personen heiraten Luc Tuymans ?", "Welche Personen heirateten Luc Tuymans ?", "Wer heiratet Luc Tuymans ?", "Wer heiratete Luc Tuymans ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Luc_Tuymans>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucas Neff ?", "Welche Person heiratete Lucas Neff ?", "Welche Personen heiraten Lucas Neff ?", "Welche Personen heirateten Lucas Neff ?", "Wer heiratet Lucas Neff ?", "Wer heiratete Lucas Neff ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucas_Neff>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucia Migliaccio ?", "Welche Person heiratete Lucia Migliaccio ?", "Welche Personen heiraten Lucia Migliaccio ?", "Welche Personen heirateten Lucia Migliaccio ?", "Wer heiratet Lucia Migliaccio ?", "Wer heiratete Lucia Migliaccio ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucia_Migliaccio>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucia Moholy ?", "Welche Person heiratete Lucia Moholy ?", "Welche Personen heiraten Lucia Moholy ?", "Welche Personen heirateten Lucia Moholy ?", "Wer heiratet Lucia Moholy ?", "Wer heiratete Lucia Moholy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucia_Moholy>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucia St. Clair Robson ?", "Welche Person heiratete Lucia St. Clair Robson ?", "Welche Personen heiraten Lucia St. Clair Robson ?", "Welche Personen heirateten Lucia St. Clair Robson ?", "Wer heiratet Lucia St. Clair Robson ?", "Wer heiratete Lucia St. Clair Robson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucia_St._Clair_Robson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucian Freud ?", "Welche Person heiratete Lucian Freud ?", "Welche Personen heiraten Lucian Freud ?", "Welche Personen heirateten Lucian Freud ?", "Wer heiratet Lucian Freud ?", "Wer heiratete Lucian Freud ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucian_Freud>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Luciana Paluzzi ?", "Welche Person heiratete Luciana Paluzzi ?", "Welche Personen heiraten Luciana Paluzzi ?", "Welche Personen heirateten Luciana Paluzzi ?", "Wer heiratet Luciana Paluzzi ?", "Wer heiratete Luciana Paluzzi ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Luciana_Paluzzi>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Luciano Ercoli ?", "Welche Person heiratete Luciano Ercoli ?", "Welche Personen heiraten Luciano Ercoli ?", "Welche Personen heirateten Luciano Ercoli ?", "Wer heiratet Luciano Ercoli ?", "Wer heiratete Luciano Ercoli ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Luciano_Ercoli>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Luciano Martino ?", "Welche Person heiratete Luciano Martino ?", "Welche Personen heiraten Luciano Martino ?", "Welche Personen heirateten Luciano Martino ?", "Wer heiratet Luciano Martino ?", "Wer heiratete Luciano Martino ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Luciano_Martino>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucie Arnaz ?", "Welche Person heiratete Lucie Arnaz ?", "Welche Personen heiraten Lucie Arnaz ?", "Welche Personen heirateten Lucie Arnaz ?", "Wer heiratet Lucie Arnaz ?", "Wer heiratete Lucie Arnaz ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucie_Arnaz>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucie Aubrac ?", "Welche Person heiratete Lucie Aubrac ?", "Welche Personen heiraten Lucie Aubrac ?", "Welche Personen heirateten Lucie Aubrac ?", "Wer heiratet Lucie Aubrac ?", "Wer heiratete Lucie Aubrac ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucie_Aubrac>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucie Mannheim ?", "Welche Person heiratete Lucie Mannheim ?", "Welche Personen heiraten Lucie Mannheim ?", "Welche Personen heirateten Lucie Mannheim ?", "Wer heiratet Lucie Mannheim ?", "Wer heiratete Lucie Mannheim ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucie_Mannheim>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucien Ballard ?", "Welche Person heiratete Lucien Ballard ?", "Welche Personen heiraten Lucien Ballard ?", "Welche Personen heirateten Lucien Ballard ?", "Wer heiratet Lucien Ballard ?", "Wer heiratete Lucien Ballard ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucien_Ballard>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucien Bonaparte ?", "Welche Person heiratete Lucien Bonaparte ?", "Welche Personen heiraten Lucien Bonaparte ?", "Welche Personen heirateten Lucien Bonaparte ?", "Wer heiratet Lucien Bonaparte ?", "Wer heiratete Lucien Bonaparte ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucien_Bonaparte>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucien Goldmann ?", "Welche Person heiratete Lucien Goldmann ?", "Welche Personen heiraten Lucien Goldmann ?", "Welche Personen heirateten Lucien Goldmann ?", "Wer heiratet Lucien Goldmann ?", "Wer heiratete Lucien Goldmann ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucien_Goldmann>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucien Pissarro ?", "Welche Person heiratete Lucien Pissarro ?", "Welche Personen heiraten Lucien Pissarro ?", "Welche Personen heirateten Lucien Pissarro ?", "Wer heiratet Lucien Pissarro ?", "Wer heiratete Lucien Pissarro ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucien_Pissarro>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucienne Day ?", "Welche Person heiratete Lucienne Day ?", "Welche Personen heiraten Lucienne Day ?", "Welche Personen heirateten Lucienne Day ?", "Wer heiratet Lucienne Day ?", "Wer heiratete Lucienne Day ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucienne_Day>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucienne von Rochefort ?", "Welche Person heiratete Lucienne von Rochefort ?", "Welche Personen heiraten Lucienne von Rochefort ?", "Welche Personen heirateten Lucienne von Rochefort ?", "Wer heiratet Lucienne von Rochefort ?", "Wer heiratete Lucienne von Rochefort ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucienne_de_Rochefort>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucile Browne ?", "Welche Person heiratete Lucile Browne ?", "Welche Personen heiraten Lucile Browne ?", "Welche Personen heirateten Lucile Browne ?", "Wer heiratet Lucile Browne ?", "Wer heiratete Lucile Browne ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucile_Browne>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucile Hadzihalilovic ?", "Welche Person heiratete Lucile Hadzihalilovic ?", "Welche Personen heiraten Lucile Hadzihalilovic ?", "Welche Personen heirateten Lucile Hadzihalilovic ?", "Wer heiratet Lucile Hadzihalilovic ?", "Wer heiratete Lucile Hadzihalilovic ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucile_Hadžihalilović>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucile Watson ?", "Welche Person heiratete Lucile Watson ?", "Welche Personen heiraten Lucile Watson ?", "Welche Personen heirateten Lucile Watson ?", "Wer heiratet Lucile Watson ?", "Wer heiratete Lucile Watson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucile_Watson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucilla ?", "Welche Person heiratete Lucilla ?", "Welche Personen heiraten Lucilla ?", "Welche Personen heirateten Lucilla ?", "Wer heiratet Lucilla ?", "Wer heiratete Lucilla ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucilla>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucille Ball ?", "Welche Person heiratete Lucille Ball ?", "Welche Personen heiraten Lucille Ball ?", "Welche Personen heirateten Lucille Ball ?", "Wer heiratet Lucille Ball ?", "Wer heiratete Lucille Ball ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucille_Ball>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucina da Costa Gomez-Matheeuws ?", "Welche Person heiratete Lucina da Costa Gomez-Matheeuws ?", "Welche Personen heiraten Lucina da Costa Gomez-Matheeuws ?", "Welche Personen heirateten Lucina da Costa Gomez-Matheeuws ?", "Wer heiratet Lucina da Costa Gomez-Matheeuws ?", "Wer heiratete Lucina da Costa Gomez-Matheeuws ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucina_da_Costa_Gomez-Matheeuws>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucinda Jenney ?", "Welche Person heiratete Lucinda Jenney ?", "Welche Personen heiraten Lucinda Jenney ?", "Welche Personen heirateten Lucinda Jenney ?", "Wer heiratet Lucinda Jenney ?", "Wer heiratete Lucinda Jenney ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucinda_Jenney>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Paullus Aemilius Lepidus ?", "Welche Person heiratete Paullus Aemilius Lepidus ?", "Welche Personen heiraten Paullus Aemilius Lepidus ?", "Welche Personen heirateten Paullus Aemilius Lepidus ?", "Wer heiratet Paullus Aemilius Lepidus ?", "Wer heiratete Paullus Aemilius Lepidus ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucius_Aemilius_Lepidus_Paullus_(consul_34_BC)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucius Aemilius Paullus (Konsul 1) ?", "Welche Person heiratete Lucius Aemilius Paullus (Konsul 1) ?", "Welche Personen heiraten Lucius Aemilius Paullus (Konsul 1) ?", "Welche Personen heirateten Lucius Aemilius Paullus (Konsul 1) ?", "Wer heiratet Lucius Aemilius Paullus (Konsul 1) ?", "Wer heiratete Lucius Aemilius Paullus (Konsul 1) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucius_Aemilius_Paullus_(consul_1)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucius Cornelius Cinna (Prätor 44 v. Chr.) ?", "Welche Person heiratete Lucius Cornelius Cinna (Prätor 44 v. Chr.) ?", "Welche Personen heiraten Lucius Cornelius Cinna (Prätor 44 v. Chr.) ?", "Welche Personen heirateten Lucius Cornelius Cinna (Prätor 44 v. Chr.) ?", "Wer heiratet Lucius Cornelius Cinna (Prätor 44 v. Chr.) ?", "Wer heiratete Lucius Cornelius Cinna (Prätor 44 v. Chr.) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucius_Cornelius_Cinna_(suffect_consul)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucius Domitius Ahenobarbus (Konsul 54 v. Chr.) ?", "Welche Person heiratete Lucius Domitius Ahenobarbus (Konsul 54 v. Chr.) ?", "Welche Personen heiraten Lucius Domitius Ahenobarbus (Konsul 54 v. Chr.) ?", "Welche Personen heirateten Lucius Domitius Ahenobarbus (Konsul 54 v. Chr.) ?", "Wer heiratet Lucius Domitius Ahenobarbus (Konsul 54 v. Chr.) ?", "Wer heiratete Lucius Domitius Ahenobarbus (Konsul 54 v. Chr.) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucius_Domitius_Ahenobarbus_(consul_54_BC)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucius Marcius Philippus (Konsul 56 v. Chr.) ?", "Welche Person heiratete Lucius Marcius Philippus (Konsul 56 v. Chr.) ?", "Welche Personen heiraten Lucius Marcius Philippus (Konsul 56 v. Chr.) ?", "Welche Personen heirateten Lucius Marcius Philippus (Konsul 56 v. Chr.) ?", "Wer heiratet Lucius Marcius Philippus (Konsul 56 v. Chr.) ?", "Wer heiratete Lucius Marcius Philippus (Konsul 56 v. Chr.) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucius_Marcius_Philippus_(consul_56_BC)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucius Tarquinius Superbus ?", "Welche Person heiratete Lucius Tarquinius Superbus ?", "Welche Personen heiraten Lucius Tarquinius Superbus ?", "Welche Personen heirateten Lucius Tarquinius Superbus ?", "Wer heiratet Lucius Tarquinius Superbus ?", "Wer heiratete Lucius Tarquinius Superbus ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucius_Tarquinius_Superbus>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucius Verus ?", "Welche Person heiratete Lucius Verus ?", "Welche Personen heiraten Lucius Verus ?", "Welche Personen heirateten Lucius Verus ?", "Wer heiratet Lucius Verus ?", "Wer heiratete Lucius Verus ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucius_Verus>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucretia Garfield ?", "Welche Person heiratete Lucretia Garfield ?", "Welche Personen heiraten Lucretia Garfield ?", "Welche Personen heirateten Lucretia Garfield ?", "Wer heiratet Lucretia Garfield ?", "Wer heiratete Lucretia Garfield ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucretia_Garfield>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucrezia Borgia ?", "Welche Person heiratete Lucrezia Borgia ?", "Welche Personen heiraten Lucrezia Borgia ?", "Welche Personen heirateten Lucrezia Borgia ?", "Wer heiratet Lucrezia Borgia ?", "Wer heiratete Lucrezia Borgia ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucrezia_Borgia>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucrezia Tornabuoni ?", "Welche Person heiratete Lucrezia Tornabuoni ?", "Welche Personen heiraten Lucrezia Tornabuoni ?", "Welche Personen heirateten Lucrezia Tornabuoni ?", "Wer heiratet Lucrezia Tornabuoni ?", "Wer heiratete Lucrezia Tornabuoni ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucrezia_Tornabuoni>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucius Licinius Lucullus ?", "Welche Person heiratete Lucius Licinius Lucullus ?", "Welche Personen heiraten Lucius Licinius Lucullus ?", "Welche Personen heirateten Lucius Licinius Lucullus ?", "Wer heiratet Lucius Licinius Lucullus ?", "Wer heiratete Lucius Licinius Lucullus ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucullus>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Christiana Duff Gordon ?", "Welche Person heiratete Lucy Christiana Duff Gordon ?", "Welche Personen heiraten Lucy Christiana Duff Gordon ?", "Welche Personen heirateten Lucy Christiana Duff Gordon ?", "Wer heiratet Lucy Christiana Duff Gordon ?", "Wer heiratete Lucy Christiana Duff Gordon ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy,_Lady_Duff-Gordon>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy-Jo Hudson ?", "Welche Person heiratete Lucy-Jo Hudson ?", "Welche Personen heiraten Lucy-Jo Hudson ?", "Welche Personen heirateten Lucy-Jo Hudson ?", "Wer heiratet Lucy-Jo Hudson ?", "Wer heiratete Lucy-Jo Hudson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy-Jo_Hudson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Aharish ?", "Welche Person heiratete Lucy Aharish ?", "Welche Personen heiraten Lucy Aharish ?", "Welche Personen heirateten Lucy Aharish ?", "Wer heiratet Lucy Aharish ?", "Wer heiratete Lucy Aharish ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Aharish>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Baxley ?", "Welche Person heiratete Lucy Baxley ?", "Welche Personen heiraten Lucy Baxley ?", "Welche Personen heirateten Lucy Baxley ?", "Wer heiratet Lucy Baxley ?", "Wer heiratete Lucy Baxley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Baxley>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Brown ?", "Welche Person heiratete Lucy Brown ?", "Welche Personen heiraten Lucy Brown ?", "Welche Personen heirateten Lucy Brown ?", "Wer heiratet Lucy Brown ?", "Wer heiratete Lucy Brown ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Brown>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Cohu ?", "Welche Person heiratete Lucy Cohu ?", "Welche Personen heiraten Lucy Cohu ?", "Welche Personen heirateten Lucy Cohu ?", "Wer heiratet Lucy Cohu ?", "Wer heiratete Lucy Cohu ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Cohu>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Davis (Schauspielerin) ?", "Welche Person heiratete Lucy Davis (Schauspielerin) ?", "Welche Personen heiraten Lucy Davis (Schauspielerin) ?", "Welche Personen heirateten Lucy Davis (Schauspielerin) ?", "Wer heiratet Lucy Davis (Schauspielerin) ?", "Wer heiratete Lucy Davis (Schauspielerin) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Davis>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Doraine ?", "Welche Person heiratete Lucy Doraine ?", "Welche Personen heiraten Lucy Doraine ?", "Welche Personen heirateten Lucy Doraine ?", "Wer heiratet Lucy Doraine ?", "Wer heiratete Lucy Doraine ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Doraine>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Gaskell ?", "Welche Person heiratete Lucy Gaskell ?", "Welche Personen heiraten Lucy Gaskell ?", "Welche Personen heirateten Lucy Gaskell ?", "Wer heiratet Lucy Gaskell ?", "Wer heiratete Lucy Gaskell ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Gaskell>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Lawless ?", "Welche Person heiratete Lucy Lawless ?", "Welche Personen heiraten Lucy Lawless ?", "Welche Personen heirateten Lucy Lawless ?", "Wer heiratet Lucy Lawless ?", "Wer heiratete Lucy Lawless ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Lawless>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Mercer ?", "Welche Person heiratete Lucy Mercer ?", "Welche Personen heiraten Lucy Mercer ?", "Welche Personen heirateten Lucy Mercer ?", "Wer heiratet Lucy Mercer ?", "Wer heiratete Lucy Mercer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Mercer_Rutherfurd>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Parsons ?", "Welche Person heiratete Lucy Parsons ?", "Welche Personen heiraten Lucy Parsons ?", "Welche Personen heirateten Lucy Parsons ?", "Wer heiratet Lucy Parsons ?", "Wer heiratete Lucy Parsons ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Parsons>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Scott ?", "Welche Person heiratete Lucy Scott ?", "Welche Personen heiraten Lucy Scott ?", "Welche Personen heirateten Lucy Scott ?", "Wer heiratet Lucy Scott ?", "Wer heiratete Lucy Scott ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Scott>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Shapiro ?", "Welche Person heiratete Lucy Shapiro ?", "Welche Personen heiraten Lucy Shapiro ?", "Welche Personen heirateten Lucy Shapiro ?", "Wer heiratet Lucy Shapiro ?", "Wer heiratete Lucy Shapiro ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Shapiro>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Stone ?", "Welche Person heiratete Lucy Stone ?", "Welche Personen heiraten Lucy Stone ?", "Welche Personen heirateten Lucy Stone ?", "Wer heiratet Lucy Stone ?", "Wer heiratete Lucy Stone ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Stone>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Lucy Hayes ?", "Welche Person heiratete Lucy Hayes ?", "Welche Personen heiraten Lucy Hayes ?", "Welche Personen heirateten Lucy Hayes ?", "Wer heiratet Lucy Hayes ?", "Wer heiratete Lucy Hayes ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lucy_Webb_Hayes>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludger Stühlmeyer ?", "Welche Person heiratete Ludger Stühlmeyer ?", "Welche Personen heiraten Ludger Stühlmeyer ?", "Welche Personen heirateten Ludger Stühlmeyer ?", "Wer heiratet Ludger Stühlmeyer ?", "Wer heiratete Ludger Stühlmeyer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludger_Stühlmeyer>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludmila Mikaël ?", "Welche Person heiratete Ludmila Mikaël ?", "Welche Personen heiraten Ludmila Mikaël ?", "Welche Personen heirateten Ludmila Mikaël ?", "Wer heiratet Ludmila Mikaël ?", "Wer heiratete Ludmila Mikaël ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludmila_Mikaël>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludmilla von Böhmen ?", "Welche Person heiratete Ludmilla von Böhmen ?", "Welche Personen heiraten Ludmilla von Böhmen ?", "Welche Personen heirateten Ludmilla von Böhmen ?", "Wer heiratet Ludmilla von Böhmen ?", "Wer heiratete Ludmilla von Böhmen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludmila_of_Bohemia>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludmilla von Podiebrad ?", "Welche Person heiratete Ludmilla von Podiebrad ?", "Welche Personen heiraten Ludmilla von Podiebrad ?", "Welche Personen heirateten Ludmilla von Podiebrad ?", "Wer heiratet Ludmilla von Podiebrad ?", "Wer heiratete Ludmilla von Podiebrad ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludmila_of_Poděbrady>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ljudmila Iwanowna Turischtschewa ?", "Welche Person heiratete Ljudmila Iwanowna Turischtschewa ?", "Welche Personen heiraten Ljudmila Iwanowna Turischtschewa ?", "Welche Personen heirateten Ljudmila Iwanowna Turischtschewa ?", "Wer heiratet Ljudmila Iwanowna Turischtschewa ?", "Wer heiratete Ljudmila Iwanowna Turischtschewa ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludmilla_Tourischeva>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludmilla von Böhmen (um 1170) ?", "Welche Person heiratete Ludmilla von Böhmen (um 1170) ?", "Welche Personen heiraten Ludmilla von Böhmen (um 1170) ?", "Welche Personen heirateten Ludmilla von Böhmen (um 1170) ?", "Wer heiratet Ludmilla von Böhmen (um 1170) ?", "Wer heiratete Ludmilla von Böhmen (um 1170) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludmilla_of_Bohemia>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludovic Kennedy ?", "Welche Person heiratete Ludovic Kennedy ?", "Welche Personen heiraten Ludovic Kennedy ?", "Welche Personen heirateten Ludovic Kennedy ?", "Wer heiratet Ludovic Kennedy ?", "Wer heiratete Ludovic Kennedy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludovic_Kennedy>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludovico III. Gonzaga ?", "Welche Person heiratete Ludovico III. Gonzaga ?", "Welche Personen heiraten Ludovico III. Gonzaga ?", "Welche Personen heirateten Ludovico III. Gonzaga ?", "Wer heiratet Ludovico III. Gonzaga ?", "Wer heiratete Ludovico III. Gonzaga ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludovico_III_Gonzaga,_Marquis_of_Mantua>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludovico Sforza ?", "Welche Person heiratete Ludovico Sforza ?", "Welche Personen heiraten Ludovico Sforza ?", "Welche Personen heirateten Ludovico Sforza ?", "Wer heiratet Ludovico Sforza ?", "Wer heiratete Ludovico Sforza ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludovico_Sforza>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludovica Margaretha von Zweibrücken-Bitsch ?", "Welche Person heiratete Ludovica Margaretha von Zweibrücken-Bitsch ?", "Welche Personen heiraten Ludovica Margaretha von Zweibrücken-Bitsch ?", "Welche Personen heirateten Ludovica Margaretha von Zweibrücken-Bitsch ?", "Wer heiratet Ludovica Margaretha von Zweibrücken-Bitsch ?", "Wer heiratete Ludovica Margaretha von Zweibrücken-Bitsch ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludowika_Margaretha_of_Zweibrücken-Bitsch>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludwig Erdwin Seyler ?", "Welche Person heiratete Ludwig Erdwin Seyler ?", "Welche Personen heiraten Ludwig Erdwin Seyler ?", "Welche Personen heirateten Ludwig Erdwin Seyler ?", "Wer heiratet Ludwig Erdwin Seyler ?", "Wer heiratete Ludwig Erdwin Seyler ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludwig_Erdwin_Seyler>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludwig III. (Bayern) ?", "Welche Person heiratete Ludwig III. (Bayern) ?", "Welche Personen heiraten Ludwig III. (Bayern) ?", "Welche Personen heirateten Ludwig III. (Bayern) ?", "Wer heiratet Ludwig III. (Bayern) ?", "Wer heiratete Ludwig III. (Bayern) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludwig_III_of_Bavaria>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Ludwig Adolf Friedrich zu Sayn-Wittgenstein-Sayn ?", "Welche Person heiratete Ludwig Adolf Friedrich zu Sayn-Wittgenstein-Sayn ?", "Welche Personen heiraten Ludwig Adolf Friedrich zu Sayn-Wittgenstein-Sayn ?", "Welche Personen heirateten Ludwig Adolf Friedrich zu Sayn-Wittgenstein-Sayn ?", "Wer heiratet Ludwig Adolf Friedrich zu Sayn-Wittgenstein-Sayn ?", "Wer heiratete Ludwig Adolf Friedrich zu Sayn-Wittgenstein-Sayn ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ludwig_zu_Sayn-Wittgenstein-Berleburg>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln 1943: The Battle of Midway ?", "Welche Agenten entwickelten 1943: The Battle of Midway ?", "Welcher Agent entwickelt 1943: The Battle of Midway ?", "Welcher Agent entwickelte 1943: The Battle of Midway ?", "Wer entwickelt 1943: The Battle of Midway ?", "Wer entwickelte 1943: The Battle of Midway ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/1943:_The_Battle_of_Midway> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln ADO.NET ?", "Welche Agenten entwickelten ADO.NET ?", "Welcher Agent entwickelt ADO.NET ?", "Welcher Agent entwickelte ADO.NET ?", "Wer entwickelt ADO.NET ?", "Wer entwickelte ADO.NET ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/ADO.NET> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln ADX (Audio) ?", "Welche Agenten entwickelten ADX (Audio) ?", "Welcher Agent entwickelt ADX (Audio) ?", "Welcher Agent entwickelte ADX (Audio) ?", "Wer entwickelt ADX (Audio) ?", "Wer entwickelte ADX (Audio) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/ADX_(file_format)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln AIMMS ?", "Welche Agenten entwickelten AIMMS ?", "Welcher Agent entwickelt AIMMS ?", "Welcher Agent entwickelte AIMMS ?", "Wer entwickelt AIMMS ?", "Wer entwickelte AIMMS ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/AIMMS> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln AMD-700-Serie ?", "Welche Agenten entwickelten AMD-700-Serie ?", "Welcher Agent entwickelt AMD-700-Serie ?", "Welcher Agent entwickelte AMD-700-Serie ?", "Wer entwickelt AMD-700-Serie ?", "Wer entwickelte AMD-700-Serie ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/AMD_700_chipset_series> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Love & Lies ?", "Welche Agenten entwickelten Love & Lies ?", "Welcher Agent entwickelt Love & Lies ?", "Welcher Agent entwickelte Love & Lies ?", "Wer entwickelt Love & Lies ?", "Wer entwickelte Love & Lies ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Love_&_Lies> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Love Alarm ?", "Welche Agenten entwickelten Love Alarm ?", "Welcher Agent entwickelt Love Alarm ?", "Welcher Agent entwickelte Love Alarm ?", "Wer entwickelt Love Alarm ?", "Wer entwickelte Love Alarm ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Love_Alarm> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Love in the Moonlight ?", "Welche Agenten entwickelten Love in the Moonlight ?", "Welcher Agent entwickelt Love in the Moonlight ?", "Welcher Agent entwickelte Love in the Moonlight ?", "Wer entwickelt Love in the Moonlight ?", "Wer entwickelte Love in the Moonlight ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Love_in_the_Moonlight> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Lucifer (Fernsehserie) ?", "Welche Agenten entwickelten Lucifer (Fernsehserie) ?", "Welcher Agent entwickelt Lucifer (Fernsehserie) ?", "Welcher Agent entwickelte Lucifer (Fernsehserie) ?", "Wer entwickelt Lucifer (Fernsehserie) ?", "Wer entwickelte Lucifer (Fernsehserie) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucifer_(TV_series)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Luigi’s Mansion ?", "Welche Agenten entwickelten Luigi’s Mansion ?", "Welcher Agent entwickelt Luigi’s Mansion ?", "Welcher Agent entwickelte Luigi’s Mansion ?", "Wer entwickelt Luigi’s Mansion ?", "Wer entwickelte Luigi’s Mansion ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luigi's_Mansion> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Luigi’s Mansion 2 ?", "Welche Agenten entwickelten Luigi’s Mansion 2 ?", "Welcher Agent entwickelt Luigi’s Mansion 2 ?", "Welcher Agent entwickelte Luigi’s Mansion 2 ?", "Wer entwickelt Luigi’s Mansion 2 ?", "Wer entwickelte Luigi’s Mansion 2 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luigi's_Mansion:_Dark_Moon> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Luigi’s Mansion 3 ?", "Welche Agenten entwickelten Luigi’s Mansion 3 ?", "Welcher Agent entwickelt Luigi’s Mansion 3 ?", "Welcher Agent entwickelte Luigi’s Mansion 3 ?", "Wer entwickelt Luigi’s Mansion 3 ?", "Wer entwickelte Luigi’s Mansion 3 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luigi's_Mansion_3> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Lupin (Fernsehserie) ?", "Welche Agenten entwickelten Lupin (Fernsehserie) ?", "Welcher Agent entwickelt Lupin (Fernsehserie) ?", "Welcher Agent entwickelte Lupin (Fernsehserie) ?", "Wer entwickelt Lupin (Fernsehserie) ?", "Wer entwickelte Lupin (Fernsehserie) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lupin_(Philippine_TV_series)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Lutris ?", "Welche Agenten entwickelten Lutris ?", "Welcher Agent entwickelt Lutris ?", "Welcher Agent entwickelte Lutris ?", "Wer entwickelt Lutris ?", "Wer entwickelte Lutris ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lutris> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln M*A*S*H (Fernsehserie) ?", "Welche Agenten entwickelten M*A*S*H (Fernsehserie) ?", "Welcher Agent entwickelt M*A*S*H (Fernsehserie) ?", "Welcher Agent entwickelte M*A*S*H (Fernsehserie) ?", "Wer entwickelt M*A*S*H (Fernsehserie) ?", "Wer entwickelte M*A*S*H (Fernsehserie) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/M*A*S*H_(TV_series)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln M.U.L.E. ?", "Welche Agenten entwickelten M.U.L.E. ?", "Welcher Agent entwickelt M.U.L.E. ?", "Welcher Agent entwickelte M.U.L.E. ?", "Wer entwickelt M.U.L.E. ?", "Wer entwickelte M.U.L.E. ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/M.U.L.E.> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MAG (Computerspiel) ?", "Welche Agenten entwickelten MAG (Computerspiel) ?", "Welcher Agent entwickelt MAG (Computerspiel) ?", "Welcher Agent entwickelte MAG (Computerspiel) ?", "Wer entwickelt MAG (Computerspiel) ?", "Wer entwickelte MAG (Computerspiel) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MAG_(video_game)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MAME ?", "Welche Agenten entwickelten MAME ?", "Welcher Agent entwickelt MAME ?", "Welcher Agent entwickelte MAME ?", "Wer entwickelt MAME ?", "Wer entwickelte MAME ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MAME> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Matlab ?", "Welche Agenten entwickelten Matlab ?", "Welcher Agent entwickelt Matlab ?", "Welcher Agent entwickelte Matlab ?", "Wer entwickelt Matlab ?", "Wer entwickelte Matlab ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MATLAB> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MBASIC ?", "Welche Agenten entwickelten MBASIC ?", "Welcher Agent entwickelt MBASIC ?", "Welcher Agent entwickelte MBASIC ?", "Wer entwickelt MBASIC ?", "Wer entwickelte MBASIC ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MBASIC> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MDK (Computerspiel) ?", "Welche Agenten entwickelten MDK (Computerspiel) ?", "Welcher Agent entwickelt MDK (Computerspiel) ?", "Welcher Agent entwickelte MDK (Computerspiel) ?", "Wer entwickelt MDK (Computerspiel) ?", "Wer entwickelte MDK (Computerspiel) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MDK_(video_game)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MEDINA (Software) ?", "Welche Agenten entwickelten MEDINA (Software) ?", "Welcher Agent entwickelt MEDINA (Software) ?", "Welcher Agent entwickelte MEDINA (Software) ?", "Wer entwickelt MEDINA (Software) ?", "Wer entwickelte MEDINA (Software) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MEDINA> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MEDUSA ?", "Welche Agenten entwickelten MEDUSA ?", "Welcher Agent entwickelt MEDUSA ?", "Welcher Agent entwickelte MEDUSA ?", "Wer entwickelt MEDUSA ?", "Wer entwickelte MEDUSA ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MEDUSA> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Minix (Betriebssystem) ?", "Welche Agenten entwickelten Minix (Betriebssystem) ?", "Welcher Agent entwickelt Minix (Betriebssystem) ?", "Welcher Agent entwickelte Minix (Betriebssystem) ?", "Wer entwickelt Minix (Betriebssystem) ?", "Wer entwickelte Minix (Betriebssystem) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MINIX> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MIUI ?", "Welche Agenten entwickelten MIUI ?", "Welcher Agent entwickelt MIUI ?", "Welcher Agent entwickelte MIUI ?", "Wer entwickelt MIUI ?", "Wer entwickelte MIUI ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MIUI> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MODE32 ?", "Welche Agenten entwickelten MODE32 ?", "Welcher Agent entwickelt MODE32 ?", "Welcher Agent entwickelte MODE32 ?", "Wer entwickelt MODE32 ?", "Wer entwickelte MODE32 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MODE32> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MP/M ?", "Welche Agenten entwickelten MP/M ?", "Welcher Agent entwickelt MP/M ?", "Welcher Agent entwickelte MP/M ?", "Wer entwickelt MP/M ?", "Wer entwickelte MP/M ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MP/M> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MPDS ?", "Welche Agenten entwickelten MPDS ?", "Welcher Agent entwickelt MPDS ?", "Welcher Agent entwickelte MPDS ?", "Wer entwickelt MPDS ?", "Wer entwickelte MPDS ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MPDS4> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MS-DOS ?", "Welche Agenten entwickelten MS-DOS ?", "Welcher Agent entwickelt MS-DOS ?", "Welcher Agent entwickelte MS-DOS ?", "Wer entwickelt MS-DOS ?", "Wer entwickelte MS-DOS ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MS-DOS> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MS-DOS 4.0 (Multitasking-Betriebssystem) ?", "Welche Agenten entwickelten MS-DOS 4.0 (Multitasking-Betriebssystem) ?", "Welcher Agent entwickelt MS-DOS 4.0 (Multitasking-Betriebssystem) ?", "Welcher Agent entwickelte MS-DOS 4.0 (Multitasking-Betriebssystem) ?", "Wer entwickelt MS-DOS 4.0 (Multitasking-Betriebssystem) ?", "Wer entwickelte MS-DOS 4.0 (Multitasking-Betriebssystem) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MS-DOS_4.0_(multitasking)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MS-DOS Editor ?", "Welche Agenten entwickelten MS-DOS Editor ?", "Welcher Agent entwickelt MS-DOS Editor ?", "Welcher Agent entwickelte MS-DOS Editor ?", "Wer entwickelt MS-DOS Editor ?", "Wer entwickelte MS-DOS Editor ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MS-DOS_Editor> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MSBuild ?", "Welche Agenten entwickelten MSBuild ?", "Welcher Agent entwickelt MSBuild ?", "Welcher Agent entwickelte MSBuild ?", "Wer entwickelt MSBuild ?", "Wer entwickelte MSBuild ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MSBuild> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MSCDEX.EXE ?", "Welche Agenten entwickelten MSCDEX.EXE ?", "Welcher Agent entwickelt MSCDEX.EXE ?", "Welcher Agent entwickelte MSCDEX.EXE ?", "Wer entwickelt MSCDEX.EXE ?", "Wer entwickelte MSCDEX.EXE ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MSCDEX> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Multiple Virtual Storage ?", "Welche Agenten entwickelten Multiple Virtual Storage ?", "Welcher Agent entwickelt Multiple Virtual Storage ?", "Welcher Agent entwickelte Multiple Virtual Storage ?", "Wer entwickelt Multiple Virtual Storage ?", "Wer entwickelte Multiple Virtual Storage ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MVS> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MX vs. ATV Unleashed ?", "Welche Agenten entwickelten MX vs. ATV Unleashed ?", "Welcher Agent entwickelt MX vs. ATV Unleashed ?", "Welcher Agent entwickelte MX vs. ATV Unleashed ?", "Wer entwickelt MX vs. ATV Unleashed ?", "Wer entwickelte MX vs. ATV Unleashed ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MX_vs._ATV_Unleashed> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacDraw ?", "Welche Agenten entwickelten MacDraw ?", "Welcher Agent entwickelt MacDraw ?", "Welcher Agent entwickelte MacDraw ?", "Wer entwickelt MacDraw ?", "Wer entwickelte MacDraw ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacDraw> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacGyver (2016) ?", "Welche Agenten entwickelten MacGyver (2016) ?", "Welcher Agent entwickelt MacGyver (2016) ?", "Welcher Agent entwickelte MacGyver (2016) ?", "Wer entwickelt MacGyver (2016) ?", "Wer entwickelte MacGyver (2016) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacGyver_(2016_TV_series)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacOS ?", "Welche Agenten entwickelten MacOS ?", "Welcher Agent entwickelt MacOS ?", "Welcher Agent entwickelte MacOS ?", "Wer entwickelt MacOS ?", "Wer entwickelte MacOS ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacOS> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS ?", "Welche Agenten entwickelten Mac OS ?", "Welcher Agent entwickelt Mac OS ?", "Welcher Agent entwickelte Mac OS ?", "Wer entwickelt Mac OS ?", "Wer entwickelte Mac OS ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacOS> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacOS Catalina ?", "Welche Agenten entwickelten MacOS Catalina ?", "Welcher Agent entwickelt MacOS Catalina ?", "Welcher Agent entwickelte MacOS Catalina ?", "Wer entwickelt MacOS Catalina ?", "Wer entwickelte MacOS Catalina ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacOS_Catalina> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacOS Mojave ?", "Welche Agenten entwickelten MacOS Mojave ?", "Welcher Agent entwickelt MacOS Mojave ?", "Welcher Agent entwickelte MacOS Mojave ?", "Wer entwickelt MacOS Mojave ?", "Wer entwickelte MacOS Mojave ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacOS_Mojave> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacOS Server ?", "Welche Agenten entwickelten MacOS Server ?", "Welcher Agent entwickelt MacOS Server ?", "Welcher Agent entwickelte MacOS Server ?", "Wer entwickelt MacOS Server ?", "Wer entwickelte MacOS Server ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacOS_Server> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacOS Sierra ?", "Welche Agenten entwickelten MacOS Sierra ?", "Welcher Agent entwickelt MacOS Sierra ?", "Welcher Agent entwickelte MacOS Sierra ?", "Wer entwickelt MacOS Sierra ?", "Wer entwickelte MacOS Sierra ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacOS_Sierra> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacWWW ?", "Welche Agenten entwickelten MacWWW ?", "Welcher Agent entwickelt MacWWW ?", "Welcher Agent entwickelte MacWWW ?", "Wer entwickelt MacWWW ?", "Wer entwickelte MacWWW ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacWWW> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MacWrite ?", "Welche Agenten entwickelten MacWrite ?", "Welcher Agent entwickelt MacWrite ?", "Welcher Agent entwickelte MacWrite ?", "Wer entwickelt MacWrite ?", "Wer entwickelte MacWrite ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacWrite> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS 8 ?", "Welche Agenten entwickelten Mac OS 8 ?", "Welcher Agent entwickelt Mac OS 8 ?", "Welcher Agent entwickelte Mac OS 8 ?", "Wer entwickelt Mac OS 8 ?", "Wer entwickelte Mac OS 8 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_8> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS 9 ?", "Welche Agenten entwickelten Mac OS 9 ?", "Welcher Agent entwickelt Mac OS 9 ?", "Welcher Agent entwickelte Mac OS 9 ?", "Wer entwickelt Mac OS 9 ?", "Wer entwickelte Mac OS 9 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_9> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS X 10.0 ?", "Welche Agenten entwickelten Mac OS X 10.0 ?", "Welcher Agent entwickelt Mac OS X 10.0 ?", "Welcher Agent entwickelte Mac OS X 10.0 ?", "Wer entwickelt Mac OS X 10.0 ?", "Wer entwickelte Mac OS X 10.0 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_X_10.0> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS X 10.1 ?", "Welche Agenten entwickelten Mac OS X 10.1 ?", "Welcher Agent entwickelt Mac OS X 10.1 ?", "Welcher Agent entwickelte Mac OS X 10.1 ?", "Wer entwickelt Mac OS X 10.1 ?", "Wer entwickelte Mac OS X 10.1 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_X_10.1> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS X Leopard ?", "Welche Agenten entwickelten Mac OS X Leopard ?", "Welcher Agent entwickelt Mac OS X Leopard ?", "Welcher Agent entwickelte Mac OS X Leopard ?", "Wer entwickelt Mac OS X Leopard ?", "Wer entwickelte Mac OS X Leopard ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_X_Leopard> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS X Lion ?", "Welche Agenten entwickelten Mac OS X Lion ?", "Welcher Agent entwickelt Mac OS X Lion ?", "Welcher Agent entwickelte Mac OS X Lion ?", "Wer entwickelt Mac OS X Lion ?", "Wer entwickelte Mac OS X Lion ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_X_Lion> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS X Panther ?", "Welche Agenten entwickelten Mac OS X Panther ?", "Welcher Agent entwickelt Mac OS X Panther ?", "Welcher Agent entwickelte Mac OS X Panther ?", "Wer entwickelt Mac OS X Panther ?", "Wer entwickelte Mac OS X Panther ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_X_Panther> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS X Public Beta ?", "Welche Agenten entwickelten Mac OS X Public Beta ?", "Welcher Agent entwickelt Mac OS X Public Beta ?", "Welcher Agent entwickelte Mac OS X Public Beta ?", "Wer entwickelt Mac OS X Public Beta ?", "Wer entwickelte Mac OS X Public Beta ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_X_Public_Beta> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS X Snow Leopard ?", "Welche Agenten entwickelten Mac OS X Snow Leopard ?", "Welcher Agent entwickelt Mac OS X Snow Leopard ?", "Welcher Agent entwickelte Mac OS X Snow Leopard ?", "Wer entwickelt Mac OS X Snow Leopard ?", "Wer entwickelte Mac OS X Snow Leopard ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_X_Snow_Leopard> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mac OS X Tiger ?", "Welche Agenten entwickelten Mac OS X Tiger ?", "Welcher Agent entwickelt Mac OS X Tiger ?", "Welcher Agent entwickelte Mac OS X Tiger ?", "Wer entwickelt Mac OS X Tiger ?", "Wer entwickelte Mac OS X Tiger ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mac_OS_X_Tiger> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Machinarium ?", "Welche Agenten entwickelten Machinarium ?", "Welcher Agent entwickelt Machinarium ?", "Welcher Agent entwickelte Machinarium ?", "Wer entwickelt Machinarium ?", "Wer entwickelte Machinarium ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Machinarium> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Maclisp ?", "Welche Agenten entwickelten Maclisp ?", "Welcher Agent entwickelt Maclisp ?", "Welcher Agent entwickelte Maclisp ?", "Wer entwickelt Maclisp ?", "Wer entwickelte Maclisp ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Maclisp> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Macromedia HomeSite ?", "Welche Agenten entwickelten Macromedia HomeSite ?", "Welcher Agent entwickelt Macromedia HomeSite ?", "Welcher Agent entwickelte Macromedia HomeSite ?", "Wer entwickelt Macromedia HomeSite ?", "Wer entwickelte Macromedia HomeSite ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Macromedia_HomeSite> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln MadWorld ?", "Welche Agenten entwickelten MadWorld ?", "Welcher Agent entwickelt MadWorld ?", "Welcher Agent entwickelte MadWorld ?", "Wer entwickelt MadWorld ?", "Wer entwickelte MadWorld ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MadWorld> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mad (Fernsehserie) ?", "Welche Agenten entwickelten Mad (Fernsehserie) ?", "Welcher Agent entwickelt Mad (Fernsehserie) ?", "Welcher Agent entwickelte Mad (Fernsehserie) ?", "Wer entwickelt Mad (Fernsehserie) ?", "Wer entwickelte Mad (Fernsehserie) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mad_(TV_series)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Verrückt nach dir ?", "Welche Agenten entwickelten Verrückt nach dir ?", "Welcher Agent entwickelt Verrückt nach dir ?", "Welcher Agent entwickelte Verrückt nach dir ?", "Wer entwickelt Verrückt nach dir ?", "Wer entwickelte Verrückt nach dir ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mad_About_You> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mad Dog McCree ?", "Welche Agenten entwickelten Mad Dog McCree ?", "Welcher Agent entwickelt Mad Dog McCree ?", "Welcher Agent entwickelte Mad Dog McCree ?", "Wer entwickelt Mad Dog McCree ?", "Wer entwickelte Mad Dog McCree ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mad_Dog_McCree> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mad TV ?", "Welche Agenten entwickelten Mad TV ?", "Welcher Agent entwickelt Mad TV ?", "Welcher Agent entwickelte Mad TV ?", "Wer entwickelt Mad TV ?", "Wer entwickelte Mad TV ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mad_TV_(video_game)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mad Tracks ?", "Welche Agenten entwickelten Mad Tracks ?", "Welcher Agent entwickelt Mad Tracks ?", "Welcher Agent entwickelte Mad Tracks ?", "Wer entwickelt Mad Tracks ?", "Wer entwickelte Mad Tracks ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mad_Tracks> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Maemo ?", "Welche Agenten entwickelten Maemo ?", "Welcher Agent entwickelt Maemo ?", "Welcher Agent entwickelte Maemo ?", "Wer entwickelt Maemo ?", "Wer entwickelte Maemo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Maemo> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mafia (Computerspiel) ?", "Welche Agenten entwickelten Mafia (Computerspiel) ?", "Welcher Agent entwickelt Mafia (Computerspiel) ?", "Welcher Agent entwickelte Mafia (Computerspiel) ?", "Wer entwickelt Mafia (Computerspiel) ?", "Wer entwickelte Mafia (Computerspiel) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mafia_(video_game)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mafia II ?", "Welche Agenten entwickelten Mafia II ?", "Welcher Agent entwickelt Mafia II ?", "Welcher Agent entwickelte Mafia II ?", "Wer entwickelt Mafia II ?", "Wer entwickelte Mafia II ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mafia_II> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mafia III ?", "Welche Agenten entwickelten Mafia III ?", "Welcher Agent entwickelt Mafia III ?", "Welcher Agent entwickelte Mafia III ?", "Wer entwickelt Mafia III ?", "Wer entwickelte Mafia III ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mafia_III> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Magic Carpet (Computerspiel) ?", "Welche Agenten entwickelten Magic Carpet (Computerspiel) ?", "Welcher Agent entwickelt Magic Carpet (Computerspiel) ?", "Welcher Agent entwickelte Magic Carpet (Computerspiel) ?", "Wer entwickelt Magic Carpet (Computerspiel) ?", "Wer entwickelte Magic Carpet (Computerspiel) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Magic_Carpet_(video_game)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Magic Carpet 2 ?", "Welche Agenten entwickelten Magic Carpet 2 ?", "Welcher Agent entwickelt Magic Carpet 2 ?", "Welcher Agent entwickelte Magic Carpet 2 ?", "Wer entwickelt Magic Carpet 2 ?", "Wer entwickelte Magic Carpet 2 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Magic_Carpet_2> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Magicka ?", "Welche Agenten entwickelten Magicka ?", "Welcher Agent entwickelt Magicka ?", "Welcher Agent entwickelte Magicka ?", "Wer entwickelt Magicka ?", "Wer entwickelte Magicka ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Magicka> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Magix Music Maker ?", "Welche Agenten entwickelten Magix Music Maker ?", "Welcher Agent entwickelt Magix Music Maker ?", "Welcher Agent entwickelte Magix Music Maker ?", "Wer entwickelt Magix Music Maker ?", "Wer entwickelte Magix Music Maker ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Magix_Music_Maker> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Puzz Loop ?", "Welche Agenten entwickelten Puzz Loop ?", "Welcher Agent entwickelt Puzz Loop ?", "Welcher Agent entwickelte Puzz Loop ?", "Wer entwickelt Puzz Loop ?", "Wer entwickelte Puzz Loop ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Magnetica> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Magnum P.I. (2018) ?", "Welche Agenten entwickelten Magnum P.I. (2018) ?", "Welcher Agent entwickelt Magnum P.I. (2018) ?", "Welcher Agent entwickelte Magnum P.I. (2018) ?", "Wer entwickelt Magnum P.I. (2018) ?", "Wer entwickelte Magnum P.I. (2018) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Magnum_P.I._(2018_TV_series)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln ZETA ?", "Welche Agenten entwickelten ZETA ?", "Welcher Agent entwickelt ZETA ?", "Welcher Agent entwickelte ZETA ?", "Wer entwickelt ZETA ?", "Wer entwickelte ZETA ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Magnussoft_ZETA> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mail (Unix) ?", "Welche Agenten entwickelten Mail (Unix) ?", "Welcher Agent entwickelt Mail (Unix) ?", "Welcher Agent entwickelte Mail (Unix) ?", "Wer entwickelt Mail (Unix) ?", "Wer entwickelte Mail (Unix) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mail_(Unix)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Mailbox (App) ?", "Welche Agenten entwickelten Mailbox (App) ?", "Welcher Agent entwickelt Mailbox (App) ?", "Welcher Agent entwickelte Mailbox (App) ?", "Wer entwickelt Mailbox (App) ?", "Wer entwickelte Mailbox (App) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mailbox_(application)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Majesty: The Fantasy Kingdom Sim ?", "Welche Agenten entwickelten Majesty: The Fantasy Kingdom Sim ?", "Welcher Agent entwickelt Majesty: The Fantasy Kingdom Sim ?", "Welcher Agent entwickelte Majesty: The Fantasy Kingdom Sim ?", "Wer entwickelt Majesty: The Fantasy Kingdom Sim ?", "Wer entwickelte Majesty: The Fantasy Kingdom Sim ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Majesty:_The_Fantasy_Kingdom_Sim> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Major Dad ?", "Welche Agenten entwickelten Major Dad ?", "Welcher Agent entwickelt Major Dad ?", "Welcher Agent entwickelte Major Dad ?", "Wer entwickelt Major Dad ?", "Wer entwickelte Major Dad ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Major_Dad> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Coral (Netzwerk) ?", "Welche Agenten entwickelten Coral (Netzwerk) ?", "Welcher Agent entwickelt Coral (Netzwerk) ?", "Welcher Agent entwickelte Coral (Netzwerk) ?", "Wer entwickelt Coral (Netzwerk) ?", "Wer entwickelte Coral (Netzwerk) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Coral_Content_Distribution_Network> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Core War ?", "Welche Agenten entwickelten Core War ?", "Welcher Agent entwickelt Core War ?", "Welcher Agent entwickelte Core War ?", "Wer entwickelt Core War ?", "Wer entwickelte Core War ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Core_War> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Corel Presentations ?", "Welche Agenten entwickelten Corel Presentations ?", "Welcher Agent entwickelt Corel Presentations ?", "Welcher Agent entwickelte Corel Presentations ?", "Wer entwickelt Corel Presentations ?", "Wer entwickelte Corel Presentations ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Corel_Presentations> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Unix to Unix Copy ?", "Welche Agenten entwickelten Unix to Unix Copy ?", "Welcher Agent entwickelt Unix to Unix Copy ?", "Welcher Agent entwickelte Unix to Unix Copy ?", "Wer entwickelt Unix to Unix Copy ?", "Wer entwickelte Unix to Unix Copy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/UUCP> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ubuntu ?", "Welche Agenten entwickelten Ubuntu ?", "Welcher Agent entwickelt Ubuntu ?", "Welcher Agent entwickelte Ubuntu ?", "Wer entwickelt Ubuntu ?", "Wer entwickelte Ubuntu ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ubuntu> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ubuntu Kylin ?", "Welche Agenten entwickelten Ubuntu Kylin ?", "Welcher Agent entwickelt Ubuntu Kylin ?", "Welcher Agent entwickelte Ubuntu Kylin ?", "Wer entwickelt Ubuntu Kylin ?", "Wer entwickelte Ubuntu Kylin ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ubuntu_Kylin> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ubuntu One ?", "Welche Agenten entwickelten Ubuntu One ?", "Welcher Agent entwickelt Ubuntu One ?", "Welcher Agent entwickelte Ubuntu One ?", "Wer entwickelt Ubuntu One ?", "Wer entwickelte Ubuntu One ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ubuntu_One> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ubuntu Touch ?", "Welche Agenten entwickelten Ubuntu Touch ?", "Welcher Agent entwickelt Ubuntu Touch ?", "Welcher Agent entwickelte Ubuntu Touch ?", "Wer entwickelt Ubuntu Touch ?", "Wer entwickelte Ubuntu Touch ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ubuntu_Touch> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Udev ?", "Welche Agenten entwickelten Udev ?", "Welcher Agent entwickelt Udev ?", "Welcher Agent entwickelte Udev ?", "Wer entwickelt Udev ?", "Wer entwickelte Udev ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Udev> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ugly Americans ?", "Welche Agenten entwickelten Ugly Americans ?", "Welcher Agent entwickelt Ugly Americans ?", "Welcher Agent entwickelte Ugly Americans ?", "Wer entwickelt Ugly Americans ?", "Wer entwickelte Ugly Americans ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ugly_Americans_(TV_series)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ugly Betty ?", "Welche Agenten entwickelten Ugly Betty ?", "Welcher Agent entwickelt Ugly Betty ?", "Welcher Agent entwickelte Ugly Betty ?", "Wer entwickelt Ugly Betty ?", "Wer entwickelte Ugly Betty ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ugly_Betty> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ulead MediaStudio Pro ?", "Welche Agenten entwickelten Ulead MediaStudio Pro ?", "Welcher Agent entwickelt Ulead MediaStudio Pro ?", "Welcher Agent entwickelte Ulead MediaStudio Pro ?", "Wer entwickelt Ulead MediaStudio Pro ?", "Wer entwickelte Ulead MediaStudio Pro ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ulead_MediaStudio_Pro> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ultima IX: Ascension ?", "Welche Agenten entwickelten Ultima IX: Ascension ?", "Welcher Agent entwickelt Ultima IX: Ascension ?", "Welcher Agent entwickelte Ultima IX: Ascension ?", "Wer entwickelt Ultima IX: Ascension ?", "Wer entwickelte Ultima IX: Ascension ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ultima_IX:_Ascension> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ultima Underworld: The Stygian Abyss ?", "Welche Agenten entwickelten Ultima Underworld: The Stygian Abyss ?", "Welcher Agent entwickelt Ultima Underworld: The Stygian Abyss ?", "Welcher Agent entwickelte Ultima Underworld: The Stygian Abyss ?", "Wer entwickelt Ultima Underworld: The Stygian Abyss ?", "Wer entwickelte Ultima Underworld: The Stygian Abyss ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ultima_Underworld:_The_Stygian_Abyss> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ultima VI: The False Prophet ?", "Welche Agenten entwickelten Ultima VI: The False Prophet ?", "Welcher Agent entwickelt Ultima VI: The False Prophet ?", "Welcher Agent entwickelte Ultima VI: The False Prophet ?", "Wer entwickelt Ultima VI: The False Prophet ?", "Wer entwickelte Ultima VI: The False Prophet ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ultima_VI:_The_False_Prophet> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ultima VII: The Black Gate ?", "Welche Agenten entwickelten Ultima VII: The Black Gate ?", "Welcher Agent entwickelt Ultima VII: The Black Gate ?", "Welcher Agent entwickelte Ultima VII: The Black Gate ?", "Wer entwickelt Ultima VII: The Black Gate ?", "Wer entwickelte Ultima VII: The Black Gate ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ultima_VII:_The_Black_Gate> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Der ultimative Spider-Man (Fernsehserie) ?", "Welche Agenten entwickelten Der ultimative Spider-Man (Fernsehserie) ?", "Welcher Agent entwickelt Der ultimative Spider-Man (Fernsehserie) ?", "Welcher Agent entwickelte Der ultimative Spider-Man (Fernsehserie) ?", "Wer entwickelt Der ultimative Spider-Man (Fernsehserie) ?", "Wer entwickelte Der ultimative Spider-Man (Fernsehserie) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ultimate_Spider-Man_(TV_series)> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ultra Street Fighter II: The Final Challengers ?", "Welche Agenten entwickelten Ultra Street Fighter II: The Final Challengers ?", "Welcher Agent entwickelt Ultra Street Fighter II: The Final Challengers ?", "Welcher Agent entwickelte Ultra Street Fighter II: The Final Challengers ?", "Wer entwickelt Ultra Street Fighter II: The Final Challengers ?", "Wer entwickelte Ultra Street Fighter II: The Final Challengers ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ultra_Street_Fighter_II:_The_Final_Challengers> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Ultrix ?", "Welche Agenten entwickelten Ultrix ?", "Welcher Agent entwickelt Ultrix ?", "Welcher Agent entwickelte Ultrix ?", "Wer entwickelt Ultrix ?", "Wer entwickelte Ultrix ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ultrix> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Uncharted: Drakes Schicksal ?", "Welche Agenten entwickelten Uncharted: Drakes Schicksal ?", "Welcher Agent entwickelt Uncharted: Drakes Schicksal ?", "Welcher Agent entwickelte Uncharted: Drakes Schicksal ?", "Wer entwickelt Uncharted: Drakes Schicksal ?", "Wer entwickelte Uncharted: Drakes Schicksal ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Uncharted:_Drake's_Fortune> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Uncharted: The Lost Legacy ?", "Welche Agenten entwickelten Uncharted: The Lost Legacy ?", "Welcher Agent entwickelt Uncharted: The Lost Legacy ?", "Welcher Agent entwickelte Uncharted: The Lost Legacy ?", "Wer entwickelt Uncharted: The Lost Legacy ?", "Wer entwickelte Uncharted: The Lost Legacy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Uncharted:_The_Lost_Legacy> <http://dbpedia.org/ontology/developer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Ronald McDonald ?", "Welche Person spielte Ronald McDonald ?", "Welche Personen spielen Ronald McDonald ?", "Welche Personen spielten Ronald McDonald ?", "Wer spielt Ronald McDonald ?", "Wer spielte Ronald McDonald ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ronald_McDonald> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt George Smiley ?", "Welche Person spielte George Smiley ?", "Welche Personen spielen George Smiley ?", "Welche Personen spielten George Smiley ?", "Wer spielt George Smiley ?", "Wer spielte George Smiley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/George_Smiley> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Bowser (Computerspielfigur) ?", "Welche Person spielte Bowser (Computerspielfigur) ?", "Welche Personen spielen Bowser (Computerspielfigur) ?", "Welche Personen spielten Bowser (Computerspielfigur) ?", "Wer spielt Bowser (Computerspielfigur) ?", "Wer spielte Bowser (Computerspielfigur) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Bowser_(character)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Leia Organa ?", "Welche Person spielte Leia Organa ?", "Welche Personen spielen Leia Organa ?", "Welche Personen spielten Leia Organa ?", "Wer spielt Leia Organa ?", "Wer spielte Leia Organa ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Princess_Leia> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Hannibal Lecter ?", "Welche Person spielte Hannibal Lecter ?", "Welche Personen spielen Hannibal Lecter ?", "Welche Personen spielten Hannibal Lecter ?", "Wer spielt Hannibal Lecter ?", "Wer spielte Hannibal Lecter ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Hannibal_Lecter> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Horatio Hornblower ?", "Welche Person spielte Horatio Hornblower ?", "Welche Personen spielen Horatio Hornblower ?", "Welche Personen spielten Horatio Hornblower ?", "Wer spielt Horatio Hornblower ?", "Wer spielte Horatio Hornblower ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Horatio_Hornblower> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Obi-Wan Kenobi ?", "Welche Person spielte Obi-Wan Kenobi ?", "Welche Personen spielen Obi-Wan Kenobi ?", "Welche Personen spielten Obi-Wan Kenobi ?", "Wer spielt Obi-Wan Kenobi ?", "Wer spielte Obi-Wan Kenobi ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Obi-Wan_Kenobi> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Francis Underwood ?", "Welche Person spielte Francis Underwood ?", "Welche Personen spielen Francis Underwood ?", "Welche Personen spielten Francis Underwood ?", "Wer spielt Francis Underwood ?", "Wer spielte Francis Underwood ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Frank_Underwood_(House_of_Cards)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Fu Manchu ?", "Welche Person spielte Fu Manchu ?", "Welche Personen spielen Fu Manchu ?", "Welche Personen spielten Fu Manchu ?", "Wer spielt Fu Manchu ?", "Wer spielte Fu Manchu ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Fu_Manchu> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Ginny Weasley ?", "Welche Person spielte Ginny Weasley ?", "Welche Personen spielen Ginny Weasley ?", "Welche Personen spielten Ginny Weasley ?", "Wer spielt Ginny Weasley ?", "Wer spielte Ginny Weasley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ginny_Weasley> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Minerva McGonagall ?", "Welche Person spielte Minerva McGonagall ?", "Welche Personen spielen Minerva McGonagall ?", "Welche Personen spielten Minerva McGonagall ?", "Wer spielt Minerva McGonagall ?", "Wer spielte Minerva McGonagall ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Minerva_McGonagall> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Nancy Drew ?", "Welche Person spielte Nancy Drew ?", "Welche Personen spielen Nancy Drew ?", "Welche Personen spielten Nancy Drew ?", "Wer spielt Nancy Drew ?", "Wer spielte Nancy Drew ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Nancy_Drew> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Q (James Bond) ?", "Welche Person spielte Q (James Bond) ?", "Welche Personen spielen Q (James Bond) ?", "Welche Personen spielten Q (James Bond) ?", "Wer spielt Q (James Bond) ?", "Wer spielte Q (James Bond) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Q_(James_Bond)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Robin Hood ?", "Welche Person spielte Robin Hood ?", "Welche Personen spielen Robin Hood ?", "Welche Personen spielten Robin Hood ?", "Wer spielt Robin Hood ?", "Wer spielte Robin Hood ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Robin_Hood> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Figuren und magische Gegenstände in der Unendlichen Geschichte ?", "Welche Person spielte Figuren und magische Gegenstände in der Unendlichen Geschichte ?", "Welche Personen spielen Figuren und magische Gegenstände in der Unendlichen Geschichte ?", "Welche Personen spielten Figuren und magische Gegenstände in der Unendlichen Geschichte ?", "Wer spielt Figuren und magische Gegenstände in der Unendlichen Geschichte ?", "Wer spielte Figuren und magische Gegenstände in der Unendlichen Geschichte ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_The_Neverending_Story_characters> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Liste der Figuren aus Navy CIS ?", "Welche Person spielte Liste der Figuren aus Navy CIS ?", "Welche Personen spielen Liste der Figuren aus Navy CIS ?", "Welche Personen spielten Liste der Figuren aus Navy CIS ?", "Wer spielt Liste der Figuren aus Navy CIS ?", "Wer spielte Liste der Figuren aus Navy CIS ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_NCIS_characters> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Jay und Silent Bob ?", "Welche Person spielte Jay und Silent Bob ?", "Welche Personen spielen Jay und Silent Bob ?", "Welche Personen spielten Jay und Silent Bob ?", "Wer spielt Jay und Silent Bob ?", "Wer spielte Jay und Silent Bob ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Jay_and_Silent_Bob> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Reginald Jeeves ?", "Welche Person spielte Reginald Jeeves ?", "Welche Personen spielen Reginald Jeeves ?", "Welche Personen spielten Reginald Jeeves ?", "Wer spielt Reginald Jeeves ?", "Wer spielte Reginald Jeeves ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Jeeves> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt John Carter vom Mars ?", "Welche Person spielte John Carter vom Mars ?", "Welche Personen spielen John Carter vom Mars ?", "Welche Personen spielten John Carter vom Mars ?", "Wer spielt John Carter vom Mars ?", "Wer spielte John Carter vom Mars ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/John_Carter_of_Mars> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Kurt Wallander ?", "Welche Person spielte Kurt Wallander ?", "Welche Personen spielen Kurt Wallander ?", "Welche Personen spielten Kurt Wallander ?", "Wer spielt Kurt Wallander ?", "Wer spielte Kurt Wallander ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Kurt_Wallander> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Vesper Lynd ?", "Welche Person spielte Vesper Lynd ?", "Welche Personen spielen Vesper Lynd ?", "Welche Personen spielten Vesper Lynd ?", "Wer spielt Vesper Lynd ?", "Wer spielte Vesper Lynd ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Vesper_Lynd> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Miss Marple ?", "Welche Person spielte Miss Marple ?", "Welche Personen spielen Miss Marple ?", "Welche Personen spielten Miss Marple ?", "Wer spielt Miss Marple ?", "Wer spielte Miss Marple ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Miss_Marple> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Mister Magoo ?", "Welche Person spielte Mister Magoo ?", "Welche Personen spielen Mister Magoo ?", "Welche Personen spielten Mister Magoo ?", "Wer spielt Mister Magoo ?", "Wer spielte Mister Magoo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mr._Magoo> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Iago ?", "Welche Person spielte Iago ?", "Welche Personen spielen Iago ?", "Welche Personen spielten Iago ?", "Wer spielt Iago ?", "Wer spielte Iago ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Iago> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Jason Voorhees ?", "Welche Person spielte Jason Voorhees ?", "Welche Personen spielen Jason Voorhees ?", "Welche Personen spielten Jason Voorhees ?", "Wer spielt Jason Voorhees ?", "Wer spielte Jason Voorhees ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Jason_Voorhees> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Saul Goodman ?", "Welche Person spielte Saul Goodman ?", "Welche Personen spielen Saul Goodman ?", "Welche Personen spielten Saul Goodman ?", "Wer spielt Saul Goodman ?", "Wer spielte Saul Goodman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Saul_Goodman> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt George Edward Challenger ?", "Welche Person spielte George Edward Challenger ?", "Welche Personen spielen George Edward Challenger ?", "Welche Personen spielten George Edward Challenger ?", "Wer spielt George Edward Challenger ?", "Wer spielte George Edward Challenger ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Professor_Challenger> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Tom Ripley ?", "Welche Person spielte Tom Ripley ?", "Welche Personen spielen Tom Ripley ?", "Welche Personen spielten Tom Ripley ?", "Wer spielt Tom Ripley ?", "Wer spielte Tom Ripley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Tom_Ripley> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Arthur Hastings ?", "Welche Person spielte Arthur Hastings ?", "Welche Personen spielen Arthur Hastings ?", "Welche Personen spielten Arthur Hastings ?", "Wer spielt Arthur Hastings ?", "Wer spielte Arthur Hastings ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Arthur_Hastings> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Barbara Jeziorkowska ?", "Welche Person spielte Barbara Jeziorkowska ?", "Welche Personen spielen Barbara Jeziorkowska ?", "Welche Personen spielten Barbara Jeziorkowska ?", "Wer spielt Barbara Jeziorkowska ?", "Wer spielte Barbara Jeziorkowska ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Barbara_Jeziorkowska> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Paul Temple ?", "Welche Person spielte Paul Temple ?", "Welche Personen spielen Paul Temple ?", "Welche Personen spielten Paul Temple ?", "Wer spielt Paul Temple ?", "Wer spielte Paul Temple ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Paul_Temple> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Anakin Skywalker ?", "Welche Person spielte Anakin Skywalker ?", "Welche Personen spielen Anakin Skywalker ?", "Welche Personen spielten Anakin Skywalker ?", "Wer spielt Anakin Skywalker ?", "Wer spielte Anakin Skywalker ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Darth_Vader> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Darth Vader ?", "Welche Person spielte Darth Vader ?", "Welche Personen spielen Darth Vader ?", "Welche Personen spielten Darth Vader ?", "Wer spielt Darth Vader ?", "Wer spielte Darth Vader ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Darth_Vader> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Perry Mason ?", "Welche Person spielte Perry Mason ?", "Welche Personen spielen Perry Mason ?", "Welche Personen spielten Perry Mason ?", "Wer spielt Perry Mason ?", "Wer spielte Perry Mason ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Perry_Mason> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Janice Rand ?", "Welche Person spielte Janice Rand ?", "Welche Personen spielen Janice Rand ?", "Welche Personen spielten Janice Rand ?", "Wer spielt Janice Rand ?", "Wer spielte Janice Rand ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Janice_Rand> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Richter Di ?", "Welche Person spielte Richter Di ?", "Welche Personen spielen Richter Di ?", "Welche Personen spielten Richter Di ?", "Wer spielt Richter Di ?", "Wer spielte Richter Di ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Judge_Dee> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Elmo (Sesamstraße) ?", "Welche Person spielte Elmo (Sesamstraße) ?", "Welche Personen spielen Elmo (Sesamstraße) ?", "Welche Personen spielten Elmo (Sesamstraße) ?", "Wer spielt Elmo (Sesamstraße) ?", "Wer spielte Elmo (Sesamstraße) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Elmo> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Fagin (Charles Dickens) ?", "Welche Person spielte Fagin (Charles Dickens) ?", "Welche Personen spielen Fagin (Charles Dickens) ?", "Welche Personen spielten Fagin (Charles Dickens) ?", "Wer spielt Fagin (Charles Dickens) ?", "Wer spielte Fagin (Charles Dickens) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Fagin> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Ender Wiggin ?", "Welche Person spielte Ender Wiggin ?", "Welche Personen spielen Ender Wiggin ?", "Welche Personen spielten Ender Wiggin ?", "Wer spielt Ender Wiggin ?", "Wer spielte Ender Wiggin ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ender_Wiggin> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Hercule Poirot ?", "Welche Person spielte Hercule Poirot ?", "Welche Personen spielen Hercule Poirot ?", "Welche Personen spielten Hercule Poirot ?", "Wer spielt Hercule Poirot ?", "Wer spielte Hercule Poirot ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Hercule_Poirot> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Zefram Cochrane ?", "Welche Person spielte Zefram Cochrane ?", "Welche Personen spielen Zefram Cochrane ?", "Welche Personen spielten Zefram Cochrane ?", "Wer spielt Zefram Cochrane ?", "Wer spielte Zefram Cochrane ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Zefram_Cochrane> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Philip Marlowe ?", "Welche Person spielte Philip Marlowe ?", "Welche Personen spielen Philip Marlowe ?", "Welche Personen spielten Philip Marlowe ?", "Wer spielt Philip Marlowe ?", "Wer spielte Philip Marlowe ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Philip_Marlowe> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Sweeney Todd ?", "Welche Person spielte Sweeney Todd ?", "Welche Personen spielen Sweeney Todd ?", "Welche Personen spielten Sweeney Todd ?", "Wer spielt Sweeney Todd ?", "Wer spielte Sweeney Todd ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Sweeney_Todd> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Simon Templar ?", "Welche Person spielte Simon Templar ?", "Welche Personen spielen Simon Templar ?", "Welche Personen spielten Simon Templar ?", "Wer spielt Simon Templar ?", "Wer spielte Simon Templar ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Saint_(Simon_Templar)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Claud_Eustace_Teal ?", "Welche Person spielte http://dbpedia.org/resource/Claud_Eustace_Teal ?", "Welche Personen spielen http://dbpedia.org/resource/Claud_Eustace_Teal ?", "Welche Personen spielten http://dbpedia.org/resource/Claud_Eustace_Teal ?", "Wer spielt http://dbpedia.org/resource/Claud_Eustace_Teal ?", "Wer spielte http://dbpedia.org/resource/Claud_Eustace_Teal ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Claud_Eustace_Teal> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Salvo_Montalbano ?", "Welche Person spielte http://dbpedia.org/resource/Salvo_Montalbano ?", "Welche Personen spielen http://dbpedia.org/resource/Salvo_Montalbano ?", "Welche Personen spielten http://dbpedia.org/resource/Salvo_Montalbano ?", "Wer spielt http://dbpedia.org/resource/Salvo_Montalbano ?", "Wer spielte http://dbpedia.org/resource/Salvo_Montalbano ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Salvo_Montalbano> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_NCIS:_New_Orleans_characters ?", "Welche Person spielte http://dbpedia.org/resource/List_of_NCIS:_New_Orleans_characters ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_NCIS:_New_Orleans_characters ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_NCIS:_New_Orleans_characters ?", "Wer spielt http://dbpedia.org/resource/List_of_NCIS:_New_Orleans_characters ?", "Wer spielte http://dbpedia.org/resource/List_of_NCIS:_New_Orleans_characters ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_NCIS:_New_Orleans_characters> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_High_School_Musical_characters ?", "Welche Person spielte http://dbpedia.org/resource/List_of_High_School_Musical_characters ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_High_School_Musical_characters ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_High_School_Musical_characters ?", "Wer spielt http://dbpedia.org/resource/List_of_High_School_Musical_characters ?", "Wer spielte http://dbpedia.org/resource/List_of_High_School_Musical_characters ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_High_School_Musical_characters> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Gilbert_Blythe ?", "Welche Person spielte http://dbpedia.org/resource/Gilbert_Blythe ?", "Welche Personen spielen http://dbpedia.org/resource/Gilbert_Blythe ?", "Welche Personen spielten http://dbpedia.org/resource/Gilbert_Blythe ?", "Wer spielt http://dbpedia.org/resource/Gilbert_Blythe ?", "Wer spielte http://dbpedia.org/resource/Gilbert_Blythe ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Gilbert_Blythe> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Anatole_Kuragin ?", "Welche Person spielte http://dbpedia.org/resource/Anatole_Kuragin ?", "Welche Personen spielen http://dbpedia.org/resource/Anatole_Kuragin ?", "Welche Personen spielten http://dbpedia.org/resource/Anatole_Kuragin ?", "Wer spielt http://dbpedia.org/resource/Anatole_Kuragin ?", "Wer spielte http://dbpedia.org/resource/Anatole_Kuragin ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Anatole_Kuragin> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/MacGyver ?", "Welche Person spielte http://dbpedia.org/resource/MacGyver ?", "Welche Personen spielen http://dbpedia.org/resource/MacGyver ?", "Welche Personen spielten http://dbpedia.org/resource/MacGyver ?", "Wer spielt http://dbpedia.org/resource/MacGyver ?", "Wer spielte http://dbpedia.org/resource/MacGyver ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/MacGyver> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Louanne_Katraine ?", "Welche Person spielte http://dbpedia.org/resource/Louanne_Katraine ?", "Welche Personen spielen http://dbpedia.org/resource/Louanne_Katraine ?", "Welche Personen spielten http://dbpedia.org/resource/Louanne_Katraine ?", "Wer spielt http://dbpedia.org/resource/Louanne_Katraine ?", "Wer spielte http://dbpedia.org/resource/Louanne_Katraine ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Louanne_Katraine> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Pablo_Catáneo ?", "Welche Person spielte http://dbpedia.org/resource/Pablo_Catáneo ?", "Welche Personen spielen http://dbpedia.org/resource/Pablo_Catáneo ?", "Welche Personen spielten http://dbpedia.org/resource/Pablo_Catáneo ?", "Wer spielt http://dbpedia.org/resource/Pablo_Catáneo ?", "Wer spielte http://dbpedia.org/resource/Pablo_Catáneo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Pablo_Catáneo> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2009) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2009) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2009) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2009) ?", "Wer spielt http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2009) ?", "Wer spielte http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2009) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2009)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Lucy_and_Ricky_Ricardo ?", "Welche Person spielte http://dbpedia.org/resource/Lucy_and_Ricky_Ricardo ?", "Welche Personen spielen http://dbpedia.org/resource/Lucy_and_Ricky_Ricardo ?", "Welche Personen spielten http://dbpedia.org/resource/Lucy_and_Ricky_Ricardo ?", "Wer spielt http://dbpedia.org/resource/Lucy_and_Ricky_Ricardo ?", "Wer spielte http://dbpedia.org/resource/Lucy_and_Ricky_Ricardo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_and_Ricky_Ricardo> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_General_Hospital_characters_(1960s) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_General_Hospital_characters_(1960s) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_General_Hospital_characters_(1960s) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_General_Hospital_characters_(1960s) ?", "Wer spielt http://dbpedia.org/resource/List_of_General_Hospital_characters_(1960s) ?", "Wer spielte http://dbpedia.org/resource/List_of_General_Hospital_characters_(1960s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_General_Hospital_characters_(1960s)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Elizabeth_Swann ?", "Welche Person spielte http://dbpedia.org/resource/Elizabeth_Swann ?", "Welche Personen spielen http://dbpedia.org/resource/Elizabeth_Swann ?", "Welche Personen spielten http://dbpedia.org/resource/Elizabeth_Swann ?", "Wer spielt http://dbpedia.org/resource/Elizabeth_Swann ?", "Wer spielte http://dbpedia.org/resource/Elizabeth_Swann ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Elizabeth_Swann> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Jasmine_Burrows ?", "Welche Person spielte http://dbpedia.org/resource/Jasmine_Burrows ?", "Welche Personen spielen http://dbpedia.org/resource/Jasmine_Burrows ?", "Welche Personen spielten http://dbpedia.org/resource/Jasmine_Burrows ?", "Wer spielt http://dbpedia.org/resource/Jasmine_Burrows ?", "Wer spielte http://dbpedia.org/resource/Jasmine_Burrows ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Jasmine_Burrows> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2002) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2002) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2002) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2002) ?", "Wer spielt http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2002) ?", "Wer spielte http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2002) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2002)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2018) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2018) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2018) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2018) ?", "Wer spielt http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2018) ?", "Wer spielte http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2018) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2018)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Lisa_Fowler ?", "Welche Person spielte http://dbpedia.org/resource/Lisa_Fowler ?", "Welche Personen spielen http://dbpedia.org/resource/Lisa_Fowler ?", "Welche Personen spielten http://dbpedia.org/resource/Lisa_Fowler ?", "Wer spielt http://dbpedia.org/resource/Lisa_Fowler ?", "Wer spielte http://dbpedia.org/resource/Lisa_Fowler ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lisa_Fowler> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Nyssa_(Doctor_Who) ?", "Welche Person spielte http://dbpedia.org/resource/Nyssa_(Doctor_Who) ?", "Welche Personen spielen http://dbpedia.org/resource/Nyssa_(Doctor_Who) ?", "Welche Personen spielten http://dbpedia.org/resource/Nyssa_(Doctor_Who) ?", "Wer spielt http://dbpedia.org/resource/Nyssa_(Doctor_Who) ?", "Wer spielte http://dbpedia.org/resource/Nyssa_(Doctor_Who) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Nyssa_(Doctor_Who)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Primeval_characters ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Primeval_characters ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Primeval_characters ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Primeval_characters ?", "Wer spielt http://dbpedia.org/resource/List_of_Primeval_characters ?", "Wer spielte http://dbpedia.org/resource/List_of_Primeval_characters ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Primeval_characters> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Hilda_Spellman ?", "Welche Person spielte http://dbpedia.org/resource/Hilda_Spellman ?", "Welche Personen spielen http://dbpedia.org/resource/Hilda_Spellman ?", "Welche Personen spielten http://dbpedia.org/resource/Hilda_Spellman ?", "Wer spielt http://dbpedia.org/resource/Hilda_Spellman ?", "Wer spielte http://dbpedia.org/resource/Hilda_Spellman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Hilda_Spellman> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Dawn_Tinsley ?", "Welche Person spielte http://dbpedia.org/resource/Dawn_Tinsley ?", "Welche Personen spielen http://dbpedia.org/resource/Dawn_Tinsley ?", "Welche Personen spielten http://dbpedia.org/resource/Dawn_Tinsley ?", "Wer spielt http://dbpedia.org/resource/Dawn_Tinsley ?", "Wer spielte http://dbpedia.org/resource/Dawn_Tinsley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Dawn_Tinsley> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Trailer_Park_Boys_characters ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Trailer_Park_Boys_characters ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Trailer_Park_Boys_characters ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Trailer_Park_Boys_characters ?", "Wer spielt http://dbpedia.org/resource/List_of_Trailer_Park_Boys_characters ?", "Wer spielte http://dbpedia.org/resource/List_of_Trailer_Park_Boys_characters ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Trailer_Park_Boys_characters> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Lily_Walsh ?", "Welche Person spielte http://dbpedia.org/resource/Lily_Walsh ?", "Welche Personen spielen http://dbpedia.org/resource/Lily_Walsh ?", "Welche Personen spielten http://dbpedia.org/resource/Lily_Walsh ?", "Wer spielt http://dbpedia.org/resource/Lily_Walsh ?", "Wer spielte http://dbpedia.org/resource/Lily_Walsh ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lily_Walsh> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Tilly_Evans ?", "Welche Person spielte http://dbpedia.org/resource/Tilly_Evans ?", "Welche Personen spielen http://dbpedia.org/resource/Tilly_Evans ?", "Welche Personen spielten http://dbpedia.org/resource/Tilly_Evans ?", "Wer spielt http://dbpedia.org/resource/Tilly_Evans ?", "Wer spielte http://dbpedia.org/resource/Tilly_Evans ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Tilly_Evans> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Neighbours_characters_(2020) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Neighbours_characters_(2020) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Neighbours_characters_(2020) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Neighbours_characters_(2020) ?", "Wer spielt http://dbpedia.org/resource/List_of_Neighbours_characters_(2020) ?", "Wer spielte http://dbpedia.org/resource/List_of_Neighbours_characters_(2020) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Neighbours_characters_(2020)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2004) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2004) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2004) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2004) ?", "Wer spielt http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2004) ?", "Wer spielte http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2004) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2004)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2007) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2007) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2007) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2007) ?", "Wer spielt http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2007) ?", "Wer spielte http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2007) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Coronation_Street_characters_(2007)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Bethany_Platt ?", "Welche Person spielte http://dbpedia.org/resource/Bethany_Platt ?", "Welche Personen spielen http://dbpedia.org/resource/Bethany_Platt ?", "Welche Personen spielten http://dbpedia.org/resource/Bethany_Platt ?", "Wer spielt http://dbpedia.org/resource/Bethany_Platt ?", "Wer spielte http://dbpedia.org/resource/Bethany_Platt ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Bethany_Platt> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Kirsty_Clements ?", "Welche Person spielte http://dbpedia.org/resource/Kirsty_Clements ?", "Welche Personen spielen http://dbpedia.org/resource/Kirsty_Clements ?", "Welche Personen spielten http://dbpedia.org/resource/Kirsty_Clements ?", "Wer spielt http://dbpedia.org/resource/Kirsty_Clements ?", "Wer spielte http://dbpedia.org/resource/Kirsty_Clements ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Kirsty_Clements> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Lady_Marian ?", "Welche Person spielte http://dbpedia.org/resource/Lady_Marian ?", "Welche Personen spielen http://dbpedia.org/resource/Lady_Marian ?", "Welche Personen spielten http://dbpedia.org/resource/Lady_Marian ?", "Wer spielt http://dbpedia.org/resource/Lady_Marian ?", "Wer spielte http://dbpedia.org/resource/Lady_Marian ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lady_Marian> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Robin_Hood_(2006_TV_series)_characters ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Robin_Hood_(2006_TV_series)_characters ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Robin_Hood_(2006_TV_series)_characters ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Robin_Hood_(2006_TV_series)_characters ?", "Wer spielt http://dbpedia.org/resource/List_of_Robin_Hood_(2006_TV_series)_characters ?", "Wer spielte http://dbpedia.org/resource/List_of_Robin_Hood_(2006_TV_series)_characters ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Robin_Hood_(2006_TV_series)_characters> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Maid_Marian ?", "Welche Person spielte http://dbpedia.org/resource/Maid_Marian ?", "Welche Personen spielen http://dbpedia.org/resource/Maid_Marian ?", "Welche Personen spielten http://dbpedia.org/resource/Maid_Marian ?", "Wer spielt http://dbpedia.org/resource/Maid_Marian ?", "Wer spielte http://dbpedia.org/resource/Maid_Marian ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Maid_Marian> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Aria_Montgomery ?", "Welche Person spielte http://dbpedia.org/resource/Aria_Montgomery ?", "Welche Personen spielen http://dbpedia.org/resource/Aria_Montgomery ?", "Welche Personen spielten http://dbpedia.org/resource/Aria_Montgomery ?", "Wer spielt http://dbpedia.org/resource/Aria_Montgomery ?", "Wer spielte http://dbpedia.org/resource/Aria_Montgomery ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Aria_Montgomery> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Katy_Keene ?", "Welche Person spielte http://dbpedia.org/resource/Katy_Keene ?", "Welche Personen spielen http://dbpedia.org/resource/Katy_Keene ?", "Welche Personen spielten http://dbpedia.org/resource/Katy_Keene ?", "Wer spielt http://dbpedia.org/resource/Katy_Keene ?", "Wer spielte http://dbpedia.org/resource/Katy_Keene ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Katy_Keene> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Number_Three_(Battlestar_Galactica) ?", "Welche Person spielte http://dbpedia.org/resource/Number_Three_(Battlestar_Galactica) ?", "Welche Personen spielen http://dbpedia.org/resource/Number_Three_(Battlestar_Galactica) ?", "Welche Personen spielten http://dbpedia.org/resource/Number_Three_(Battlestar_Galactica) ?", "Wer spielt http://dbpedia.org/resource/Number_Three_(Battlestar_Galactica) ?", "Wer spielte http://dbpedia.org/resource/Number_Three_(Battlestar_Galactica) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Number_Three_(Battlestar_Galactica)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Xena ?", "Welche Person spielte http://dbpedia.org/resource/Xena ?", "Welche Personen spielen http://dbpedia.org/resource/Xena ?", "Welche Personen spielten http://dbpedia.org/resource/Xena ?", "Wer spielt http://dbpedia.org/resource/Xena ?", "Wer spielte http://dbpedia.org/resource/Xena ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Xena> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Countess_Palatine_Ingrid_von_Marburg ?", "Welche Person spielte http://dbpedia.org/resource/Countess_Palatine_Ingrid_von_Marburg ?", "Welche Personen spielen http://dbpedia.org/resource/Countess_Palatine_Ingrid_von_Marburg ?", "Welche Personen spielten http://dbpedia.org/resource/Countess_Palatine_Ingrid_von_Marburg ?", "Wer spielt http://dbpedia.org/resource/Countess_Palatine_Ingrid_von_Marburg ?", "Wer spielte http://dbpedia.org/resource/Countess_Palatine_Ingrid_von_Marburg ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Countess_Palatine_Ingrid_von_Marburg> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Ling_Woo ?", "Welche Person spielte http://dbpedia.org/resource/Ling_Woo ?", "Welche Personen spielen http://dbpedia.org/resource/Ling_Woo ?", "Welche Personen spielten http://dbpedia.org/resource/Ling_Woo ?", "Wer spielt http://dbpedia.org/resource/Ling_Woo ?", "Wer spielte http://dbpedia.org/resource/Ling_Woo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ling_Woo> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Chas_Dingle ?", "Welche Person spielte http://dbpedia.org/resource/Chas_Dingle ?", "Welche Personen spielen http://dbpedia.org/resource/Chas_Dingle ?", "Welche Personen spielten http://dbpedia.org/resource/Chas_Dingle ?", "Wer spielt http://dbpedia.org/resource/Chas_Dingle ?", "Wer spielte http://dbpedia.org/resource/Chas_Dingle ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Chas_Dingle> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_The_Bill_characters_(M–P) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_The_Bill_characters_(M–P) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_The_Bill_characters_(M–P) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_The_Bill_characters_(M–P) ?", "Wer spielt http://dbpedia.org/resource/List_of_The_Bill_characters_(M–P) ?", "Wer spielte http://dbpedia.org/resource/List_of_The_Bill_characters_(M–P) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_The_Bill_characters_(M–P)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Natalie_Evans ?", "Welche Person spielte http://dbpedia.org/resource/Natalie_Evans ?", "Welche Personen spielen http://dbpedia.org/resource/Natalie_Evans ?", "Welche Personen spielten http://dbpedia.org/resource/Natalie_Evans ?", "Wer spielt http://dbpedia.org/resource/Natalie_Evans ?", "Wer spielte http://dbpedia.org/resource/Natalie_Evans ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Natalie_Evans> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Zack_Taylor ?", "Welche Person spielte http://dbpedia.org/resource/Zack_Taylor ?", "Welche Personen spielen http://dbpedia.org/resource/Zack_Taylor ?", "Welche Personen spielten http://dbpedia.org/resource/Zack_Taylor ?", "Wer spielt http://dbpedia.org/resource/Zack_Taylor ?", "Wer spielte http://dbpedia.org/resource/Zack_Taylor ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Zack_Taylor> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Liu_Kang ?", "Welche Person spielte http://dbpedia.org/resource/Liu_Kang ?", "Welche Personen spielen http://dbpedia.org/resource/Liu_Kang ?", "Welche Personen spielten http://dbpedia.org/resource/Liu_Kang ?", "Wer spielt http://dbpedia.org/resource/Liu_Kang ?", "Wer spielte http://dbpedia.org/resource/Liu_Kang ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Liu_Kang> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Tinker_Bell ?", "Welche Person spielte http://dbpedia.org/resource/Tinker_Bell ?", "Welche Personen spielen http://dbpedia.org/resource/Tinker_Bell ?", "Welche Personen spielten http://dbpedia.org/resource/Tinker_Bell ?", "Wer spielt http://dbpedia.org/resource/Tinker_Bell ?", "Wer spielte http://dbpedia.org/resource/Tinker_Bell ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Tinker_Bell> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Tina_Carter ?", "Welche Person spielte http://dbpedia.org/resource/Tina_Carter ?", "Welche Personen spielen http://dbpedia.org/resource/Tina_Carter ?", "Welche Personen spielten http://dbpedia.org/resource/Tina_Carter ?", "Wer spielt http://dbpedia.org/resource/Tina_Carter ?", "Wer spielte http://dbpedia.org/resource/Tina_Carter ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Tina_Carter> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Home_and_Away_characters_(2009) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Home_and_Away_characters_(2009) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Home_and_Away_characters_(2009) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Home_and_Away_characters_(2009) ?", "Wer spielt http://dbpedia.org/resource/List_of_Home_and_Away_characters_(2009) ?", "Wer spielte http://dbpedia.org/resource/List_of_Home_and_Away_characters_(2009) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Home_and_Away_characters_(2009)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Gaston_(Beauty_and_the_Beast) ?", "Welche Person spielte http://dbpedia.org/resource/Gaston_(Beauty_and_the_Beast) ?", "Welche Personen spielen http://dbpedia.org/resource/Gaston_(Beauty_and_the_Beast) ?", "Welche Personen spielten http://dbpedia.org/resource/Gaston_(Beauty_and_the_Beast) ?", "Wer spielt http://dbpedia.org/resource/Gaston_(Beauty_and_the_Beast) ?", "Wer spielte http://dbpedia.org/resource/Gaston_(Beauty_and_the_Beast) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Gaston_(Beauty_and_the_Beast)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Angelo_Rosetta ?", "Welche Person spielte http://dbpedia.org/resource/Angelo_Rosetta ?", "Welche Personen spielen http://dbpedia.org/resource/Angelo_Rosetta ?", "Welche Personen spielten http://dbpedia.org/resource/Angelo_Rosetta ?", "Wer spielt http://dbpedia.org/resource/Angelo_Rosetta ?", "Wer spielte http://dbpedia.org/resource/Angelo_Rosetta ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Angelo_Rosetta> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2016) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2016) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2016) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2016) ?", "Wer spielt http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2016) ?", "Wer spielte http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2016) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Hollyoaks_characters_(2016)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Noah_Newman ?", "Welche Person spielte http://dbpedia.org/resource/Noah_Newman ?", "Welche Personen spielen http://dbpedia.org/resource/Noah_Newman ?", "Welche Personen spielten http://dbpedia.org/resource/Noah_Newman ?", "Wer spielt http://dbpedia.org/resource/Noah_Newman ?", "Wer spielte http://dbpedia.org/resource/Noah_Newman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Noah_Newman> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Scotty_Wandell ?", "Welche Person spielte http://dbpedia.org/resource/Scotty_Wandell ?", "Welche Personen spielen http://dbpedia.org/resource/Scotty_Wandell ?", "Welche Personen spielten http://dbpedia.org/resource/Scotty_Wandell ?", "Wer spielt http://dbpedia.org/resource/Scotty_Wandell ?", "Wer spielte http://dbpedia.org/resource/Scotty_Wandell ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Scotty_Wandell> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Neighbours_characters_(2008) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Neighbours_characters_(2008) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Neighbours_characters_(2008) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Neighbours_characters_(2008) ?", "Wer spielt http://dbpedia.org/resource/List_of_Neighbours_characters_(2008) ?", "Wer spielte http://dbpedia.org/resource/List_of_Neighbours_characters_(2008) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Neighbours_characters_(2008)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Romeo_Smith ?", "Welche Person spielte http://dbpedia.org/resource/Romeo_Smith ?", "Welche Personen spielen http://dbpedia.org/resource/Romeo_Smith ?", "Welche Personen spielten http://dbpedia.org/resource/Romeo_Smith ?", "Wer spielt http://dbpedia.org/resource/Romeo_Smith ?", "Wer spielte http://dbpedia.org/resource/Romeo_Smith ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Romeo_Smith> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/Freddie_McClair ?", "Welche Person spielte http://dbpedia.org/resource/Freddie_McClair ?", "Welche Personen spielen http://dbpedia.org/resource/Freddie_McClair ?", "Welche Personen spielten http://dbpedia.org/resource/Freddie_McClair ?", "Wer spielt http://dbpedia.org/resource/Freddie_McClair ?", "Wer spielte http://dbpedia.org/resource/Freddie_McClair ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Freddie_McClair> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/William_Adama ?", "Welche Person spielte http://dbpedia.org/resource/William_Adama ?", "Welche Personen spielen http://dbpedia.org/resource/William_Adama ?", "Welche Personen spielten http://dbpedia.org/resource/William_Adama ?", "Wer spielt http://dbpedia.org/resource/William_Adama ?", "Wer spielte http://dbpedia.org/resource/William_Adama ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/William_Adama> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt http://dbpedia.org/resource/List_of_Neighbours_characters_(2011) ?", "Welche Person spielte http://dbpedia.org/resource/List_of_Neighbours_characters_(2011) ?", "Welche Personen spielen http://dbpedia.org/resource/List_of_Neighbours_characters_(2011) ?", "Welche Personen spielten http://dbpedia.org/resource/List_of_Neighbours_characters_(2011) ?", "Wer spielt http://dbpedia.org/resource/List_of_Neighbours_characters_(2011) ?", "Wer spielte http://dbpedia.org/resource/List_of_Neighbours_characters_(2011) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/List_of_Neighbours_characters_(2011)> <http://dbpedia.org/ontology/portrayer> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Luzifer (Stuck) aus?", "Was stellte Luzifer (Stuck) aus?", "Welche Museen stellen Luzifer (Stuck) aus?", "Welche Museen stellten Luzifer (Stuck) aus?", "Welches Museum stellt Luzifer (Stuck) aus?", "Welches Museum stellte Luzifer (Stuck) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucifer_(Stuck)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Das Frühstück der Ruderer aus?", "Was stellte Das Frühstück der Ruderer aus?", "Welche Museen stellen Das Frühstück der Ruderer aus?", "Welche Museen stellten Das Frühstück der Ruderer aus?", "Welches Museum stellt Das Frühstück der Ruderer aus?", "Welches Museum stellte Das Frühstück der Ruderer aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luncheon_of_the_Boating_Party> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Madonna Litta aus?", "Was stellte Madonna Litta aus?", "Welche Museen stellen Madonna Litta aus?", "Welche Museen stellten Madonna Litta aus?", "Welches Museum stellt Madonna Litta aus?", "Welches Museum stellte Madonna Litta aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Madonna_Litta> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Brügger Madonna aus?", "Was stellte Brügger Madonna aus?", "Welche Museen stellen Brügger Madonna aus?", "Welche Museen stellten Brügger Madonna aus?", "Welches Museum stellt Brügger Madonna aus?", "Welches Museum stellte Brügger Madonna aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Madonna_of_Bruges> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Madonna mit der Spindel aus?", "Was stellte Madonna mit der Spindel aus?", "Welche Museen stellen Madonna mit der Spindel aus?", "Welche Museen stellten Madonna mit der Spindel aus?", "Welches Museum stellt Madonna mit der Spindel aus?", "Welches Museum stellte Madonna mit der Spindel aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Madonna_of_the_Yarnwinder> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Caspar David Friedrich in seinem Atelier aus?", "Was stellte Caspar David Friedrich in seinem Atelier aus?", "Welche Museen stellen Caspar David Friedrich in seinem Atelier aus?", "Welche Museen stellten Caspar David Friedrich in seinem Atelier aus?", "Welches Museum stellt Caspar David Friedrich in seinem Atelier aus?", "Welches Museum stellte Caspar David Friedrich in seinem Atelier aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Caspar_David_Friedrich_in_his_Studio> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Ildefonso-Gruppe aus?", "Was stellte Ildefonso-Gruppe aus?", "Welche Museen stellen Ildefonso-Gruppe aus?", "Welche Museen stellten Ildefonso-Gruppe aus?", "Welches Museum stellt Ildefonso-Gruppe aus?", "Welches Museum stellte Ildefonso-Gruppe aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Castor_and_Pollux_(Prado)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Konstellationen aus?", "Was stellte Konstellationen aus?", "Welche Museen stellen Konstellationen aus?", "Welche Museen stellten Konstellationen aus?", "Welches Museum stellt Konstellationen aus?", "Welches Museum stellte Konstellationen aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Constellations_(Miró)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die Bekehrung des Paulus aus?", "Was stellte Die Bekehrung des Paulus aus?", "Welche Museen stellen Die Bekehrung des Paulus aus?", "Welche Museen stellten Die Bekehrung des Paulus aus?", "Welches Museum stellt Die Bekehrung des Paulus aus?", "Welches Museum stellte Die Bekehrung des Paulus aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Conversion_of_Paul_(Bruegel)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Lubliner Union (Gemälde) aus?", "Was stellte Lubliner Union (Gemälde) aus?", "Welche Museen stellen Lubliner Union (Gemälde) aus?", "Welche Museen stellten Lubliner Union (Gemälde) aus?", "Welches Museum stellt Lubliner Union (Gemälde) aus?", "Welches Museum stellte Lubliner Union (Gemälde) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Union_of_Lublin_(painting)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Venus von Milo aus?", "Was stellte Venus von Milo aus?", "Welche Museen stellen Venus von Milo aus?", "Welche Museen stellten Venus von Milo aus?", "Welches Museum stellt Venus von Milo aus?", "Welches Museum stellte Venus von Milo aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Venus_de_Milo> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Venus von Urbino aus?", "Was stellte Venus von Urbino aus?", "Welche Museen stellen Venus von Urbino aus?", "Welche Museen stellten Venus von Urbino aus?", "Welches Museum stellt Venus von Urbino aus?", "Welches Museum stellte Venus von Urbino aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Venus_of_Urbino> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Skargas Predigt aus?", "Was stellte Skargas Predigt aus?", "Welche Museen stellen Skargas Predigt aus?", "Welche Museen stellten Skargas Predigt aus?", "Welches Museum stellt Skargas Predigt aus?", "Welches Museum stellte Skargas Predigt aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Sermon_of_Piotr_Skarga> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Salome (Franz von Stuck) aus?", "Was stellte Salome (Franz von Stuck) aus?", "Welche Museen stellen Salome (Franz von Stuck) aus?", "Welche Museen stellten Salome (Franz von Stuck) aus?", "Welches Museum stellt Salome (Franz von Stuck) aus?", "Welches Museum stellte Salome (Franz von Stuck) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Salome_(Stuck)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Salon des Refusés aus?", "Was stellte Salon des Refusés aus?", "Welche Museen stellen Salon des Refusés aus?", "Welche Museen stellten Salon des Refusés aus?", "Welches Museum stellt Salon des Refusés aus?", "Welches Museum stellte Salon des Refusés aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Salon_des_Refusés> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Altar der sieben Sakramente (Rogier van der Weyden) aus?", "Was stellte Altar der sieben Sakramente (Rogier van der Weyden) aus?", "Welche Museen stellen Altar der sieben Sakramente (Rogier van der Weyden) aus?", "Welche Museen stellten Altar der sieben Sakramente (Rogier van der Weyden) aus?", "Welches Museum stellt Altar der sieben Sakramente (Rogier van der Weyden) aus?", "Welches Museum stellte Altar der sieben Sakramente (Rogier van der Weyden) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Seven_Sacraments_Altarpiece> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Schrei aus?", "Was stellte Der Schrei aus?", "Welche Museen stellen Der Schrei aus?", "Welche Museen stellten Der Schrei aus?", "Welches Museum stellt Der Schrei aus?", "Welches Museum stellte Der Schrei aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Scream> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Le Sacre de Napoléon aus?", "Was stellte Le Sacre de Napoléon aus?", "Welche Museen stellen Le Sacre de Napoléon aus?", "Welche Museen stellten Le Sacre de Napoléon aus?", "Welches Museum stellt Le Sacre de Napoléon aus?", "Welches Museum stellte Le Sacre de Napoléon aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Coronation_of_Napoleon> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Madonna mit dem langen Hals aus?", "Was stellte Madonna mit dem langen Hals aus?", "Welche Museen stellen Madonna mit dem langen Hals aus?", "Welche Museen stellten Madonna mit dem langen Hals aus?", "Welches Museum stellt Madonna mit dem langen Hals aus?", "Welches Museum stellte Madonna mit dem langen Hals aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Madonna_with_the_Long_Neck> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt The Blue Boy aus?", "Was stellte The Blue Boy aus?", "Welche Museen stellen The Blue Boy aus?", "Welche Museen stellten The Blue Boy aus?", "Welches Museum stellt The Blue Boy aus?", "Welches Museum stellte The Blue Boy aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Blue_Boy> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Mönch am Meer aus?", "Was stellte Der Mönch am Meer aus?", "Welche Museen stellen Der Mönch am Meer aus?", "Welche Museen stellten Der Mönch am Meer aus?", "Welches Museum stellt Der Mönch am Meer aus?", "Welches Museum stellte Der Mönch am Meer aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Monk_by_the_Sea> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Jurist aus?", "Was stellte Der Jurist aus?", "Welche Museen stellen Der Jurist aus?", "Welche Museen stellten Der Jurist aus?", "Welches Museum stellt Der Jurist aus?", "Welches Museum stellte Der Jurist aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Jurist_(painting)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Nestausnehmer aus?", "Was stellte Der Nestausnehmer aus?", "Welche Museen stellen Der Nestausnehmer aus?", "Welche Museen stellten Der Nestausnehmer aus?", "Welches Museum stellt Der Nestausnehmer aus?", "Welches Museum stellte Der Nestausnehmer aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Peasant_and_the_Nest_Robber> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Mann mit dem Handschuh aus?", "Was stellte Mann mit dem Handschuh aus?", "Welche Museen stellen Mann mit dem Handschuh aus?", "Welche Museen stellten Mann mit dem Handschuh aus?", "Welches Museum stellt Mann mit dem Handschuh aus?", "Welches Museum stellte Mann mit dem Handschuh aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Man_with_a_Glove> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt La carícia d’un ocell aus?", "Was stellte La carícia d’un ocell aus?", "Welche Museen stellen La carícia d’un ocell aus?", "Welche Museen stellten La carícia d’un ocell aus?", "Welches Museum stellt La carícia d’un ocell aus?", "Welches Museum stellte La carícia d’un ocell aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Caress_of_a_Bird> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die Klinik Gross aus?", "Was stellte Die Klinik Gross aus?", "Welche Museen stellen Die Klinik Gross aus?", "Welche Museen stellten Die Klinik Gross aus?", "Welches Museum stellt Die Klinik Gross aus?", "Welches Museum stellte Die Klinik Gross aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Gross_Clinic> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der letzte Tag von Pompeji (Gemälde) aus?", "Was stellte Der letzte Tag von Pompeji (Gemälde) aus?", "Welche Museen stellen Der letzte Tag von Pompeji (Gemälde) aus?", "Welche Museen stellten Der letzte Tag von Pompeji (Gemälde) aus?", "Welches Museum stellt Der letzte Tag von Pompeji (Gemälde) aus?", "Welches Museum stellte Der letzte Tag von Pompeji (Gemälde) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Last_Day_of_Pompeii> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Blick auf Toledo aus?", "Was stellte Blick auf Toledo aus?", "Welche Museen stellen Blick auf Toledo aus?", "Welche Museen stellten Blick auf Toledo aus?", "Welches Museum stellt Blick auf Toledo aus?", "Welches Museum stellte Blick auf Toledo aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/View_of_Toledo> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Bar in den Folies Bergère aus?", "Was stellte Bar in den Folies Bergère aus?", "Welche Museen stellen Bar in den Folies Bergère aus?", "Welche Museen stellten Bar in den Folies Bergère aus?", "Welches Museum stellt Bar in den Folies Bergère aus?", "Welches Museum stellte Bar in den Folies Bergère aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Bar_at_the_Folies-Bergère> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Ein Begräbnis in Ornans aus?", "Was stellte Ein Begräbnis in Ornans aus?", "Welche Museen stellen Ein Begräbnis in Ornans aus?", "Welche Museen stellten Ein Begräbnis in Ornans aus?", "Welches Museum stellt Ein Begräbnis in Ornans aus?", "Welches Museum stellte Ein Begräbnis in Ornans aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Burial_At_Ornans> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Eine bekehrte Britenfamilie verbirgt einen Missionar vor der Verfolgung durch die Druiden aus?", "Was stellte Eine bekehrte Britenfamilie verbirgt einen Missionar vor der Verfolgung durch die Druiden aus?", "Welche Museen stellen Eine bekehrte Britenfamilie verbirgt einen Missionar vor der Verfolgung durch die Druiden aus?", "Welche Museen stellten Eine bekehrte Britenfamilie verbirgt einen Missionar vor der Verfolgung durch die Druiden aus?", "Welches Museum stellt Eine bekehrte Britenfamilie verbirgt einen Missionar vor der Verfolgung durch die Druiden aus?", "Welches Museum stellte Eine bekehrte Britenfamilie verbirgt einen Missionar vor der Verfolgung durch die Druiden aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Converted_British_Family_Sheltering_a_Christian_Missionary_from_the_Persecution_of_the_Druids> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Das Baumwollkontor in New Orleans aus?", "Was stellte Das Baumwollkontor in New Orleans aus?", "Welche Museen stellen Das Baumwollkontor in New Orleans aus?", "Welche Museen stellten Das Baumwollkontor in New Orleans aus?", "Welches Museum stellt Das Baumwollkontor in New Orleans aus?", "Welches Museum stellte Das Baumwollkontor in New Orleans aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Cotton_Office_in_New_Orleans> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Schlafendes Mädchen aus?", "Was stellte Schlafendes Mädchen aus?", "Welche Museen stellen Schlafendes Mädchen aus?", "Welche Museen stellten Schlafendes Mädchen aus?", "Welches Museum stellt Schlafendes Mädchen aus?", "Welches Museum stellte Schlafendes Mädchen aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Girl_Asleep> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Spargel (Manet) aus?", "Was stellte Der Spargel (Manet) aus?", "Welche Museen stellen Der Spargel (Manet) aus?", "Welche Museen stellten Der Spargel (Manet) aus?", "Welches Museum stellt Der Spargel (Manet) aus?", "Welches Museum stellte Der Spargel (Manet) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Sprig_of_Asparagus> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Un atelier aux Batignolles aus?", "Was stellte Un atelier aux Batignolles aus?", "Welche Museen stellen Un atelier aux Batignolles aus?", "Welche Museen stellten Un atelier aux Batignolles aus?", "Welches Museum stellt Un atelier aux Batignolles aus?", "Welches Museum stellte Un atelier aux Batignolles aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Studio_at_Les_Batignolles> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Ein Sonntagnachmittag auf der Insel La Grande Jatte aus?", "Was stellte Ein Sonntagnachmittag auf der Insel La Grande Jatte aus?", "Welche Museen stellen Ein Sonntagnachmittag auf der Insel La Grande Jatte aus?", "Welche Museen stellten Ein Sonntagnachmittag auf der Insel La Grande Jatte aus?", "Welches Museum stellt Ein Sonntagnachmittag auf der Insel La Grande Jatte aus?", "Welches Museum stellte Ein Sonntagnachmittag auf der Insel La Grande Jatte aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Sunday_Afternoon_on_the_Island_of_La_Grande_Jatte> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Frau mit Bohnenkorb im Gemüsegärtchen aus?", "Was stellte Frau mit Bohnenkorb im Gemüsegärtchen aus?", "Welche Museen stellen Frau mit Bohnenkorb im Gemüsegärtchen aus?", "Welche Museen stellten Frau mit Bohnenkorb im Gemüsegärtchen aus?", "Welches Museum stellt Frau mit Bohnenkorb im Gemüsegärtchen aus?", "Welches Museum stellte Frau mit Bohnenkorb im Gemüsegärtchen aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/A_Woman_with_a_Basket_of_Beans_in_a_Garden> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die große Nacht im Eimer aus?", "Was stellte Die große Nacht im Eimer aus?", "Welche Museen stellen Die große Nacht im Eimer aus?", "Welche Museen stellten Die große Nacht im Eimer aus?", "Welches Museum stellt Die große Nacht im Eimer aus?", "Welches Museum stellte Die große Nacht im Eimer aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Die_große_Nacht_im_Eimer> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Das große Rasenstück aus?", "Was stellte Das große Rasenstück aus?", "Welche Museen stellen Das große Rasenstück aus?", "Welche Museen stellten Das große Rasenstück aus?", "Welches Museum stellt Das große Rasenstück aus?", "Welches Museum stellte Das große Rasenstück aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Great_Piece_of_Turf> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Preußische Huldigung (Gemälde) aus?", "Was stellte Preußische Huldigung (Gemälde) aus?", "Welche Museen stellen Preußische Huldigung (Gemälde) aus?", "Welche Museen stellten Preußische Huldigung (Gemälde) aus?", "Welches Museum stellt Preußische Huldigung (Gemälde) aus?", "Welches Museum stellte Preußische Huldigung (Gemälde) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Prussian_Homage_(painting)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die Heilige Nacht (Correggio) aus?", "Was stellte Die Heilige Nacht (Correggio) aus?", "Welche Museen stellen Die Heilige Nacht (Correggio) aus?", "Welche Museen stellten Die Heilige Nacht (Correggio) aus?", "Welches Museum stellt Die Heilige Nacht (Correggio) aus?", "Welches Museum stellte Die Heilige Nacht (Correggio) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Nativity_(Correggio)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die Gesandten aus?", "Was stellte Die Gesandten aus?", "Welche Museen stellen Die Gesandten aus?", "Welche Museen stellten Die Gesandten aus?", "Welches Museum stellt Die Gesandten aus?", "Welches Museum stellte Die Gesandten aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Ambassadors_(Holbein)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Falschspieler mit dem Karo-Ass aus?", "Was stellte Der Falschspieler mit dem Karo-Ass aus?", "Welche Museen stellen Der Falschspieler mit dem Karo-Ass aus?", "Welche Museen stellten Der Falschspieler mit dem Karo-Ass aus?", "Welches Museum stellt Der Falschspieler mit dem Karo-Ass aus?", "Welches Museum stellte Der Falschspieler mit dem Karo-Ass aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Card_Sharp_with_the_Ace_of_Diamonds> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Das Frühstück im Grünen (Manet) aus?", "Was stellte Das Frühstück im Grünen (Manet) aus?", "Welche Museen stellen Das Frühstück im Grünen (Manet) aus?", "Welche Museen stellten Das Frühstück im Grünen (Manet) aus?", "Welches Museum stellt Das Frühstück im Grünen (Manet) aus?", "Welches Museum stellte Das Frühstück im Grünen (Manet) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Le_Déjeuner_sur_l'herbe> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Taufe Christi (Verrocchio) aus?", "Was stellte Taufe Christi (Verrocchio) aus?", "Welche Museen stellen Taufe Christi (Verrocchio) aus?", "Welche Museen stellten Taufe Christi (Verrocchio) aus?", "Welches Museum stellt Taufe Christi (Verrocchio) aus?", "Welches Museum stellte Taufe Christi (Verrocchio) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Baptism_of_Christ_(Verrocchio_and_Leonardo)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Grablegung Christi (Pala Baglioni) aus?", "Was stellte Grablegung Christi (Pala Baglioni) aus?", "Welche Museen stellen Grablegung Christi (Pala Baglioni) aus?", "Welche Museen stellten Grablegung Christi (Pala Baglioni) aus?", "Welches Museum stellt Grablegung Christi (Pala Baglioni) aus?", "Welches Museum stellte Grablegung Christi (Pala Baglioni) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Deposition_(Raphael)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Guernica (Bild) aus?", "Was stellte Guernica (Bild) aus?", "Welche Museen stellen Guernica (Bild) aus?", "Welche Museen stellten Guernica (Bild) aus?", "Welches Museum stellt Guernica (Bild) aus?", "Welches Museum stellte Guernica (Bild) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Guernica_(Picasso)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Rain, Steam and Speed – The Great Western Railway aus?", "Was stellte Rain, Steam and Speed – The Great Western Railway aus?", "Welche Museen stellen Rain, Steam and Speed – The Great Western Railway aus?", "Welche Museen stellten Rain, Steam and Speed – The Great Western Railway aus?", "Welches Museum stellt Rain, Steam and Speed – The Great Western Railway aus?", "Welches Museum stellte Rain, Steam and Speed – The Great Western Railway aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Rain,_Steam_and_Speed_–_The_Great_Western_Railway> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Dreifaltigkeit (Masaccio) aus?", "Was stellte Dreifaltigkeit (Masaccio) aus?", "Welche Museen stellen Dreifaltigkeit (Masaccio) aus?", "Welche Museen stellten Dreifaltigkeit (Masaccio) aus?", "Welches Museum stellt Dreifaltigkeit (Masaccio) aus?", "Welches Museum stellte Dreifaltigkeit (Masaccio) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Holy_Trinity_(Masaccio)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Impression, Sonnenaufgang aus?", "Was stellte Impression, Sonnenaufgang aus?", "Welche Museen stellen Impression, Sonnenaufgang aus?", "Welche Museen stellten Impression, Sonnenaufgang aus?", "Welches Museum stellt Impression, Sonnenaufgang aus?", "Welches Museum stellte Impression, Sonnenaufgang aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Impression,_Sunrise> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Elk-Foot of the Taos Tribe aus?", "Was stellte Elk-Foot of the Taos Tribe aus?", "Welche Museen stellen Elk-Foot of the Taos Tribe aus?", "Welche Museen stellten Elk-Foot of the Taos Tribe aus?", "Welches Museum stellt Elk-Foot of the Taos Tribe aus?", "Welches Museum stellte Elk-Foot of the Taos Tribe aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Elk-Foot_of_the_Taos_Tribe> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Paradiesgärtlein aus?", "Was stellte Paradiesgärtlein aus?", "Welche Museen stellen Paradiesgärtlein aus?", "Welche Museen stellten Paradiesgärtlein aus?", "Welches Museum stellt Paradiesgärtlein aus?", "Welches Museum stellte Paradiesgärtlein aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Paradiesgärtlein> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt M-Maybe aus?", "Was stellte M-Maybe aus?", "Welche Museen stellen M-Maybe aus?", "Welche Museen stellten M-Maybe aus?", "Welches Museum stellt M-Maybe aus?", "Welches Museum stellte M-Maybe aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/M-Maybe> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Pala Colonna aus?", "Was stellte Pala Colonna aus?", "Welche Museen stellen Pala Colonna aus?", "Welche Museen stellten Pala Colonna aus?", "Welches Museum stellt Pala Colonna aus?", "Welches Museum stellte Pala Colonna aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Madonna_and_Child_Enthroned_with_Saints_(Raphael)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Madonna von Veveří aus?", "Was stellte Madonna von Veveří aus?", "Welche Museen stellen Madonna von Veveří aus?", "Welche Museen stellten Madonna von Veveří aus?", "Welches Museum stellt Madonna von Veveří aus?", "Welches Museum stellte Madonna von Veveří aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Madonna_of_Veveri> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die Pflaume (Manet) aus?", "Was stellte Die Pflaume (Manet) aus?", "Welche Museen stellen Die Pflaume (Manet) aus?", "Welche Museen stellten Die Pflaume (Manet) aus?", "Welches Museum stellt Die Pflaume (Manet) aus?", "Welches Museum stellte Die Pflaume (Manet) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Plum_Brandy> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Stele des Avile Tite aus?", "Was stellte Stele des Avile Tite aus?", "Welche Museen stellen Stele des Avile Tite aus?", "Welche Museen stellten Stele des Avile Tite aus?", "Welches Museum stellt Stele des Avile Tite aus?", "Welches Museum stellte Stele des Avile Tite aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Stele_of_Avile_Tite> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Fleischstein aus?", "Was stellte Fleischstein aus?", "Welche Museen stellen Fleischstein aus?", "Welche Museen stellten Fleischstein aus?", "Welches Museum stellt Fleischstein aus?", "Welches Museum stellte Fleischstein aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Meat-shaped_Stone> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die Mühle von Wijk bij Duurstede aus?", "Was stellte Die Mühle von Wijk bij Duurstede aus?", "Welche Museen stellen Die Mühle von Wijk bij Duurstede aus?", "Welche Museen stellten Die Mühle von Wijk bij Duurstede aus?", "Welches Museum stellt Die Mühle von Wijk bij Duurstede aus?", "Welches Museum stellte Die Mühle von Wijk bij Duurstede aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Windmill_at_Wijk_bij_Duurstede> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Senecio (Paul Klee) aus?", "Was stellte Senecio (Paul Klee) aus?", "Welche Museen stellen Senecio (Paul Klee) aus?", "Welche Museen stellten Senecio (Paul Klee) aus?", "Welches Museum stellt Senecio (Paul Klee) aus?", "Welches Museum stellte Senecio (Paul Klee) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Senecio_(Klee)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Alamo (Skulptur) aus?", "Was stellte Alamo (Skulptur) aus?", "Welche Museen stellen Alamo (Skulptur) aus?", "Welche Museen stellten Alamo (Skulptur) aus?", "Welches Museum stellt Alamo (Skulptur) aus?", "Welches Museum stellte Alamo (Skulptur) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Alamo_(sculpture)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Qingming-Rolle aus?", "Was stellte Qingming-Rolle aus?", "Welche Museen stellen Qingming-Rolle aus?", "Welche Museen stellten Qingming-Rolle aus?", "Welches Museum stellt Qingming-Rolle aus?", "Welches Museum stellte Qingming-Rolle aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Along_the_River_During_the_Qingming_Festival> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Saliera aus?", "Was stellte Saliera aus?", "Welche Museen stellen Saliera aus?", "Welche Museen stellten Saliera aus?", "Welches Museum stellt Saliera aus?", "Welches Museum stellte Saliera aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Cellini_Salt_Cellar> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Cathedra Petri (Kunstwerk) aus?", "Was stellte Cathedra Petri (Kunstwerk) aus?", "Welche Museen stellen Cathedra Petri (Kunstwerk) aus?", "Welche Museen stellten Cathedra Petri (Kunstwerk) aus?", "Welches Museum stellt Cathedra Petri (Kunstwerk) aus?", "Welches Museum stellte Cathedra Petri (Kunstwerk) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Chair_of_Saint_Peter> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Chandos-Porträt aus?", "Was stellte Chandos-Porträt aus?", "Welche Museen stellen Chandos-Porträt aus?", "Welche Museen stellten Chandos-Porträt aus?", "Welches Museum stellt Chandos-Porträt aus?", "Welches Museum stellte Chandos-Porträt aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Chandos_portrait> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Akt mit grünen Blättern und Büste aus?", "Was stellte Akt mit grünen Blättern und Büste aus?", "Welche Museen stellen Akt mit grünen Blättern und Büste aus?", "Welche Museen stellten Akt mit grünen Blättern und Büste aus?", "Welches Museum stellt Akt mit grünen Blättern und Büste aus?", "Welches Museum stellte Akt mit grünen Blättern und Büste aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Nude,_Green_Leaves_and_Bust> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Ognissanti-Madonna aus?", "Was stellte Ognissanti-Madonna aus?", "Welche Museen stellen Ognissanti-Madonna aus?", "Welche Museen stellten Ognissanti-Madonna aus?", "Welches Museum stellt Ognissanti-Madonna aus?", "Welches Museum stellte Ognissanti-Madonna aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ognissanti_Madonna> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Diana und Actaeon (Tizian) aus?", "Was stellte Diana und Actaeon (Tizian) aus?", "Welche Museen stellen Diana und Actaeon (Tizian) aus?", "Welche Museen stellten Diana und Actaeon (Tizian) aus?", "Welches Museum stellt Diana und Actaeon (Tizian) aus?", "Welches Museum stellte Diana und Actaeon (Tizian) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Diana_and_Actaeon_(Titian)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Diana mit ihren Gefährtinnen aus?", "Was stellte Diana mit ihren Gefährtinnen aus?", "Welche Museen stellen Diana mit ihren Gefährtinnen aus?", "Welche Museen stellten Diana mit ihren Gefährtinnen aus?", "Welches Museum stellt Diana mit ihren Gefährtinnen aus?", "Welches Museum stellte Diana mit ihren Gefährtinnen aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Diana_and_Her_Companions> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die Geißelung Christi (Piero della Francesca) aus?", "Was stellte Die Geißelung Christi (Piero della Francesca) aus?", "Welche Museen stellen Die Geißelung Christi (Piero della Francesca) aus?", "Welche Museen stellten Die Geißelung Christi (Piero della Francesca) aus?", "Welches Museum stellt Die Geißelung Christi (Piero della Francesca) aus?", "Welches Museum stellte Die Geißelung Christi (Piero della Francesca) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Flagellation_of_Christ_(Piero_della_Francesca)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt For the Love of God aus?", "Was stellte For the Love of God aus?", "Welche Museen stellen For the Love of God aus?", "Welche Museen stellten For the Love of God aus?", "Welches Museum stellt For the Love of God aus?", "Welches Museum stellte For the Love of God aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/For_the_Love_of_God> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Gassed aus?", "Was stellte Gassed aus?", "Welche Museen stellen Gassed aus?", "Welche Museen stellten Gassed aus?", "Welches Museum stellt Gassed aus?", "Welches Museum stellte Gassed aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Gassed_(painting)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Ruhe auf der Flucht nach Ägypten (Caravaggio) aus?", "Was stellte Ruhe auf der Flucht nach Ägypten (Caravaggio) aus?", "Welche Museen stellen Ruhe auf der Flucht nach Ägypten (Caravaggio) aus?", "Welche Museen stellten Ruhe auf der Flucht nach Ägypten (Caravaggio) aus?", "Welches Museum stellt Ruhe auf der Flucht nach Ägypten (Caravaggio) aus?", "Welches Museum stellte Ruhe auf der Flucht nach Ägypten (Caravaggio) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Rest_on_the_Flight_into_Egypt_(Caravaggio)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der vierte Stand aus?", "Was stellte Der vierte Stand aus?", "Welche Museen stellen Der vierte Stand aus?", "Welche Museen stellten Der vierte Stand aus?", "Welches Museum stellt Der vierte Stand aus?", "Welches Museum stellte Der vierte Stand aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Fourth_Estate_(painting)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Dynamik eines Radfahrers aus?", "Was stellte Dynamik eines Radfahrers aus?", "Welche Museen stellen Dynamik eines Radfahrers aus?", "Welche Museen stellten Dynamik eines Radfahrers aus?", "Welches Museum stellt Dynamik eines Radfahrers aus?", "Welches Museum stellte Dynamik eines Radfahrers aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Dynamism_of_a_Cyclist> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Rhinocerus aus?", "Was stellte Rhinocerus aus?", "Welche Museen stellen Rhinocerus aus?", "Welche Museen stellten Rhinocerus aus?", "Welches Museum stellt Rhinocerus aus?", "Welches Museum stellte Rhinocerus aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Dürer's_Rhinoceros> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Midvinterblot aus?", "Was stellte Midvinterblot aus?", "Welche Museen stellen Midvinterblot aus?", "Welche Museen stellten Midvinterblot aus?", "Welches Museum stellt Midvinterblot aus?", "Welches Museum stellte Midvinterblot aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Midvinterblot> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Nana (Manet) aus?", "Was stellte Nana (Manet) aus?", "Welche Museen stellen Nana (Manet) aus?", "Welche Museen stellten Nana (Manet) aus?", "Welches Museum stellt Nana (Manet) aus?", "Welches Museum stellte Nana (Manet) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Nana_(Manet)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Geburt der Jungfrau (Pietro Lorenzetti) aus?", "Was stellte Geburt der Jungfrau (Pietro Lorenzetti) aus?", "Welche Museen stellen Geburt der Jungfrau (Pietro Lorenzetti) aus?", "Welche Museen stellten Geburt der Jungfrau (Pietro Lorenzetti) aus?", "Welches Museum stellt Geburt der Jungfrau (Pietro Lorenzetti) aus?", "Welches Museum stellte Geburt der Jungfrau (Pietro Lorenzetti) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Nativity_of_the_Virgin_(Pietro_Lorenzetti)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Die Musikstunde (Vermeer) aus?", "Was stellte Die Musikstunde (Vermeer) aus?", "Welche Museen stellen Die Musikstunde (Vermeer) aus?", "Welche Museen stellten Die Musikstunde (Vermeer) aus?", "Welches Museum stellt Die Musikstunde (Vermeer) aus?", "Welches Museum stellte Die Musikstunde (Vermeer) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Music_Lesson> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Mr. und Mrs. Andrews aus?", "Was stellte Mr. und Mrs. Andrews aus?", "Welche Museen stellen Mr. und Mrs. Andrews aus?", "Welche Museen stellten Mr. und Mrs. Andrews aus?", "Welches Museum stellt Mr. und Mrs. Andrews aus?", "Welches Museum stellte Mr. und Mrs. Andrews aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Mr_and_Mrs_Andrews> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Straße in Paris an einem regnerischen Tag aus?", "Was stellte Straße in Paris an einem regnerischen Tag aus?", "Welche Museen stellen Straße in Paris an einem regnerischen Tag aus?", "Welche Museen stellten Straße in Paris an einem regnerischen Tag aus?", "Welches Museum stellt Straße in Paris an einem regnerischen Tag aus?", "Welches Museum stellte Straße in Paris an einem regnerischen Tag aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Paris_Street;_Rainy_Day> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Hase aus?", "Was stellte Der Hase aus?", "Welche Museen stellen Der Hase aus?", "Welche Museen stellten Der Hase aus?", "Welches Museum stellt Der Hase aus?", "Welches Museum stellte Der Hase aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Rabbit_(Manet_1881)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Heuwagen aus?", "Was stellte Der Heuwagen aus?", "Welche Museen stellen Der Heuwagen aus?", "Welche Museen stellten Der Heuwagen aus?", "Welches Museum stellt Der Heuwagen aus?", "Welches Museum stellte Der Heuwagen aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Haywain_Triptych> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Maria der Verkündigung (Antonello da Messina) aus?", "Was stellte Maria der Verkündigung (Antonello da Messina) aus?", "Welche Museen stellen Maria der Verkündigung (Antonello da Messina) aus?", "Welche Museen stellten Maria der Verkündigung (Antonello da Messina) aus?", "Welches Museum stellt Maria der Verkündigung (Antonello da Messina) aus?", "Welches Museum stellte Maria der Verkündigung (Antonello da Messina) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Virgin_Annunciate_(Antonello_da_Messina,_Palermo)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Schwur der Horatier aus?", "Was stellte Der Schwur der Horatier aus?", "Welche Museen stellen Der Schwur der Horatier aus?", "Welche Museen stellten Der Schwur der Horatier aus?", "Welches Museum stellt Der Schwur der Horatier aus?", "Welches Museum stellte Der Schwur der Horatier aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Oath_of_the_Horatii> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Felsgrottenmadonna aus?", "Was stellte Felsgrottenmadonna aus?", "Welche Museen stellen Felsgrottenmadonna aus?", "Welche Museen stellten Felsgrottenmadonna aus?", "Welches Museum stellt Felsgrottenmadonna aus?", "Welches Museum stellte Felsgrottenmadonna aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Virgin_of_the_Rocks> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Sunlight and Shadow: The Newbury Marshes aus?", "Was stellte Sunlight and Shadow: The Newbury Marshes aus?", "Welche Museen stellen Sunlight and Shadow: The Newbury Marshes aus?", "Welche Museen stellten Sunlight and Shadow: The Newbury Marshes aus?", "Welches Museum stellt Sunlight and Shadow: The Newbury Marshes aus?", "Welches Museum stellte Sunlight and Shadow: The Newbury Marshes aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Sunlight_and_Shadow:_The_Newbury_Marshes> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Scheibenfibel von Tangendorf aus?", "Was stellte Scheibenfibel von Tangendorf aus?", "Welche Museen stellen Scheibenfibel von Tangendorf aus?", "Welche Museen stellten Scheibenfibel von Tangendorf aus?", "Welches Museum stellt Scheibenfibel von Tangendorf aus?", "Welches Museum stellte Scheibenfibel von Tangendorf aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Tangendorf_disc_brooch> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Miss Amelia Van Buren aus?", "Was stellte Miss Amelia Van Buren aus?", "Welche Museen stellen Miss Amelia Van Buren aus?", "Welche Museen stellten Miss Amelia Van Buren aus?", "Welches Museum stellt Miss Amelia Van Buren aus?", "Welches Museum stellte Miss Amelia Van Buren aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Miss_Amelia_Van_Buren> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Allegorie der Liebe aus?", "Was stellte Allegorie der Liebe aus?", "Welche Museen stellen Allegorie der Liebe aus?", "Welche Museen stellten Allegorie der Liebe aus?", "Welches Museum stellt Allegorie der Liebe aus?", "Welches Museum stellte Allegorie der Liebe aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Venus,_Cupid,_Folly_and_Time> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Feszty-Panorama aus?", "Was stellte Feszty-Panorama aus?", "Welche Museen stellen Feszty-Panorama aus?", "Welche Museen stellten Feszty-Panorama aus?", "Welches Museum stellt Feszty-Panorama aus?", "Welches Museum stellte Feszty-Panorama aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Arrival_of_the_Hungarians> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Beauty Revealed aus?", "Was stellte Beauty Revealed aus?", "Welche Museen stellen Beauty Revealed aus?", "Welche Museen stellten Beauty Revealed aus?", "Welches Museum stellt Beauty Revealed aus?", "Welches Museum stellte Beauty Revealed aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Beauty_Revealed> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Der Tanz (Gemälde) aus?", "Was stellte Der Tanz (Gemälde) aus?", "Welche Museen stellen Der Tanz (Gemälde) aus?", "Welche Museen stellten Der Tanz (Gemälde) aus?", "Welches Museum stellt Der Tanz (Gemälde) aus?", "Welches Museum stellte Der Tanz (Gemälde) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Dance_(Matisse)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Tanz auf dem Land aus?", "Was stellte Tanz auf dem Land aus?", "Welche Museen stellen Tanz auf dem Land aus?", "Welche Museen stellten Tanz auf dem Land aus?", "Welches Museum stellt Tanz auf dem Land aus?", "Welches Museum stellte Tanz auf dem Land aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Dance_in_the_Country> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Schlüsselübergabe (Perugino) aus?", "Was stellte Schlüsselübergabe (Perugino) aus?", "Welche Museen stellen Schlüsselübergabe (Perugino) aus?", "Welche Museen stellten Schlüsselübergabe (Perugino) aus?", "Welches Museum stellt Schlüsselübergabe (Perugino) aus?", "Welches Museum stellte Schlüsselübergabe (Perugino) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Delivery_of_the_Keys_(Perugino)> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kaiser Karl V. nach der Schlacht bei Mühlberg aus?", "Was stellte Kaiser Karl V. nach der Schlacht bei Mühlberg aus?", "Welche Museen stellen Kaiser Karl V. nach der Schlacht bei Mühlberg aus?", "Welche Museen stellten Kaiser Karl V. nach der Schlacht bei Mühlberg aus?", "Welches Museum stellt Kaiser Karl V. nach der Schlacht bei Mühlberg aus?", "Welches Museum stellte Kaiser Karl V. nach der Schlacht bei Mühlberg aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Equestrian_Portrait_of_Charles_V> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Flötenkonzert Friedrichs des Großen in Sanssouci aus?", "Was stellte Flötenkonzert Friedrichs des Großen in Sanssouci aus?", "Welche Museen stellen Flötenkonzert Friedrichs des Großen in Sanssouci aus?", "Welche Museen stellten Flötenkonzert Friedrichs des Großen in Sanssouci aus?", "Welches Museum stellt Flötenkonzert Friedrichs des Großen in Sanssouci aus?", "Welches Museum stellte Flötenkonzert Friedrichs des Großen in Sanssouci aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Frederick_the_Great_Playing_the_Flute_at_Sanssouci> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Im Garten des Todes aus?", "Was stellte Im Garten des Todes aus?", "Welche Museen stellen Im Garten des Todes aus?", "Welche Museen stellten Im Garten des Todes aus?", "Welches Museum stellt Im Garten des Todes aus?", "Welches Museum stellte Im Garten des Todes aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/The_Garden_of_Death> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "WORK",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Jakobssegen (Rembrandt) aus?", "Was stellte Jakobssegen (Rembrandt) aus?", "Welche Museen stellen Jakobssegen (Rembrandt) aus?", "Welche Museen stellten Jakobssegen (Rembrandt) aus?", "Welches Museum stellt Jakobssegen (Rembrandt) aus?", "Welches Museum stellte Jakobssegen (Rembrandt) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Jacob_Blessing_the_Sons_of_Joseph> <http://dbpedia.org/ontology/museum> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von 5th Cell entwickelt?", "Was wurde von 5th Cell entwickelt?", "Welche Werke werden von 5th Cell entwickelt?", "Welche Werke wurden von 5th Cell entwickelt?", "Welches Werk wird von 5th Cell entwickelt?", "Welches Werk wurde von 5th Cell entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/5th_Cell>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von 7th Level entwickelt?", "Was wurde von 7th Level entwickelt?", "Welche Werke werden von 7th Level entwickelt?", "Welche Werke wurden von 7th Level entwickelt?", "Welches Werk wird von 7th Level entwickelt?", "Welches Werk wurde von 7th Level entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/7th_Level>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Varianten der Programmiersprache C entwickelt?", "Was wurde von Varianten der Programmiersprache C entwickelt?", "Welche Werke werden von Varianten der Programmiersprache C entwickelt?", "Welche Werke wurden von Varianten der Programmiersprache C entwickelt?", "Welches Werk wird von Varianten der Programmiersprache C entwickelt?", "Welches Werk wurde von Varianten der Programmiersprache C entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/ANSI_C>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von LucasArts entwickelt?", "Was wurde von LucasArts entwickelt?", "Welche Werke werden von LucasArts entwickelt?", "Welche Werke wurden von LucasArts entwickelt?", "Welches Werk wird von LucasArts entwickelt?", "Welches Werk wurde von LucasArts entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/LucasArts>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ludwig-Maximilians-Universität München entwickelt?", "Was wurde von Ludwig-Maximilians-Universität München entwickelt?", "Welche Werke werden von Ludwig-Maximilians-Universität München entwickelt?", "Welche Werke wurden von Ludwig-Maximilians-Universität München entwickelt?", "Welches Werk wird von Ludwig-Maximilians-Universität München entwickelt?", "Welches Werk wurde von Ludwig-Maximilians-Universität München entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ludwig_Maximilian_University_of_Munich>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Luke Davies entwickelt?", "Was wurde von Luke Davies entwickelt?", "Welche Werke werden von Luke Davies entwickelt?", "Welche Werke wurden von Luke Davies entwickelt?", "Welches Werk wird von Luke Davies entwickelt?", "Welches Werk wurde von Luke Davies entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Luke_Davies>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Luke Pearson entwickelt?", "Was wurde von Luke Pearson entwickelt?", "Welche Werke werden von Luke Pearson entwickelt?", "Welche Werke wurden von Luke Pearson entwickelt?", "Welches Werk wird von Luke Pearson entwickelt?", "Welches Werk wurde von Luke Pearson entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Luke_Pearson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Lund entwickelt?", "Was wurde von Universität Lund entwickelt?", "Welche Werke werden von Universität Lund entwickelt?", "Welche Werke wurden von Universität Lund entwickelt?", "Welches Werk wird von Universität Lund entwickelt?", "Welches Werk wurde von Universität Lund entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Lund_University>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von László Németh entwickelt?", "Was wurde von László Németh entwickelt?", "Welche Werke werden von László Németh entwickelt?", "Welche Werke wurden von László Németh entwickelt?", "Welches Werk wird von László Németh entwickelt?", "Welches Werk wurde von László Németh entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/László_Németh>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MGM Resorts International entwickelt?", "Was wurde von MGM Resorts International entwickelt?", "Welche Werke werden von MGM Resorts International entwickelt?", "Welche Werke wurden von MGM Resorts International entwickelt?", "Welches Werk wird von MGM Resorts International entwickelt?", "Welches Werk wurde von MGM Resorts International entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MGM_Resorts_International>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MIPS Technologies entwickelt?", "Was wurde von MIPS Technologies entwickelt?", "Welche Werke werden von MIPS Technologies entwickelt?", "Welche Werke wurden von MIPS Technologies entwickelt?", "Welches Werk wird von MIPS Technologies entwickelt?", "Welches Werk wurde von MIPS Technologies entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MIPS_Technologies>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MIT Computer Science and Artificial Intelligence Laboratory entwickelt?", "Was wurde von MIT Computer Science and Artificial Intelligence Laboratory entwickelt?", "Welche Werke werden von MIT Computer Science and Artificial Intelligence Laboratory entwickelt?", "Welche Werke wurden von MIT Computer Science and Artificial Intelligence Laboratory entwickelt?", "Welches Werk wird von MIT Computer Science and Artificial Intelligence Laboratory entwickelt?", "Welches Werk wurde von MIT Computer Science and Artificial Intelligence Laboratory entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MIT Media Lab entwickelt?", "Was wurde von MIT Media Lab entwickelt?", "Welche Werke werden von MIT Media Lab entwickelt?", "Welche Werke wurden von MIT Media Lab entwickelt?", "Welches Werk wird von MIT Media Lab entwickelt?", "Welches Werk wurde von MIT Media Lab entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MIT_Media_Lab>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MLB Network entwickelt?", "Was wurde von MLB Network entwickelt?", "Welche Werke werden von MLB Network entwickelt?", "Welche Werke wurden von MLB Network entwickelt?", "Welches Werk wird von MLB Network entwickelt?", "Welches Werk wurde von MLB Network entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MLB_Network>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MOL entwickelt?", "Was wurde von MOL entwickelt?", "Welche Werke werden von MOL entwickelt?", "Welche Werke wurden von MOL entwickelt?", "Welches Werk wird von MOL entwickelt?", "Welches Werk wurde von MOL entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MOL_(company)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MS-DOS entwickelt?", "Was wurde von MS-DOS entwickelt?", "Welche Werke werden von MS-DOS entwickelt?", "Welche Werke wurden von MS-DOS entwickelt?", "Welches Werk wird von MS-DOS entwickelt?", "Welches Werk wurde von MS-DOS entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MS-DOS>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MTR Corporation entwickelt?", "Was wurde von MTR Corporation entwickelt?", "Welche Werke werden von MTR Corporation entwickelt?", "Welche Werke wurden von MTR Corporation entwickelt?", "Welches Werk wird von MTR Corporation entwickelt?", "Welches Werk wurde von MTR Corporation entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MTR_Corporation>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MTV entwickelt?", "Was wurde von MTV entwickelt?", "Welche Werke werden von MTV entwickelt?", "Welche Werke wurden von MTV entwickelt?", "Welches Werk wird von MTV entwickelt?", "Welches Werk wurde von MTV entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MTV>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MVRDV entwickelt?", "Was wurde von MVRDV entwickelt?", "Welche Werke werden von MVRDV entwickelt?", "Welche Werke wurden von MVRDV entwickelt?", "Welches Werk wird von MVRDV entwickelt?", "Welches Werk wurde von MVRDV entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MVRDV>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Mabrouk El Mechri entwickelt?", "Was wurde von Mabrouk El Mechri entwickelt?", "Welche Werke werden von Mabrouk El Mechri entwickelt?", "Welche Werke wurden von Mabrouk El Mechri entwickelt?", "Welches Werk wird von Mabrouk El Mechri entwickelt?", "Welches Werk wurde von Mabrouk El Mechri entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Mabrouk_El_Mechri>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MacSoft entwickelt?", "Was wurde von MacSoft entwickelt?", "Welche Werke werden von MacSoft entwickelt?", "Welche Werke wurden von MacSoft entwickelt?", "Welches Werk wird von MacSoft entwickelt?", "Welches Werk wurde von MacSoft entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MacSoft>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Makedonska Radio-Televizija entwickelt?", "Was wurde von Makedonska Radio-Televizija entwickelt?", "Welche Werke werden von Makedonska Radio-Televizija entwickelt?", "Welche Werke wurden von Makedonska Radio-Televizija entwickelt?", "Welches Werk wird von Makedonska Radio-Televizija entwickelt?", "Welches Werk wurde von Makedonska Radio-Televizija entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Macedonian_Radio_Television>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von MachineGames entwickelt?", "Was wurde von MachineGames entwickelt?", "Welche Werke werden von MachineGames entwickelt?", "Welche Werke wurden von MachineGames entwickelt?", "Welches Werk wird von MachineGames entwickelt?", "Welches Werk wurde von MachineGames entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MachineGames>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Macromedia entwickelt?", "Was wurde von Macromedia entwickelt?", "Welche Werke werden von Macromedia entwickelt?", "Welche Werke wurden von Macromedia entwickelt?", "Welches Werk wird von Macromedia entwickelt?", "Welches Werk wurde von Macromedia entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Macromedia>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Maemo entwickelt?", "Was wurde von Maemo entwickelt?", "Welche Werke werden von Maemo entwickelt?", "Welche Werke wurden von Maemo entwickelt?", "Welches Werk wird von Maemo entwickelt?", "Welches Werk wurde von Maemo entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Maemo>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Magnavox entwickelt?", "Was wurde von Magnavox entwickelt?", "Welche Werke werden von Magnavox entwickelt?", "Welche Werke wurden von Magnavox entwickelt?", "Welches Werk wird von Magnavox entwickelt?", "Welches Werk wurde von Magnavox entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Magnavox>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Magnus Manske entwickelt?", "Was wurde von Magnus Manske entwickelt?", "Welche Werke werden von Magnus Manske entwickelt?", "Welche Werke wurden von Magnus Manske entwickelt?", "Welches Werk wird von Magnus Manske entwickelt?", "Welches Werk wurde von Magnus Manske entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Magnus_Manske>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Mainz entwickelt?", "Was wurde von Mainz entwickelt?", "Welche Werke werden von Mainz entwickelt?", "Welche Werke wurden von Mainz entwickelt?", "Welches Werk wird von Mainz entwickelt?", "Welches Werk wurde von Mainz entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Mainz>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Majesco Entertainment entwickelt?", "Was wurde von Majesco Entertainment entwickelt?", "Welche Werke werden von Majesco Entertainment entwickelt?", "Welche Werke wurden von Majesco Entertainment entwickelt?", "Welches Werk wird von Majesco Entertainment entwickelt?", "Welches Werk wurde von Majesco Entertainment entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Majesco_Entertainment>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Malibu Comics entwickelt?", "Was wurde von Malibu Comics entwickelt?", "Welche Werke werden von Malibu Comics entwickelt?", "Welche Werke wurden von Malibu Comics entwickelt?", "Welches Werk wird von Malibu Comics entwickelt?", "Welches Werk wurde von Malibu Comics entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Malibu_Comics>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Control Data Corporation entwickelt?", "Was wurde von Control Data Corporation entwickelt?", "Welche Werke werden von Control Data Corporation entwickelt?", "Welche Werke wurden von Control Data Corporation entwickelt?", "Welches Werk wird von Control Data Corporation entwickelt?", "Welches Werk wurde von Control Data Corporation entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Control_Data_Corporation>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Convergent Technologies entwickelt?", "Was wurde von Convergent Technologies entwickelt?", "Welche Werke werden von Convergent Technologies entwickelt?", "Welche Werke wurden von Convergent Technologies entwickelt?", "Welches Werk wird von Convergent Technologies entwickelt?", "Welches Werk wurde von Convergent Technologies entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Convergent_Technologies>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Corinne Brinkerhoff entwickelt?", "Was wurde von Corinne Brinkerhoff entwickelt?", "Welche Werke werden von Corinne Brinkerhoff entwickelt?", "Welche Werke wurden von Corinne Brinkerhoff entwickelt?", "Welches Werk wird von Corinne Brinkerhoff entwickelt?", "Welches Werk wurde von Corinne Brinkerhoff entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Corinne_Brinkerhoff>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ignition Entertainment entwickelt?", "Was wurde von Ignition Entertainment entwickelt?", "Welche Werke werden von Ignition Entertainment entwickelt?", "Welche Werke wurden von Ignition Entertainment entwickelt?", "Welches Werk wird von Ignition Entertainment entwickelt?", "Welches Werk wurde von Ignition Entertainment entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/UTV_Ignition_Games>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Uber (Unternehmen) entwickelt?", "Was wurde von Uber (Unternehmen) entwickelt?", "Welche Werke werden von Uber (Unternehmen) entwickelt?", "Welche Werke wurden von Uber (Unternehmen) entwickelt?", "Welches Werk wird von Uber (Unternehmen) entwickelt?", "Welches Werk wurde von Uber (Unternehmen) entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Uber>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ubisoft entwickelt?", "Was wurde von Ubisoft entwickelt?", "Welche Werke werden von Ubisoft entwickelt?", "Welche Werke wurden von Ubisoft entwickelt?", "Welches Werk wird von Ubisoft entwickelt?", "Welches Werk wurde von Ubisoft entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ubisoft>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ubisoft Romania entwickelt?", "Was wurde von Ubisoft Romania entwickelt?", "Welche Werke werden von Ubisoft Romania entwickelt?", "Welche Werke wurden von Ubisoft Romania entwickelt?", "Welches Werk wird von Ubisoft Romania entwickelt?", "Welches Werk wurde von Ubisoft Romania entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ubisoft_Bucharest>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ubisoft Montreal entwickelt?", "Was wurde von Ubisoft Montreal entwickelt?", "Welche Werke werden von Ubisoft Montreal entwickelt?", "Welche Werke wurden von Ubisoft Montreal entwickelt?", "Welches Werk wird von Ubisoft Montreal entwickelt?", "Welches Werk wurde von Ubisoft Montreal entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ubisoft_Montreal>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ubisoft Paris entwickelt?", "Was wurde von Ubisoft Paris entwickelt?", "Welche Werke werden von Ubisoft Paris entwickelt?", "Welche Werke wurden von Ubisoft Paris entwickelt?", "Welches Werk wird von Ubisoft Paris entwickelt?", "Welches Werk wurde von Ubisoft Paris entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ubisoft_Paris>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ubisoft Quebec entwickelt?", "Was wurde von Ubisoft Quebec entwickelt?", "Welche Werke werden von Ubisoft Quebec entwickelt?", "Welche Werke wurden von Ubisoft Quebec entwickelt?", "Welches Werk wird von Ubisoft Quebec entwickelt?", "Welches Werk wurde von Ubisoft Quebec entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ubisoft_Quebec>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ubisoft Reflections entwickelt?", "Was wurde von Ubisoft Reflections entwickelt?", "Welche Werke werden von Ubisoft Reflections entwickelt?", "Welche Werke wurden von Ubisoft Reflections entwickelt?", "Welches Werk wird von Ubisoft Reflections entwickelt?", "Welches Werk wurde von Ubisoft Reflections entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ubisoft_Reflections>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ubisoft Toronto entwickelt?", "Was wurde von Ubisoft Toronto entwickelt?", "Welche Werke werden von Ubisoft Toronto entwickelt?", "Welche Werke wurden von Ubisoft Toronto entwickelt?", "Welches Werk wird von Ubisoft Toronto entwickelt?", "Welches Werk wurde von Ubisoft Toronto entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ubisoft_Toronto>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ukrainische Sozialistische Sowjetrepublik entwickelt?", "Was wurde von Ukrainische Sozialistische Sowjetrepublik entwickelt?", "Welche Werke werden von Ukrainische Sozialistische Sowjetrepublik entwickelt?", "Welche Werke wurden von Ukrainische Sozialistische Sowjetrepublik entwickelt?", "Welches Werk wird von Ukrainische Sozialistische Sowjetrepublik entwickelt?", "Welches Werk wurde von Ukrainische Sozialistische Sowjetrepublik entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ukraine>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ukraine entwickelt?", "Was wurde von Ukraine entwickelt?", "Welche Werke werden von Ukraine entwickelt?", "Welche Werke wurden von Ukraine entwickelt?", "Welches Werk wird von Ukraine entwickelt?", "Welches Werk wurde von Ukraine entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ukraine>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Under Armour entwickelt?", "Was wurde von Under Armour entwickelt?", "Welche Werke werden von Under Armour entwickelt?", "Welche Werke wurden von Under Armour entwickelt?", "Welches Werk wird von Under Armour entwickelt?", "Welches Werk wurde von Under Armour entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Under_Armour>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Unicode-Konsortium entwickelt?", "Was wurde von Unicode-Konsortium entwickelt?", "Welche Werke werden von Unicode-Konsortium entwickelt?", "Welche Werke wurden von Unicode-Konsortium entwickelt?", "Welches Werk wird von Unicode-Konsortium entwickelt?", "Welches Werk wurde von Unicode-Konsortium entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Unicode_Consortium>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von United States Army im Sezessionskrieg entwickelt?", "Was wurde von United States Army im Sezessionskrieg entwickelt?", "Welche Werke werden von United States Army im Sezessionskrieg entwickelt?", "Welche Werke wurden von United States Army im Sezessionskrieg entwickelt?", "Welches Werk wird von United States Army im Sezessionskrieg entwickelt?", "Welches Werk wurde von United States Army im Sezessionskrieg entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Union_Army>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Unisys entwickelt?", "Was wurde von Unisys entwickelt?", "Welche Werke werden von Unisys entwickelt?", "Welche Werke wurden von Unisys entwickelt?", "Welches Werk wird von Unisys entwickelt?", "Welches Werk wurde von Unisys entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Unisys>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Vereinigte Arabische Emirate entwickelt?", "Was wurde von Vereinigte Arabische Emirate entwickelt?", "Welche Werke werden von Vereinigte Arabische Emirate entwickelt?", "Welche Werke wurden von Vereinigte Arabische Emirate entwickelt?", "Welches Werk wird von Vereinigte Arabische Emirate entwickelt?", "Welches Werk wurde von Vereinigte Arabische Emirate entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/United_Arab_Emirates>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Schardscha entwickelt?", "Was wurde von Schardscha entwickelt?", "Welche Werke werden von Schardscha entwickelt?", "Welche Werke wurden von Schardscha entwickelt?", "Welches Werk wird von Schardscha entwickelt?", "Welches Werk wurde von Schardscha entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/United_Arab_Emirates>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Hoher Flüchtlingskommissar der Vereinten Nationen entwickelt?", "Was wurde von Hoher Flüchtlingskommissar der Vereinten Nationen entwickelt?", "Welche Werke werden von Hoher Flüchtlingskommissar der Vereinten Nationen entwickelt?", "Welche Werke wurden von Hoher Flüchtlingskommissar der Vereinten Nationen entwickelt?", "Welches Werk wird von Hoher Flüchtlingskommissar der Vereinten Nationen entwickelt?", "Welches Werk wurde von Hoher Flüchtlingskommissar der Vereinten Nationen entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/United_Nations_High_Commissioner_for_Refugees>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von United Overseas Bank entwickelt?", "Was wurde von United Overseas Bank entwickelt?", "Welche Werke werden von United Overseas Bank entwickelt?", "Welche Werke wurden von United Overseas Bank entwickelt?", "Welches Werk wird von United Overseas Bank entwickelt?", "Welches Werk wurde von United Overseas Bank entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/United_Overseas_Bank>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Streitkräfte der Vereinigten Staaten entwickelt?", "Was wurde von Streitkräfte der Vereinigten Staaten entwickelt?", "Welche Werke werden von Streitkräfte der Vereinigten Staaten entwickelt?", "Welche Werke wurden von Streitkräfte der Vereinigten Staaten entwickelt?", "Welches Werk wird von Streitkräfte der Vereinigten Staaten entwickelt?", "Welches Werk wurde von Streitkräfte der Vereinigten Staaten entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/United_States_Armed_Forces>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von United States Army entwickelt?", "Was wurde von United States Army entwickelt?", "Welche Werke werden von United States Army entwickelt?", "Welche Werke wurden von United States Army entwickelt?", "Welches Werk wird von United States Army entwickelt?", "Welches Werk wurde von United States Army entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/United_States_Army>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Environmental Protection Agency entwickelt?", "Was wurde von Environmental Protection Agency entwickelt?", "Welche Werke werden von Environmental Protection Agency entwickelt?", "Welche Werke wurden von Environmental Protection Agency entwickelt?", "Welches Werk wird von Environmental Protection Agency entwickelt?", "Welches Werk wurde von Environmental Protection Agency entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/United_States_Environmental_Protection_Agency>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University College Dublin entwickelt?", "Was wurde von University College Dublin entwickelt?", "Welche Werke werden von University College Dublin entwickelt?", "Welche Werke wurden von University College Dublin entwickelt?", "Welches Werk wird von University College Dublin entwickelt?", "Welches Werk wurde von University College Dublin entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_College_Dublin>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University College London entwickelt?", "Was wurde von University College London entwickelt?", "Welche Werke werden von University College London entwickelt?", "Welche Werke wurden von University College London entwickelt?", "Welches Werk wird von University College London entwickelt?", "Welches Werk wurde von University College London entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_College_London>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Antwerpen entwickelt?", "Was wurde von Universität Antwerpen entwickelt?", "Welche Werke werden von Universität Antwerpen entwickelt?", "Welche Werke wurden von Universität Antwerpen entwickelt?", "Welches Werk wird von Universität Antwerpen entwickelt?", "Welches Werk wurde von Universität Antwerpen entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Antwerp>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Auckland entwickelt?", "Was wurde von University of Auckland entwickelt?", "Welche Werke werden von University of Auckland entwickelt?", "Welche Werke wurden von University of Auckland entwickelt?", "Welches Werk wird von University of Auckland entwickelt?", "Welches Werk wurde von University of Auckland entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Auckland>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Barcelona entwickelt?", "Was wurde von Universität Barcelona entwickelt?", "Welche Werke werden von Universität Barcelona entwickelt?", "Welche Werke wurden von Universität Barcelona entwickelt?", "Welches Werk wird von Universität Barcelona entwickelt?", "Welches Werk wurde von Universität Barcelona entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Barcelona>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Bath entwickelt?", "Was wurde von University of Bath entwickelt?", "Welche Werke werden von University of Bath entwickelt?", "Welche Werke wurden von University of Bath entwickelt?", "Welches Werk wird von University of Bath entwickelt?", "Welches Werk wurde von University of Bath entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Bath>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Bordeaux entwickelt?", "Was wurde von Universität Bordeaux entwickelt?", "Welche Werke werden von Universität Bordeaux entwickelt?", "Welche Werke wurden von Universität Bordeaux entwickelt?", "Welches Werk wird von Universität Bordeaux entwickelt?", "Welches Werk wurde von Universität Bordeaux entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Bordeaux>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Bristol entwickelt?", "Was wurde von University of Bristol entwickelt?", "Welche Werke werden von University of Bristol entwickelt?", "Welche Werke wurden von University of Bristol entwickelt?", "Welches Werk wird von University of Bristol entwickelt?", "Welches Werk wurde von University of Bristol entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Bristol>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of British Columbia entwickelt?", "Was wurde von University of British Columbia entwickelt?", "Welche Werke werden von University of British Columbia entwickelt?", "Welche Werke wurden von University of British Columbia entwickelt?", "Welches Werk wird von University of British Columbia entwickelt?", "Welches Werk wurde von University of British Columbia entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_British_Columbia>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of California, Berkeley entwickelt?", "Was wurde von University of California, Berkeley entwickelt?", "Welche Werke werden von University of California, Berkeley entwickelt?", "Welche Werke wurden von University of California, Berkeley entwickelt?", "Welches Werk wird von University of California, Berkeley entwickelt?", "Welches Werk wurde von University of California, Berkeley entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_California,_Berkeley>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of California, San Diego entwickelt?", "Was wurde von University of California, San Diego entwickelt?", "Welche Werke werden von University of California, San Diego entwickelt?", "Welche Werke wurden von University of California, San Diego entwickelt?", "Welches Werk wird von University of California, San Diego entwickelt?", "Welches Werk wurde von University of California, San Diego entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_California,_San_Diego>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of California, San Francisco entwickelt?", "Was wurde von University of California, San Francisco entwickelt?", "Welche Werke werden von University of California, San Francisco entwickelt?", "Welche Werke wurden von University of California, San Francisco entwickelt?", "Welches Werk wird von University of California, San Francisco entwickelt?", "Welches Werk wurde von University of California, San Francisco entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_California,_San_Francisco>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of California, Santa Barbara entwickelt?", "Was wurde von University of California, Santa Barbara entwickelt?", "Welche Werke werden von University of California, Santa Barbara entwickelt?", "Welche Werke wurden von University of California, Santa Barbara entwickelt?", "Welches Werk wird von University of California, Santa Barbara entwickelt?", "Welches Werk wurde von University of California, Santa Barbara entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_California,_Santa_Barbara>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of California, Santa Cruz entwickelt?", "Was wurde von University of California, Santa Cruz entwickelt?", "Welche Werke werden von University of California, Santa Cruz entwickelt?", "Welche Werke wurden von University of California, Santa Cruz entwickelt?", "Welches Werk wird von University of California, Santa Cruz entwickelt?", "Welches Werk wurde von University of California, Santa Cruz entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_California,_Santa_Cruz>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Cambridge entwickelt?", "Was wurde von University of Cambridge entwickelt?", "Welche Werke werden von University of Cambridge entwickelt?", "Welche Werke wurden von University of Cambridge entwickelt?", "Welches Werk wird von University of Cambridge entwickelt?", "Welches Werk wurde von University of Cambridge entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Cambridge>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Chicago entwickelt?", "Was wurde von University of Chicago entwickelt?", "Welche Werke werden von University of Chicago entwickelt?", "Welche Werke wurden von University of Chicago entwickelt?", "Welches Werk wird von University of Chicago entwickelt?", "Welches Werk wurde von University of Chicago entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Chicago>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Kopenhagen entwickelt?", "Was wurde von Universität Kopenhagen entwickelt?", "Welche Werke werden von Universität Kopenhagen entwickelt?", "Welche Werke wurden von Universität Kopenhagen entwickelt?", "Welches Werk wird von Universität Kopenhagen entwickelt?", "Welches Werk wurde von Universität Kopenhagen entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Copenhagen>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Delaware entwickelt?", "Was wurde von University of Delaware entwickelt?", "Welche Werke werden von University of Delaware entwickelt?", "Welche Werke wurden von University of Delaware entwickelt?", "Welches Werk wird von University of Delaware entwickelt?", "Welches Werk wurde von University of Delaware entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Delaware>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Dundee entwickelt?", "Was wurde von University of Dundee entwickelt?", "Welche Werke werden von University of Dundee entwickelt?", "Welche Werke wurden von University of Dundee entwickelt?", "Welches Werk wird von University of Dundee entwickelt?", "Welches Werk wurde von University of Dundee entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Dundee>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von The University of Edinburgh entwickelt?", "Was wurde von The University of Edinburgh entwickelt?", "Welche Werke werden von The University of Edinburgh entwickelt?", "Welche Werke wurden von The University of Edinburgh entwickelt?", "Welches Werk wird von The University of Edinburgh entwickelt?", "Welches Werk wurde von The University of Edinburgh entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Edinburgh>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Florenz entwickelt?", "Was wurde von Universität Florenz entwickelt?", "Welche Werke werden von Universität Florenz entwickelt?", "Welche Werke wurden von Universität Florenz entwickelt?", "Welches Werk wird von Universität Florenz entwickelt?", "Welches Werk wurde von Universität Florenz entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Florence>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Florida entwickelt?", "Was wurde von University of Florida entwickelt?", "Welche Werke werden von University of Florida entwickelt?", "Welche Werke wurden von University of Florida entwickelt?", "Welches Werk wird von University of Florida entwickelt?", "Welches Werk wurde von University of Florida entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Florida>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Albert-Ludwigs-Universität Freiburg entwickelt?", "Was wurde von Albert-Ludwigs-Universität Freiburg entwickelt?", "Welche Werke werden von Albert-Ludwigs-Universität Freiburg entwickelt?", "Welche Werke wurden von Albert-Ludwigs-Universität Freiburg entwickelt?", "Welches Werk wird von Albert-Ludwigs-Universität Freiburg entwickelt?", "Welches Werk wurde von Albert-Ludwigs-Universität Freiburg entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Freiburg>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Glasgow entwickelt?", "Was wurde von University of Glasgow entwickelt?", "Welche Werke werden von University of Glasgow entwickelt?", "Welche Werke wurden von University of Glasgow entwickelt?", "Welches Werk wird von University of Glasgow entwickelt?", "Welches Werk wurde von University of Glasgow entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Glasgow>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Granada entwickelt?", "Was wurde von Universität Granada entwickelt?", "Welche Werke werden von Universität Granada entwickelt?", "Welche Werke wurden von Universität Granada entwickelt?", "Welches Werk wird von Universität Granada entwickelt?", "Welches Werk wurde von Universität Granada entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Granada>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Reichsuniversität Groningen entwickelt?", "Was wurde von Reichsuniversität Groningen entwickelt?", "Welche Werke werden von Reichsuniversität Groningen entwickelt?", "Welche Werke wurden von Reichsuniversität Groningen entwickelt?", "Welches Werk wird von Reichsuniversität Groningen entwickelt?", "Welches Werk wurde von Reichsuniversität Groningen entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Groningen>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Hamburg entwickelt?", "Was wurde von Universität Hamburg entwickelt?", "Welche Werke werden von Universität Hamburg entwickelt?", "Welche Werke wurden von Universität Hamburg entwickelt?", "Welches Werk wird von Universität Hamburg entwickelt?", "Welches Werk wurde von Universität Hamburg entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Hamburg>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Illinois at Urbana-Champaign entwickelt?", "Was wurde von University of Illinois at Urbana-Champaign entwickelt?", "Welche Werke werden von University of Illinois at Urbana-Champaign entwickelt?", "Welche Werke wurden von University of Illinois at Urbana-Champaign entwickelt?", "Welches Werk wird von University of Illinois at Urbana-Champaign entwickelt?", "Welches Werk wurde von University of Illinois at Urbana-Champaign entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Illinois_at_Urbana–Champaign>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Kent entwickelt?", "Was wurde von University of Kent entwickelt?", "Welche Werke werden von University of Kent entwickelt?", "Welche Werke wurden von University of Kent entwickelt?", "Welches Werk wird von University of Kent entwickelt?", "Welches Werk wurde von University of Kent entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Kent>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Las Palmas de Gran Canaria entwickelt?", "Was wurde von Universität Las Palmas de Gran Canaria entwickelt?", "Welche Werke werden von Universität Las Palmas de Gran Canaria entwickelt?", "Welche Werke wurden von Universität Las Palmas de Gran Canaria entwickelt?", "Welches Werk wird von Universität Las Palmas de Gran Canaria entwickelt?", "Welches Werk wurde von Universität Las Palmas de Gran Canaria entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Las_Palmas_de_Gran_Canaria>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Leeds entwickelt?", "Was wurde von University of Leeds entwickelt?", "Welche Werke werden von University of Leeds entwickelt?", "Welche Werke wurden von University of Leeds entwickelt?", "Welches Werk wird von University of Leeds entwickelt?", "Welches Werk wurde von University of Leeds entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Leeds>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Liverpool entwickelt?", "Was wurde von University of Liverpool entwickelt?", "Welche Werke werden von University of Liverpool entwickelt?", "Welche Werke wurden von University of Liverpool entwickelt?", "Welches Werk wird von University of Liverpool entwickelt?", "Welches Werk wurde von University of Liverpool entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Liverpool>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Ljubljana entwickelt?", "Was wurde von Universität Ljubljana entwickelt?", "Welche Werke werden von Universität Ljubljana entwickelt?", "Welche Werke wurden von Universität Ljubljana entwickelt?", "Welches Werk wird von Universität Ljubljana entwickelt?", "Welches Werk wurde von Universität Ljubljana entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Ljubljana>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Manchester entwickelt?", "Was wurde von University of Manchester entwickelt?", "Welche Werke werden von University of Manchester entwickelt?", "Welche Werke wurden von University of Manchester entwickelt?", "Welches Werk wird von University of Manchester entwickelt?", "Welches Werk wurde von University of Manchester entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Manchester>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Mannheim entwickelt?", "Was wurde von Universität Mannheim entwickelt?", "Welche Werke werden von Universität Mannheim entwickelt?", "Welche Werke wurden von Universität Mannheim entwickelt?", "Welches Werk wird von Universität Mannheim entwickelt?", "Welches Werk wurde von Universität Mannheim entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Mannheim>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Maryland, College Park entwickelt?", "Was wurde von University of Maryland, College Park entwickelt?", "Welche Werke werden von University of Maryland, College Park entwickelt?", "Welche Werke wurden von University of Maryland, College Park entwickelt?", "Welches Werk wird von University of Maryland, College Park entwickelt?", "Welches Werk wurde von University of Maryland, College Park entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Maryland,_College_Park>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Melbourne entwickelt?", "Was wurde von Universität Melbourne entwickelt?", "Welche Werke werden von Universität Melbourne entwickelt?", "Welche Werke wurden von Universität Melbourne entwickelt?", "Welches Werk wird von Universität Melbourne entwickelt?", "Welches Werk wurde von Universität Melbourne entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Melbourne>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Michigan entwickelt?", "Was wurde von University of Michigan entwickelt?", "Welche Werke werden von University of Michigan entwickelt?", "Welche Werke wurden von University of Michigan entwickelt?", "Welches Werk wird von University of Michigan entwickelt?", "Welches Werk wurde von University of Michigan entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Michigan>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of New Mexico entwickelt?", "Was wurde von University of New Mexico entwickelt?", "Welche Werke werden von University of New Mexico entwickelt?", "Welche Werke wurden von University of New Mexico entwickelt?", "Welches Werk wird von University of New Mexico entwickelt?", "Welches Werk wurde von University of New Mexico entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_New_Mexico>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of North Carolina at Chapel Hill entwickelt?", "Was wurde von University of North Carolina at Chapel Hill entwickelt?", "Welche Werke werden von University of North Carolina at Chapel Hill entwickelt?", "Welche Werke wurden von University of North Carolina at Chapel Hill entwickelt?", "Welches Werk wird von University of North Carolina at Chapel Hill entwickelt?", "Welches Werk wurde von University of North Carolina at Chapel Hill entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_North_Carolina_at_Chapel_Hill>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Oxford entwickelt?", "Was wurde von University of Oxford entwickelt?", "Welche Werke werden von University of Oxford entwickelt?", "Welche Werke wurden von University of Oxford entwickelt?", "Welches Werk wird von University of Oxford entwickelt?", "Welches Werk wurde von University of Oxford entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Oxford>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Rochester entwickelt?", "Was wurde von University of Rochester entwickelt?", "Welche Werke werden von University of Rochester entwickelt?", "Welche Werke wurden von University of Rochester entwickelt?", "Welches Werk wird von University of Rochester entwickelt?", "Welches Werk wurde von University of Rochester entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Rochester>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of South Florida entwickelt?", "Was wurde von University of South Florida entwickelt?", "Welche Werke werden von University of South Florida entwickelt?", "Welche Werke wurden von University of South Florida entwickelt?", "Welches Werk wird von University of South Florida entwickelt?", "Welches Werk wurde von University of South Florida entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_South_Florida>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Southampton entwickelt?", "Was wurde von University of Southampton entwickelt?", "Welche Werke werden von University of Southampton entwickelt?", "Welche Werke wurden von University of Southampton entwickelt?", "Welches Werk wird von University of Southampton entwickelt?", "Welches Werk wurde von University of Southampton entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Southampton>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "5",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of St Andrews entwickelt?", "Was wurde von University of St Andrews entwickelt?", "Welche Werke werden von University of St Andrews entwickelt?", "Welche Werke wurden von University of St Andrews entwickelt?", "Welches Werk wird von University of St Andrews entwickelt?", "Welches Werk wurde von University of St Andrews entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_St_Andrews>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Madrid ausgestellt?", "Was wurde von Madrid ausgestellt?", "Welche Kunstwerke werden von Madrid ausgestellt?", "Welche Kunstwerke wurden von Madrid ausgestellt?", "Welches Kunstwerk wird von Madrid ausgestellt?", "Welches Kunstwerk wurde von Madrid ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Madrid>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Mali Lošinj ausgestellt?", "Was wurde von Mali Lošinj ausgestellt?", "Welche Kunstwerke werden von Mali Lošinj ausgestellt?", "Welche Kunstwerke wurden von Mali Lošinj ausgestellt?", "Welches Kunstwerk wird von Mali Lošinj ausgestellt?", "Welches Kunstwerk wurde von Mali Lošinj ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Mali_Lošinj>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Casa Buonarroti ausgestellt?", "Was wurde von Casa Buonarroti ausgestellt?", "Welche Kunstwerke werden von Casa Buonarroti ausgestellt?", "Welche Kunstwerke wurden von Casa Buonarroti ausgestellt?", "Welches Kunstwerk wird von Casa Buonarroti ausgestellt?", "Welches Kunstwerk wurde von Casa Buonarroti ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Casa_Buonarroti>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Cathedral Square (Christchurch) ausgestellt?", "Was wurde von Cathedral Square (Christchurch) ausgestellt?", "Welche Kunstwerke werden von Cathedral Square (Christchurch) ausgestellt?", "Welche Kunstwerke wurden von Cathedral Square (Christchurch) ausgestellt?", "Welches Kunstwerk wird von Cathedral Square (Christchurch) ausgestellt?", "Welches Kunstwerk wurde von Cathedral Square (Christchurch) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Cathedral_Square,_Christchurch>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von San Domenico (Fiesole) ausgestellt?", "Was wurde von San Domenico (Fiesole) ausgestellt?", "Welche Kunstwerke werden von San Domenico (Fiesole) ausgestellt?", "Welche Kunstwerke wurden von San Domenico (Fiesole) ausgestellt?", "Welches Kunstwerk wird von San Domenico (Fiesole) ausgestellt?", "Welches Kunstwerk wurde von San Domenico (Fiesole) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Convent_of_San_Domenico,_Fiesole>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Uffizien ausgestellt?", "Was wurde von Uffizien ausgestellt?", "Welche Kunstwerke werden von Uffizien ausgestellt?", "Welche Kunstwerke wurden von Uffizien ausgestellt?", "Welches Kunstwerk wird von Uffizien ausgestellt?", "Welches Kunstwerk wurde von Uffizien ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Uffizi>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Union Buildings ausgestellt?", "Was wurde von Union Buildings ausgestellt?", "Welche Kunstwerke werden von Union Buildings ausgestellt?", "Welche Kunstwerke wurden von Union Buildings ausgestellt?", "Welches Kunstwerk wird von Union Buildings ausgestellt?", "Welches Kunstwerk wurde von Union Buildings ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Union_Buildings>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Generalversammlung der Vereinten Nationen ausgestellt?", "Was wurde von Generalversammlung der Vereinten Nationen ausgestellt?", "Welche Kunstwerke werden von Generalversammlung der Vereinten Nationen ausgestellt?", "Welche Kunstwerke wurden von Generalversammlung der Vereinten Nationen ausgestellt?", "Welches Kunstwerk wird von Generalversammlung der Vereinten Nationen ausgestellt?", "Welches Kunstwerk wurde von Generalversammlung der Vereinten Nationen ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/United_Nations_General_Assembly>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Vereinigte Staaten ausgestellt?", "Was wurde von Vereinigte Staaten ausgestellt?", "Welche Kunstwerke werden von Vereinigte Staaten ausgestellt?", "Welche Kunstwerke wurden von Vereinigte Staaten ausgestellt?", "Welches Kunstwerk wird von Vereinigte Staaten ausgestellt?", "Welches Kunstwerk wurde von Vereinigte Staaten ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/United_States>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Kapitol (Washington) ausgestellt?", "Was wurde von Kapitol (Washington) ausgestellt?", "Welche Kunstwerke werden von Kapitol (Washington) ausgestellt?", "Welche Kunstwerke wurden von Kapitol (Washington) ausgestellt?", "Welches Kunstwerk wird von Kapitol (Washington) ausgestellt?", "Welches Kunstwerk wurde von Kapitol (Washington) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/United_States_Capitol>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von United States Naval Academy ausgestellt?", "Was wurde von United States Naval Academy ausgestellt?", "Welche Kunstwerke werden von United States Naval Academy ausgestellt?", "Welche Kunstwerke wurden von United States Naval Academy ausgestellt?", "Welches Kunstwerk wird von United States Naval Academy ausgestellt?", "Welches Kunstwerk wurde von United States Naval Academy ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/United_States_Naval_Academy>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von United States Navy Memorial ausgestellt?", "Was wurde von United States Navy Memorial ausgestellt?", "Welche Kunstwerke werden von United States Navy Memorial ausgestellt?", "Welche Kunstwerke wurden von United States Navy Memorial ausgestellt?", "Welches Kunstwerk wird von United States Navy Memorial ausgestellt?", "Welches Kunstwerk wurde von United States Navy Memorial ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/United_States_Navy_Memorial>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University at Buffalo ausgestellt?", "Was wurde von University at Buffalo ausgestellt?", "Welche Kunstwerke werden von University at Buffalo ausgestellt?", "Welche Kunstwerke wurden von University at Buffalo ausgestellt?", "Welches Kunstwerk wird von University at Buffalo ausgestellt?", "Welches Kunstwerk wurde von University at Buffalo ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_at_Buffalo>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Chicago ausgestellt?", "Was wurde von University of Chicago ausgestellt?", "Welche Kunstwerke werden von University of Chicago ausgestellt?", "Welche Kunstwerke wurden von University of Chicago ausgestellt?", "Welches Kunstwerk wird von University of Chicago ausgestellt?", "Welches Kunstwerk wurde von University of Chicago ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Chicago>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität von Ghana ausgestellt?", "Was wurde von Universität von Ghana ausgestellt?", "Welche Kunstwerke werden von Universität von Ghana ausgestellt?", "Welche Kunstwerke wurden von Universität von Ghana ausgestellt?", "Welches Kunstwerk wird von Universität von Ghana ausgestellt?", "Welches Kunstwerk wurde von Universität von Ghana ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Ghana>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Houston ausgestellt?", "Was wurde von University of Houston ausgestellt?", "Welche Kunstwerke werden von University of Houston ausgestellt?", "Welche Kunstwerke wurden von University of Houston ausgestellt?", "Welches Kunstwerk wird von University of Houston ausgestellt?", "Welches Kunstwerk wurde von University of Houston ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Houston>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Michigan Museum of Art ausgestellt?", "Was wurde von University of Michigan Museum of Art ausgestellt?", "Welche Kunstwerke werden von University of Michigan Museum of Art ausgestellt?", "Welche Kunstwerke wurden von University of Michigan Museum of Art ausgestellt?", "Welches Kunstwerk wird von University of Michigan Museum of Art ausgestellt?", "Welches Kunstwerk wurde von University of Michigan Museum of Art ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Michigan_Museum_of_Art>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Notre Dame ausgestellt?", "Was wurde von University of Notre Dame ausgestellt?", "Welche Kunstwerke werden von University of Notre Dame ausgestellt?", "Welche Kunstwerke wurden von University of Notre Dame ausgestellt?", "Welches Kunstwerk wird von University of Notre Dame ausgestellt?", "Welches Kunstwerk wurde von University of Notre Dame ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Notre_Dame>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Otago ausgestellt?", "Was wurde von University of Otago ausgestellt?", "Welche Kunstwerke werden von University of Otago ausgestellt?", "Welche Kunstwerke wurden von University of Otago ausgestellt?", "Welches Kunstwerk wird von University of Otago ausgestellt?", "Welches Kunstwerk wurde von University of Otago ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Otago>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of Pennsylvania ausgestellt?", "Was wurde von University of Pennsylvania ausgestellt?", "Welche Kunstwerke werden von University of Pennsylvania ausgestellt?", "Welche Kunstwerke wurden von University of Pennsylvania ausgestellt?", "Welches Kunstwerk wird von University of Pennsylvania ausgestellt?", "Welches Kunstwerk wurde von University of Pennsylvania ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Pennsylvania>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Sydney ausgestellt?", "Was wurde von Universität Sydney ausgestellt?", "Welche Kunstwerke werden von Universität Sydney ausgestellt?", "Welche Kunstwerke wurden von Universität Sydney ausgestellt?", "Welches Kunstwerk wird von Universität Sydney ausgestellt?", "Welches Kunstwerk wurde von Universität Sydney ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Sydney>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Universität Twente ausgestellt?", "Was wurde von Universität Twente ausgestellt?", "Welche Kunstwerke werden von Universität Twente ausgestellt?", "Welche Kunstwerke wurden von Universität Twente ausgestellt?", "Welches Kunstwerk wird von Universität Twente ausgestellt?", "Welches Kunstwerk wurde von Universität Twente ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Twente>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Eberhard Karls Universität Tübingen ausgestellt?", "Was wurde von Eberhard Karls Universität Tübingen ausgestellt?", "Welche Kunstwerke werden von Eberhard Karls Universität Tübingen ausgestellt?", "Welche Kunstwerke wurden von Eberhard Karls Universität Tübingen ausgestellt?", "Welches Kunstwerk wird von Eberhard Karls Universität Tübingen ausgestellt?", "Welches Kunstwerk wurde von Eberhard Karls Universität Tübingen ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_Tübingen>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Utah Valley University ausgestellt?", "Was wurde von Utah Valley University ausgestellt?", "Welche Kunstwerke werden von Utah Valley University ausgestellt?", "Welche Kunstwerke wurden von Utah Valley University ausgestellt?", "Welches Kunstwerk wird von Utah Valley University ausgestellt?", "Welches Kunstwerk wurde von Utah Valley University ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Utah_Valley_University>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Valletta ausgestellt?", "Was wurde von Valletta ausgestellt?", "Welche Kunstwerke werden von Valletta ausgestellt?", "Welche Kunstwerke wurden von Valletta ausgestellt?", "Welches Kunstwerk wird von Valletta ausgestellt?", "Welches Kunstwerk wurde von Valletta ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Valletta>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Van Abbemuseum ausgestellt?", "Was wurde von Van Abbemuseum ausgestellt?", "Welche Kunstwerke werden von Van Abbemuseum ausgestellt?", "Welche Kunstwerke wurden von Van Abbemuseum ausgestellt?", "Welches Kunstwerk wird von Van Abbemuseum ausgestellt?", "Welches Kunstwerk wurde von Van Abbemuseum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Van_Abbemuseum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Van Gogh Museum ausgestellt?", "Was wurde von Van Gogh Museum ausgestellt?", "Welche Kunstwerke werden von Van Gogh Museum ausgestellt?", "Welche Kunstwerke wurden von Van Gogh Museum ausgestellt?", "Welches Kunstwerk wird von Van Gogh Museum ausgestellt?", "Welches Kunstwerk wurde von Van Gogh Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Van_Gogh_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Vancouver Art Gallery ausgestellt?", "Was wurde von Vancouver Art Gallery ausgestellt?", "Welche Kunstwerke werden von Vancouver Art Gallery ausgestellt?", "Welche Kunstwerke wurden von Vancouver Art Gallery ausgestellt?", "Welches Kunstwerk wird von Vancouver Art Gallery ausgestellt?", "Welches Kunstwerk wurde von Vancouver Art Gallery ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Vancouver_Art_Gallery>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Vatikanstadt ausgestellt?", "Was wurde von Vatikanstadt ausgestellt?", "Welche Kunstwerke werden von Vatikanstadt ausgestellt?", "Welche Kunstwerke wurden von Vatikanstadt ausgestellt?", "Welches Kunstwerk wird von Vatikanstadt ausgestellt?", "Welches Kunstwerk wurde von Vatikanstadt ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Vatican_City>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Vatikanische Museen ausgestellt?", "Was wurde von Vatikanische Museen ausgestellt?", "Welche Kunstwerke werden von Vatikanische Museen ausgestellt?", "Welche Kunstwerke wurden von Vatikanische Museen ausgestellt?", "Welches Kunstwerk wird von Vatikanische Museen ausgestellt?", "Welches Kunstwerk wurde von Vatikanische Museen ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Vatican_Museums>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Venedig ausgestellt?", "Was wurde von Venedig ausgestellt?", "Welche Kunstwerke werden von Venedig ausgestellt?", "Welche Kunstwerke wurden von Venedig ausgestellt?", "Welches Kunstwerk wird von Venedig ausgestellt?", "Welches Kunstwerk wurde von Venedig ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Venice>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Czartoryski-Museum ausgestellt?", "Was wurde von Czartoryski-Museum ausgestellt?", "Welche Kunstwerke werden von Czartoryski-Museum ausgestellt?", "Welche Kunstwerke wurden von Czartoryski-Museum ausgestellt?", "Welches Kunstwerk wird von Czartoryski-Museum ausgestellt?", "Welches Kunstwerk wurde von Czartoryski-Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Czartoryski_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Daitoku-ji ausgestellt?", "Was wurde von Daitoku-ji ausgestellt?", "Welche Kunstwerke werden von Daitoku-ji ausgestellt?", "Welche Kunstwerke wurden von Daitoku-ji ausgestellt?", "Welches Kunstwerk wird von Daitoku-ji ausgestellt?", "Welches Kunstwerk wurde von Daitoku-ji ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Daitoku-ji>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Dallas Museum of Art ausgestellt?", "Was wurde von Dallas Museum of Art ausgestellt?", "Welche Kunstwerke werden von Dallas Museum of Art ausgestellt?", "Welche Kunstwerke wurden von Dallas Museum of Art ausgestellt?", "Welches Kunstwerk wird von Dallas Museum of Art ausgestellt?", "Welches Kunstwerk wurde von Dallas Museum of Art ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Dallas_Museum_of_Art>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Sanssouci ausgestellt?", "Was wurde von Sanssouci ausgestellt?", "Welche Kunstwerke werden von Sanssouci ausgestellt?", "Welche Kunstwerke wurden von Sanssouci ausgestellt?", "Welches Kunstwerk wird von Sanssouci ausgestellt?", "Welches Kunstwerk wurde von Sanssouci ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Sanssouci>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Santa Maria di Loreto (Rom) ausgestellt?", "Was wurde von Santa Maria di Loreto (Rom) ausgestellt?", "Welche Kunstwerke werden von Santa Maria di Loreto (Rom) ausgestellt?", "Welche Kunstwerke wurden von Santa Maria di Loreto (Rom) ausgestellt?", "Welches Kunstwerk wird von Santa Maria di Loreto (Rom) ausgestellt?", "Welches Kunstwerk wurde von Santa Maria di Loreto (Rom) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Santa_Maria_di_Loreto,_Rome>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Musée Goya ausgestellt?", "Was wurde von Musée Goya ausgestellt?", "Welche Kunstwerke werden von Musée Goya ausgestellt?", "Welche Kunstwerke wurden von Musée Goya ausgestellt?", "Welches Kunstwerk wird von Musée Goya ausgestellt?", "Welches Kunstwerk wurde von Musée Goya ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Goya_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Santa Bibiana ausgestellt?", "Was wurde von Santa Bibiana ausgestellt?", "Welche Kunstwerke werden von Santa Bibiana ausgestellt?", "Welche Kunstwerke wurden von Santa Bibiana ausgestellt?", "Welches Kunstwerk wird von Santa Bibiana ausgestellt?", "Welches Kunstwerk wurde von Santa Bibiana ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Santa_Bibiana>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Statens Museum for Kunst ausgestellt?", "Was wurde von Statens Museum for Kunst ausgestellt?", "Welche Kunstwerke werden von Statens Museum for Kunst ausgestellt?", "Welche Kunstwerke wurden von Statens Museum for Kunst ausgestellt?", "Welches Kunstwerk wird von Statens Museum for Kunst ausgestellt?", "Welches Kunstwerk wurde von Statens Museum for Kunst ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/National_Gallery_of_Denmark>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Biblioteca Reale ausgestellt?", "Was wurde von Biblioteca Reale ausgestellt?", "Welche Kunstwerke werden von Biblioteca Reale ausgestellt?", "Welche Kunstwerke wurden von Biblioteca Reale ausgestellt?", "Welches Kunstwerk wird von Biblioteca Reale ausgestellt?", "Welches Kunstwerk wurde von Biblioteca Reale ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Royal_Library_of_Turin>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von San Domenico (Arezzo) ausgestellt?", "Was wurde von San Domenico (Arezzo) ausgestellt?", "Welche Kunstwerke werden von San Domenico (Arezzo) ausgestellt?", "Welche Kunstwerke wurden von San Domenico (Arezzo) ausgestellt?", "Welches Kunstwerk wird von San Domenico (Arezzo) ausgestellt?", "Welches Kunstwerk wurde von San Domenico (Arezzo) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/San_Domenico,_Arezzo>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von San Sebastiano fuori le mura ausgestellt?", "Was wurde von San Sebastiano fuori le mura ausgestellt?", "Welche Kunstwerke werden von San Sebastiano fuori le mura ausgestellt?", "Welche Kunstwerke wurden von San Sebastiano fuori le mura ausgestellt?", "Welches Kunstwerk wird von San Sebastiano fuori le mura ausgestellt?", "Welches Kunstwerk wurde von San Sebastiano fuori le mura ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/San_Sebastiano_fuori_le_mura>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Santa Maria Gloriosa dei Frari ausgestellt?", "Was wurde von Santa Maria Gloriosa dei Frari ausgestellt?", "Welche Kunstwerke werden von Santa Maria Gloriosa dei Frari ausgestellt?", "Welche Kunstwerke wurden von Santa Maria Gloriosa dei Frari ausgestellt?", "Welches Kunstwerk wird von Santa Maria Gloriosa dei Frari ausgestellt?", "Welches Kunstwerk wurde von Santa Maria Gloriosa dei Frari ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Santa_Maria_Gloriosa_dei_Frari>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von San Zanipolo ausgestellt?", "Was wurde von San Zanipolo ausgestellt?", "Welche Kunstwerke werden von San Zanipolo ausgestellt?", "Welche Kunstwerke wurden von San Zanipolo ausgestellt?", "Welches Kunstwerk wird von San Zanipolo ausgestellt?", "Welches Kunstwerk wurde von San Zanipolo ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Santi_Giovanni_e_Paolo,_Venice>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Santissima Annunziata (Florenz) ausgestellt?", "Was wurde von Santissima Annunziata (Florenz) ausgestellt?", "Welche Kunstwerke werden von Santissima Annunziata (Florenz) ausgestellt?", "Welche Kunstwerke wurden von Santissima Annunziata (Florenz) ausgestellt?", "Welches Kunstwerk wird von Santissima Annunziata (Florenz) ausgestellt?", "Welches Kunstwerk wurde von Santissima Annunziata (Florenz) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Santissima_Annunziata,_Florence>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Scuola di San Giorgio degli Schiavoni ausgestellt?", "Was wurde von Scuola di San Giorgio degli Schiavoni ausgestellt?", "Welche Kunstwerke werden von Scuola di San Giorgio degli Schiavoni ausgestellt?", "Welche Kunstwerke wurden von Scuola di San Giorgio degli Schiavoni ausgestellt?", "Welches Kunstwerk wird von Scuola di San Giorgio degli Schiavoni ausgestellt?", "Welches Kunstwerk wurde von Scuola di San Giorgio degli Schiavoni ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Scuola_di_San_Giorgio_degli_Schiavoni>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Slowakische Nationalgalerie ausgestellt?", "Was wurde von Slowakische Nationalgalerie ausgestellt?", "Welche Kunstwerke werden von Slowakische Nationalgalerie ausgestellt?", "Welche Kunstwerke wurden von Slowakische Nationalgalerie ausgestellt?", "Welches Kunstwerk wird von Slowakische Nationalgalerie ausgestellt?", "Welches Kunstwerk wurde von Slowakische Nationalgalerie ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Slovak_National_Gallery>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Rotunde des United States Capitol ausgestellt?", "Was wurde von Rotunde des United States Capitol ausgestellt?", "Welche Kunstwerke werden von Rotunde des United States Capitol ausgestellt?", "Welche Kunstwerke wurden von Rotunde des United States Capitol ausgestellt?", "Welches Kunstwerk wird von Rotunde des United States Capitol ausgestellt?", "Welches Kunstwerk wurde von Rotunde des United States Capitol ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/United_States_Capitol_rotunda>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Fondation Maeght ausgestellt?", "Was wurde von Fondation Maeght ausgestellt?", "Welche Kunstwerke werden von Fondation Maeght ausgestellt?", "Welche Kunstwerke wurden von Fondation Maeght ausgestellt?", "Welches Kunstwerk wird von Fondation Maeght ausgestellt?", "Welches Kunstwerk wurde von Fondation Maeght ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Fondation_Maeght>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Slowenische Nationalgalerie ausgestellt?", "Was wurde von Slowenische Nationalgalerie ausgestellt?", "Welche Kunstwerke werden von Slowenische Nationalgalerie ausgestellt?", "Welche Kunstwerke wurden von Slowenische Nationalgalerie ausgestellt?", "Welches Kunstwerk wird von Slowenische Nationalgalerie ausgestellt?", "Welches Kunstwerk wurde von Slowenische Nationalgalerie ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/National_Gallery_of_Slovenia>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Museum Moderner Kunst Stiftung Ludwig Wien ausgestellt?", "Was wurde von Museum Moderner Kunst Stiftung Ludwig Wien ausgestellt?", "Welche Kunstwerke werden von Museum Moderner Kunst Stiftung Ludwig Wien ausgestellt?", "Welche Kunstwerke wurden von Museum Moderner Kunst Stiftung Ludwig Wien ausgestellt?", "Welches Kunstwerk wird von Museum Moderner Kunst Stiftung Ludwig Wien ausgestellt?", "Welches Kunstwerk wurde von Museum Moderner Kunst Stiftung Ludwig Wien ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Mumok>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Ospedale degli Innocenti ausgestellt?", "Was wurde von Ospedale degli Innocenti ausgestellt?", "Welche Kunstwerke werden von Ospedale degli Innocenti ausgestellt?", "Welche Kunstwerke wurden von Ospedale degli Innocenti ausgestellt?", "Welches Kunstwerk wird von Ospedale degli Innocenti ausgestellt?", "Welches Kunstwerk wurde von Ospedale degli Innocenti ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Ospedale_degli_Innocenti>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Menil Collection ausgestellt?", "Was wurde von Menil Collection ausgestellt?", "Welche Kunstwerke werden von Menil Collection ausgestellt?", "Welche Kunstwerke wurden von Menil Collection ausgestellt?", "Welches Kunstwerk wird von Menil Collection ausgestellt?", "Welches Kunstwerk wurde von Menil Collection ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Menil_Collection>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Pinacoteca Giovanni e Marella Agnelli ausgestellt?", "Was wurde von Pinacoteca Giovanni e Marella Agnelli ausgestellt?", "Welche Kunstwerke werden von Pinacoteca Giovanni e Marella Agnelli ausgestellt?", "Welche Kunstwerke wurden von Pinacoteca Giovanni e Marella Agnelli ausgestellt?", "Welches Kunstwerk wird von Pinacoteca Giovanni e Marella Agnelli ausgestellt?", "Welches Kunstwerk wurde von Pinacoteca Giovanni e Marella Agnelli ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Pinacoteca_Giovanni_e_Marella_Agnelli>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Birmingham Museum of Art ausgestellt?", "Was wurde von Birmingham Museum of Art ausgestellt?", "Welche Kunstwerke werden von Birmingham Museum of Art ausgestellt?", "Welche Kunstwerke wurden von Birmingham Museum of Art ausgestellt?", "Welches Kunstwerk wird von Birmingham Museum of Art ausgestellt?", "Welches Kunstwerk wurde von Birmingham Museum of Art ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Birmingham_Museum_of_Art>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Bletchley Park ausgestellt?", "Was wurde von Bletchley Park ausgestellt?", "Welche Kunstwerke werden von Bletchley Park ausgestellt?", "Welche Kunstwerke wurden von Bletchley Park ausgestellt?", "Welches Kunstwerk wird von Bletchley Park ausgestellt?", "Welches Kunstwerk wurde von Bletchley Park ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Bletchley_Park>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Bode-Museum ausgestellt?", "Was wurde von Bode-Museum ausgestellt?", "Welche Kunstwerke werden von Bode-Museum ausgestellt?", "Welche Kunstwerke wurden von Bode-Museum ausgestellt?", "Welches Kunstwerk wird von Bode-Museum ausgestellt?", "Welches Kunstwerk wurde von Bode-Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Bode_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Bonnefantenmuseum ausgestellt?", "Was wurde von Bonnefantenmuseum ausgestellt?", "Welche Kunstwerke werden von Bonnefantenmuseum ausgestellt?", "Welche Kunstwerke wurden von Bonnefantenmuseum ausgestellt?", "Welches Kunstwerk wird von Bonnefantenmuseum ausgestellt?", "Welches Kunstwerk wurde von Bonnefantenmuseum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Bonnefantenmuseum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Boston ausgestellt?", "Was wurde von Boston ausgestellt?", "Welche Kunstwerke werden von Boston ausgestellt?", "Welche Kunstwerke wurden von Boston ausgestellt?", "Welches Kunstwerk wird von Boston ausgestellt?", "Welches Kunstwerk wurde von Boston ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Boston>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Delaware Art Museum ausgestellt?", "Was wurde von Delaware Art Museum ausgestellt?", "Welche Kunstwerke werden von Delaware Art Museum ausgestellt?", "Welche Kunstwerke wurden von Delaware Art Museum ausgestellt?", "Welches Kunstwerk wird von Delaware Art Museum ausgestellt?", "Welches Kunstwerk wurde von Delaware Art Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Delaware_Art_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Denver Art Museum ausgestellt?", "Was wurde von Denver Art Museum ausgestellt?", "Welche Kunstwerke werden von Denver Art Museum ausgestellt?", "Welche Kunstwerke wurden von Denver Art Museum ausgestellt?", "Welches Kunstwerk wird von Denver Art Museum ausgestellt?", "Welches Kunstwerk wurde von Denver Art Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Denver_Art_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Denver International Airport ausgestellt?", "Was wurde von Denver International Airport ausgestellt?", "Welche Kunstwerke werden von Denver International Airport ausgestellt?", "Welche Kunstwerke wurden von Denver International Airport ausgestellt?", "Welches Kunstwerk wird von Denver International Airport ausgestellt?", "Welches Kunstwerk wurde von Denver International Airport ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Denver_International_Airport>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Derby Museum and Art Gallery ausgestellt?", "Was wurde von Derby Museum and Art Gallery ausgestellt?", "Welche Kunstwerke werden von Derby Museum and Art Gallery ausgestellt?", "Welche Kunstwerke wurden von Derby Museum and Art Gallery ausgestellt?", "Welches Kunstwerk wird von Derby Museum and Art Gallery ausgestellt?", "Welches Kunstwerk wurde von Derby Museum and Art Gallery ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Derby_Museum_and_Art_Gallery>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Des Moines Art Center ausgestellt?", "Was wurde von Des Moines Art Center ausgestellt?", "Welche Kunstwerke werden von Des Moines Art Center ausgestellt?", "Welche Kunstwerke wurden von Des Moines Art Center ausgestellt?", "Welches Kunstwerk wird von Des Moines Art Center ausgestellt?", "Welches Kunstwerk wurde von Des Moines Art Center ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Des_Moines_Art_Center>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Detroit ausgestellt?", "Was wurde von Detroit ausgestellt?", "Welche Kunstwerke werden von Detroit ausgestellt?", "Welche Kunstwerke wurden von Detroit ausgestellt?", "Welches Kunstwerk wird von Detroit ausgestellt?", "Welches Kunstwerk wurde von Detroit ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Detroit>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Detroit Institute of Arts ausgestellt?", "Was wurde von Detroit Institute of Arts ausgestellt?", "Welche Kunstwerke werden von Detroit Institute of Arts ausgestellt?", "Welche Kunstwerke wurden von Detroit Institute of Arts ausgestellt?", "Welches Kunstwerk wird von Detroit Institute of Arts ausgestellt?", "Welches Kunstwerk wurde von Detroit Institute of Arts ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Detroit_Institute_of_Arts>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Dia Art Foundation ausgestellt?", "Was wurde von Dia Art Foundation ausgestellt?", "Welche Kunstwerke werden von Dia Art Foundation ausgestellt?", "Welche Kunstwerke wurden von Dia Art Foundation ausgestellt?", "Welches Kunstwerk wird von Dia Art Foundation ausgestellt?", "Welches Kunstwerk wurde von Dia Art Foundation ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Dia_Art_Foundation>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Dogenpalast ausgestellt?", "Was wurde von Dogenpalast ausgestellt?", "Welche Kunstwerke werden von Dogenpalast ausgestellt?", "Welche Kunstwerke wurden von Dogenpalast ausgestellt?", "Welches Kunstwerk wird von Dogenpalast ausgestellt?", "Welches Kunstwerk wurde von Dogenpalast ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Doge's_Palace>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Golden Gate Park ausgestellt?", "Was wurde von Golden Gate Park ausgestellt?", "Welche Kunstwerke werden von Golden Gate Park ausgestellt?", "Welche Kunstwerke wurden von Golden Gate Park ausgestellt?", "Welches Kunstwerk wird von Golden Gate Park ausgestellt?", "Welches Kunstwerk wurde von Golden Gate Park ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Golden_Gate_Park>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Golestanpalast ausgestellt?", "Was wurde von Golestanpalast ausgestellt?", "Welche Kunstwerke werden von Golestanpalast ausgestellt?", "Welche Kunstwerke wurden von Golestanpalast ausgestellt?", "Welches Kunstwerk wird von Golestanpalast ausgestellt?", "Welches Kunstwerk wurde von Golestanpalast ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Golestan_Palace>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Großer Palast (Bangkok) ausgestellt?", "Was wurde von Großer Palast (Bangkok) ausgestellt?", "Welche Kunstwerke werden von Großer Palast (Bangkok) ausgestellt?", "Welche Kunstwerke wurden von Großer Palast (Bangkok) ausgestellt?", "Welches Kunstwerk wird von Großer Palast (Bangkok) ausgestellt?", "Welches Kunstwerk wurde von Großer Palast (Bangkok) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Grand_Palace>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Grant Park ausgestellt?", "Was wurde von Grant Park ausgestellt?", "Welche Kunstwerke werden von Grant Park ausgestellt?", "Welche Kunstwerke wurden von Grant Park ausgestellt?", "Welches Kunstwerk wird von Grant Park ausgestellt?", "Welches Kunstwerk wurde von Grant Park ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Grant_Park_(Chicago)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Great American Ball Park ausgestellt?", "Was wurde von Great American Ball Park ausgestellt?", "Welche Kunstwerke werden von Great American Ball Park ausgestellt?", "Welche Kunstwerke wurden von Great American Ball Park ausgestellt?", "Welches Kunstwerk wird von Great American Ball Park ausgestellt?", "Welches Kunstwerk wurde von Great American Ball Park ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Great_American_Ball_Park>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Greenwich (London) ausgestellt?", "Was wurde von Greenwich (London) ausgestellt?", "Welche Kunstwerke werden von Greenwich (London) ausgestellt?", "Welche Kunstwerke wurden von Greenwich (London) ausgestellt?", "Welches Kunstwerk wird von Greenwich (London) ausgestellt?", "Welches Kunstwerk wurde von Greenwich (London) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Greenwich>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Groninger Museum ausgestellt?", "Was wurde von Groninger Museum ausgestellt?", "Welche Kunstwerke werden von Groninger Museum ausgestellt?", "Welche Kunstwerke wurden von Groninger Museum ausgestellt?", "Welches Kunstwerk wird von Groninger Museum ausgestellt?", "Welches Kunstwerk wurde von Groninger Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Groninger_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Guildhall (London) ausgestellt?", "Was wurde von Guildhall (London) ausgestellt?", "Welche Kunstwerke werden von Guildhall (London) ausgestellt?", "Welche Kunstwerke wurden von Guildhall (London) ausgestellt?", "Welches Kunstwerk wird von Guildhall (London) ausgestellt?", "Welches Kunstwerk wurde von Guildhall (London) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Guildhall,_London>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Kenwood House ausgestellt?", "Was wurde von Kenwood House ausgestellt?", "Welche Kunstwerke werden von Kenwood House ausgestellt?", "Welche Kunstwerke wurden von Kenwood House ausgestellt?", "Welches Kunstwerk wird von Kenwood House ausgestellt?", "Welches Kunstwerk wurde von Kenwood House ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kenwood_House>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Kimbell Art Museum ausgestellt?", "Was wurde von Kimbell Art Museum ausgestellt?", "Welche Kunstwerke werden von Kimbell Art Museum ausgestellt?", "Welche Kunstwerke wurden von Kimbell Art Museum ausgestellt?", "Welches Kunstwerk wird von Kimbell Art Museum ausgestellt?", "Welches Kunstwerk wurde von Kimbell Art Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kimbell_Art_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von King’s College Chapel (Cambridge) ausgestellt?", "Was wurde von King’s College Chapel (Cambridge) ausgestellt?", "Welche Kunstwerke werden von King’s College Chapel (Cambridge) ausgestellt?", "Welche Kunstwerke wurden von King’s College Chapel (Cambridge) ausgestellt?", "Welches Kunstwerk wird von King’s College Chapel (Cambridge) ausgestellt?", "Welches Kunstwerk wurde von King’s College Chapel (Cambridge) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/King's_College_Chapel,_Cambridge>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Nationale Universität Krywyj Rih ausgestellt?", "Was wurde von Nationale Universität Krywyj Rih ausgestellt?", "Welche Kunstwerke werden von Nationale Universität Krywyj Rih ausgestellt?", "Welche Kunstwerke wurden von Nationale Universität Krywyj Rih ausgestellt?", "Welches Kunstwerk wird von Nationale Universität Krywyj Rih ausgestellt?", "Welches Kunstwerk wurde von Nationale Universität Krywyj Rih ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kryvyi_Rih_National_University>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Kröller-Müller Museum ausgestellt?", "Was wurde von Kröller-Müller Museum ausgestellt?", "Welche Kunstwerke werden von Kröller-Müller Museum ausgestellt?", "Welche Kunstwerke wurden von Kröller-Müller Museum ausgestellt?", "Welches Kunstwerk wird von Kröller-Müller Museum ausgestellt?", "Welches Kunstwerk wurde von Kröller-Müller Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kröller-Müller_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Puschkin-Museum ausgestellt?", "Was wurde von Puschkin-Museum ausgestellt?", "Welche Kunstwerke werden von Puschkin-Museum ausgestellt?", "Welche Kunstwerke wurden von Puschkin-Museum ausgestellt?", "Welches Kunstwerk wird von Puschkin-Museum ausgestellt?", "Welches Kunstwerk wurde von Puschkin-Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Pushkin_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Père Lachaise ausgestellt?", "Was wurde von Père Lachaise ausgestellt?", "Welche Kunstwerke werden von Père Lachaise ausgestellt?", "Welche Kunstwerke wurden von Père Lachaise ausgestellt?", "Welches Kunstwerk wird von Père Lachaise ausgestellt?", "Welches Kunstwerk wurde von Père Lachaise ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Père_Lachaise_Cemetery>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Queen’s House ausgestellt?", "Was wurde von Queen’s House ausgestellt?", "Welche Kunstwerke werden von Queen’s House ausgestellt?", "Welche Kunstwerke wurden von Queen’s House ausgestellt?", "Welches Kunstwerk wird von Queen’s House ausgestellt?", "Welches Kunstwerk wurde von Queen’s House ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Queen's_House>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Kunstmuseum Basel ausgestellt?", "Was wurde von Kunstmuseum Basel ausgestellt?", "Welche Kunstwerke werden von Kunstmuseum Basel ausgestellt?", "Welche Kunstwerke wurden von Kunstmuseum Basel ausgestellt?", "Welches Kunstwerk wird von Kunstmuseum Basel ausgestellt?", "Welches Kunstwerk wurde von Kunstmuseum Basel ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kunstmuseum_Basel>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Kunsthaus Zürich ausgestellt?", "Was wurde von Kunsthaus Zürich ausgestellt?", "Welche Kunstwerke werden von Kunsthaus Zürich ausgestellt?", "Welche Kunstwerke wurden von Kunsthaus Zürich ausgestellt?", "Welches Kunstwerk wird von Kunsthaus Zürich ausgestellt?", "Welches Kunstwerk wurde von Kunsthaus Zürich ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kunstmuseum_Basel>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Royal Greenwich Observatory ausgestellt?", "Was wurde von Royal Greenwich Observatory ausgestellt?", "Welche Kunstwerke werden von Royal Greenwich Observatory ausgestellt?", "Welche Kunstwerke wurden von Royal Greenwich Observatory ausgestellt?", "Welches Kunstwerk wird von Royal Greenwich Observatory ausgestellt?", "Welches Kunstwerk wurde von Royal Greenwich Observatory ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Royal_Observatory,_Greenwich>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Palazzo Pitti ausgestellt?", "Was wurde von Palazzo Pitti ausgestellt?", "Welche Kunstwerke werden von Palazzo Pitti ausgestellt?", "Welche Kunstwerke wurden von Palazzo Pitti ausgestellt?", "Welches Kunstwerk wird von Palazzo Pitti ausgestellt?", "Welches Kunstwerk wurde von Palazzo Pitti ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Palazzo_Pitti>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von San Marco (Florenz) ausgestellt?", "Was wurde von San Marco (Florenz) ausgestellt?", "Welche Kunstwerke werden von San Marco (Florenz) ausgestellt?", "Welche Kunstwerke wurden von San Marco (Florenz) ausgestellt?", "Welches Kunstwerk wird von San Marco (Florenz) ausgestellt?", "Welches Kunstwerk wurde von San Marco (Florenz) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/San_Marco,_Florence>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Horse Guards Parade ausgestellt?", "Was wurde von Horse Guards Parade ausgestellt?", "Welche Kunstwerke werden von Horse Guards Parade ausgestellt?", "Welche Kunstwerke wurden von Horse Guards Parade ausgestellt?", "Welches Kunstwerk wird von Horse Guards Parade ausgestellt?", "Welches Kunstwerk wurde von Horse Guards Parade ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Horse_Guards_Parade>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von University of the West Indies ausgestellt?", "Was wurde von University of the West Indies ausgestellt?", "Welche Kunstwerke werden von University of the West Indies ausgestellt?", "Welche Kunstwerke wurden von University of the West Indies ausgestellt?", "Welches Kunstwerk wird von University of the West Indies ausgestellt?", "Welches Kunstwerk wurde von University of the West Indies ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/University_of_the_West_Indies>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Pera-Museum ausgestellt?", "Was wurde von Pera-Museum ausgestellt?", "Welche Kunstwerke werden von Pera-Museum ausgestellt?", "Welche Kunstwerke wurden von Pera-Museum ausgestellt?", "Welches Kunstwerk wird von Pera-Museum ausgestellt?", "Welches Kunstwerk wurde von Pera-Museum ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Pera_Museum>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Villa Stuck ausgestellt?", "Was wurde von Villa Stuck ausgestellt?", "Welche Kunstwerke werden von Villa Stuck ausgestellt?", "Welche Kunstwerke wurden von Villa Stuck ausgestellt?", "Welches Kunstwerk wird von Villa Stuck ausgestellt?", "Welches Kunstwerk wurde von Villa Stuck ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Villa_Stuck>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Konservatorenpalast ausgestellt?", "Was wurde von Konservatorenpalast ausgestellt?", "Welche Kunstwerke werden von Konservatorenpalast ausgestellt?", "Welche Kunstwerke wurden von Konservatorenpalast ausgestellt?", "Welches Kunstwerk wird von Konservatorenpalast ausgestellt?", "Welches Kunstwerk wurde von Konservatorenpalast ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Palazzo_dei_Conservatori>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Albertina (Wien) ausgestellt?", "Was wurde von Albertina (Wien) ausgestellt?", "Welche Kunstwerke werden von Albertina (Wien) ausgestellt?", "Welche Kunstwerke wurden von Albertina (Wien) ausgestellt?", "Welches Kunstwerk wird von Albertina (Wien) ausgestellt?", "Welches Kunstwerk wurde von Albertina (Wien) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Albertina>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Albright-Knox Art Gallery ausgestellt?", "Was wurde von Albright-Knox Art Gallery ausgestellt?", "Welche Kunstwerke werden von Albright-Knox Art Gallery ausgestellt?", "Welche Kunstwerke wurden von Albright-Knox Art Gallery ausgestellt?", "Welches Kunstwerk wird von Albright-Knox Art Gallery ausgestellt?", "Welches Kunstwerk wurde von Albright-Knox Art Gallery ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Albright–Knox_Art_Gallery>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Alnwick Castle ausgestellt?", "Was wurde von Alnwick Castle ausgestellt?", "Welche Kunstwerke werden von Alnwick Castle ausgestellt?", "Welche Kunstwerke wurden von Alnwick Castle ausgestellt?", "Welches Kunstwerk wird von Alnwick Castle ausgestellt?", "Welches Kunstwerk wurde von Alnwick Castle ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Alnwick_Castle>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Alte Nationalgalerie ausgestellt?", "Was wurde von Alte Nationalgalerie ausgestellt?", "Welche Kunstwerke werden von Alte Nationalgalerie ausgestellt?", "Welche Kunstwerke wurden von Alte Nationalgalerie ausgestellt?", "Welches Kunstwerk wird von Alte Nationalgalerie ausgestellt?", "Welches Kunstwerk wurde von Alte Nationalgalerie ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Alte_Nationalgalerie>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Alte Pinakothek ausgestellt?", "Was wurde von Alte Pinakothek ausgestellt?", "Welche Kunstwerke werden von Alte Pinakothek ausgestellt?", "Welche Kunstwerke wurden von Alte Pinakothek ausgestellt?", "Welches Kunstwerk wird von Alte Pinakothek ausgestellt?", "Welches Kunstwerk wurde von Alte Pinakothek ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Alte_Pinakothek>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "7",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Sophienkathedrale (Nowgorod) ausgestellt?", "Was wurde von Sophienkathedrale (Nowgorod) ausgestellt?", "Welche Kunstwerke werden von Sophienkathedrale (Nowgorod) ausgestellt?", "Welche Kunstwerke wurden von Sophienkathedrale (Nowgorod) ausgestellt?", "Welches Kunstwerk wird von Sophienkathedrale (Nowgorod) ausgestellt?", "Welches Kunstwerk wurde von Sophienkathedrale (Nowgorod) ausgestellt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Cathedral_of_St._Sophia,_Novgorod>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucas Black gespielt?", "Welche fiktiven Charaktere wurden von Lucas Black gespielt?", "Welcher fiktive Charakter wird von Lucas Black gespielt?", "Welcher fiktive Charakter wurde von Lucas Black gespielt?", "Wer wird von Lucas Black gespielt?", "Wer wurde von Lucas Black gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucas_Black>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucas Grabeel gespielt?", "Welche fiktiven Charaktere wurden von Lucas Grabeel gespielt?", "Welcher fiktive Charakter wird von Lucas Grabeel gespielt?", "Welcher fiktive Charakter wurde von Lucas Grabeel gespielt?", "Wer wird von Lucas Grabeel gespielt?", "Wer wurde von Lucas Grabeel gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucas_Grabeel>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucas Jade Zumann gespielt?", "Welche fiktiven Charaktere wurden von Lucas Jade Zumann gespielt?", "Welcher fiktive Charakter wird von Lucas Jade Zumann gespielt?", "Welcher fiktive Charakter wurde von Lucas Jade Zumann gespielt?", "Wer wird von Lucas Jade Zumann gespielt?", "Wer wurde von Lucas Jade Zumann gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucas_Jade_Zumann>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucas Till gespielt?", "Welche fiktiven Charaktere wurden von Lucas Till gespielt?", "Welcher fiktive Charakter wird von Lucas Till gespielt?", "Welcher fiktive Charakter wurde von Lucas Till gespielt?", "Wer wird von Lucas Till gespielt?", "Wer wurde von Lucas Till gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucas_Till>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucian Msamati gespielt?", "Welche fiktiven Charaktere wurden von Lucian Msamati gespielt?", "Welcher fiktive Charakter wird von Lucian Msamati gespielt?", "Welcher fiktive Charakter wurde von Lucian Msamati gespielt?", "Wer wird von Lucian Msamati gespielt?", "Wer wurde von Lucian Msamati gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucian_Msamati>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Luciana Carro gespielt?", "Welche fiktiven Charaktere wurden von Luciana Carro gespielt?", "Welcher fiktive Charakter wird von Luciana Carro gespielt?", "Welcher fiktive Charakter wurde von Luciana Carro gespielt?", "Wer wird von Luciana Carro gespielt?", "Wer wurde von Luciana Carro gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luciana_Carro>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucille Ball gespielt?", "Welche fiktiven Charaktere wurden von Lucille Ball gespielt?", "Welcher fiktive Charakter wird von Lucille Ball gespielt?", "Welcher fiktive Charakter wurde von Lucille Ball gespielt?", "Wer wird von Lucille Ball gespielt?", "Wer wurde von Lucille Ball gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucille_Ball>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucy-Jo Hudson gespielt?", "Welche fiktiven Charaktere wurden von Lucy-Jo Hudson gespielt?", "Welcher fiktive Charakter wird von Lucy-Jo Hudson gespielt?", "Welcher fiktive Charakter wurde von Lucy-Jo Hudson gespielt?", "Wer wird von Lucy-Jo Hudson gespielt?", "Wer wurde von Lucy-Jo Hudson gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucy-Jo_Hudson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucy Brown gespielt?", "Welche fiktiven Charaktere wurden von Lucy Brown gespielt?", "Welcher fiktive Charakter wird von Lucy Brown gespielt?", "Welcher fiktive Charakter wurde von Lucy Brown gespielt?", "Wer wird von Lucy Brown gespielt?", "Wer wurde von Lucy Brown gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucy_Brown>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucy Davis (Schauspielerin) gespielt?", "Welche fiktiven Charaktere wurden von Lucy Davis (Schauspielerin) gespielt?", "Welcher fiktive Charakter wird von Lucy Davis (Schauspielerin) gespielt?", "Welcher fiktive Charakter wurde von Lucy Davis (Schauspielerin) gespielt?", "Wer wird von Lucy Davis (Schauspielerin) gespielt?", "Wer wurde von Lucy Davis (Schauspielerin) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucy_Davis>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucy Gaskell gespielt?", "Welche fiktiven Charaktere wurden von Lucy Gaskell gespielt?", "Welcher fiktive Charakter wird von Lucy Gaskell gespielt?", "Welcher fiktive Charakter wurde von Lucy Gaskell gespielt?", "Wer wird von Lucy Gaskell gespielt?", "Wer wurde von Lucy Gaskell gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucy_Gaskell>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucy Griffiths (Schauspielerin, 1986) gespielt?", "Welche fiktiven Charaktere wurden von Lucy Griffiths (Schauspielerin, 1986) gespielt?", "Welcher fiktive Charakter wird von Lucy Griffiths (Schauspielerin, 1986) gespielt?", "Welcher fiktive Charakter wurde von Lucy Griffiths (Schauspielerin, 1986) gespielt?", "Wer wird von Lucy Griffiths (Schauspielerin, 1986) gespielt?", "Wer wurde von Lucy Griffiths (Schauspielerin, 1986) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucy_Griffiths_(actress,_born_1986)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucy Hale gespielt?", "Welche fiktiven Charaktere wurden von Lucy Hale gespielt?", "Welcher fiktive Charakter wird von Lucy Hale gespielt?", "Welcher fiktive Charakter wurde von Lucy Hale gespielt?", "Wer wird von Lucy Hale gespielt?", "Wer wurde von Lucy Hale gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucy_Hale>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucy Lawless gespielt?", "Welche fiktiven Charaktere wurden von Lucy Lawless gespielt?", "Welcher fiktive Charakter wird von Lucy Lawless gespielt?", "Welcher fiktive Charakter wurde von Lucy Lawless gespielt?", "Wer wird von Lucy Lawless gespielt?", "Wer wurde von Lucy Lawless gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucy_Lawless>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lucy Liu gespielt?", "Welche fiktiven Charaktere wurden von Lucy Liu gespielt?", "Welcher fiktive Charakter wird von Lucy Liu gespielt?", "Welcher fiktive Charakter wurde von Lucy Liu gespielt?", "Wer wird von Lucy Liu gespielt?", "Wer wurde von Lucy Liu gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lucy_Liu>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Ludi Lin gespielt?", "Welche fiktiven Charaktere wurden von Ludi Lin gespielt?", "Welcher fiktive Charakter wird von Ludi Lin gespielt?", "Welcher fiktive Charakter wurde von Ludi Lin gespielt?", "Wer wird von Ludi Lin gespielt?", "Wer wurde von Ludi Lin gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ludi_Lin>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Ludivine Sagnier gespielt?", "Welche fiktiven Charaktere wurden von Ludivine Sagnier gespielt?", "Welcher fiktive Charakter wird von Ludivine Sagnier gespielt?", "Welcher fiktive Charakter wurde von Ludivine Sagnier gespielt?", "Wer wird von Ludivine Sagnier gespielt?", "Wer wurde von Ludivine Sagnier gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ludivine_Sagnier>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Luke Evans gespielt?", "Welche fiktiven Charaktere wurden von Luke Evans gespielt?", "Welcher fiktive Charakter wird von Luke Evans gespielt?", "Welcher fiktive Charakter wurde von Luke Evans gespielt?", "Wer wird von Luke Evans gespielt?", "Wer wurde von Luke Evans gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Evans>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Luke Kleintank gespielt?", "Welche fiktiven Charaktere wurden von Luke Kleintank gespielt?", "Welcher fiktive Charakter wird von Luke Kleintank gespielt?", "Welcher fiktive Charakter wurde von Luke Kleintank gespielt?", "Wer wird von Luke Kleintank gespielt?", "Wer wurde von Luke Kleintank gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Kleintank>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Luke Macfarlane gespielt?", "Welche fiktiven Charaktere wurden von Luke Macfarlane gespielt?", "Welcher fiktive Charakter wird von Luke Macfarlane gespielt?", "Welcher fiktive Charakter wurde von Luke Macfarlane gespielt?", "Wer wird von Luke Macfarlane gespielt?", "Wer wurde von Luke Macfarlane gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Macfarlane>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Luke Mitchell gespielt?", "Welche fiktiven Charaktere wurden von Luke Mitchell gespielt?", "Welcher fiktive Charakter wird von Luke Mitchell gespielt?", "Welcher fiktive Charakter wurde von Luke Mitchell gespielt?", "Wer wird von Luke Mitchell gespielt?", "Wer wurde von Luke Mitchell gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Mitchell>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Luke Pasqualino gespielt?", "Welche fiktiven Charaktere wurden von Luke Pasqualino gespielt?", "Welcher fiktive Charakter wird von Luke Pasqualino gespielt?", "Welcher fiktive Charakter wurde von Luke Pasqualino gespielt?", "Wer wird von Luke Pasqualino gespielt?", "Wer wurde von Luke Pasqualino gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Pasqualino>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Luke Perry gespielt?", "Welche fiktiven Charaktere wurden von Luke Perry gespielt?", "Welcher fiktive Charakter wird von Luke Perry gespielt?", "Welcher fiktive Charakter wurde von Luke Perry gespielt?", "Wer wird von Luke Perry gespielt?", "Wer wurde von Luke Perry gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Perry>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Luke Roberts (Schauspieler) gespielt?", "Welche fiktiven Charaktere wurden von Luke Roberts (Schauspieler) gespielt?", "Welcher fiktive Charakter wird von Luke Roberts (Schauspieler) gespielt?", "Welcher fiktive Charakter wurde von Luke Roberts (Schauspieler) gespielt?", "Wer wird von Luke Roberts (Schauspieler) gespielt?", "Wer wurde von Luke Roberts (Schauspieler) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Roberts_(actor)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lulu (Sängerin) gespielt?", "Welche fiktiven Charaktere wurden von Lulu (Sängerin) gespielt?", "Welcher fiktive Charakter wird von Lulu (Sängerin) gespielt?", "Welcher fiktive Charakter wurde von Lulu (Sängerin) gespielt?", "Wer wird von Lulu (Sängerin) gespielt?", "Wer wurde von Lulu (Sängerin) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lulu_(singer)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lupita Nyong’o gespielt?", "Welche fiktiven Charaktere wurden von Lupita Nyong’o gespielt?", "Welcher fiktive Charakter wird von Lupita Nyong’o gespielt?", "Welcher fiktive Charakter wurde von Lupita Nyong’o gespielt?", "Wer wird von Lupita Nyong’o gespielt?", "Wer wurde von Lupita Nyong’o gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lupita_Nyong'o>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lydia Wilson gespielt?", "Welche fiktiven Charaktere wurden von Lydia Wilson gespielt?", "Welcher fiktive Charakter wird von Lydia Wilson gespielt?", "Welcher fiktive Charakter wurde von Lydia Wilson gespielt?", "Wer wird von Lydia Wilson gespielt?", "Wer wurde von Lydia Wilson gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lydia_Wilson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lyndsy Fonseca gespielt?", "Welche fiktiven Charaktere wurden von Lyndsy Fonseca gespielt?", "Welcher fiktive Charakter wird von Lyndsy Fonseca gespielt?", "Welcher fiktive Charakter wurde von Lyndsy Fonseca gespielt?", "Wer wird von Lyndsy Fonseca gespielt?", "Wer wurde von Lyndsy Fonseca gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lyndsy_Fonseca>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lynn Redgrave gespielt?", "Welche fiktiven Charaktere wurden von Lynn Redgrave gespielt?", "Welcher fiktive Charakter wird von Lynn Redgrave gespielt?", "Welcher fiktive Charakter wurde von Lynn Redgrave gespielt?", "Wer wird von Lynn Redgrave gespielt?", "Wer wurde von Lynn Redgrave gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lynn_Redgrave>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lynne Perrie gespielt?", "Welche fiktiven Charaktere wurden von Lynne Perrie gespielt?", "Welcher fiktive Charakter wird von Lynne Perrie gespielt?", "Welcher fiktive Charakter wurde von Lynne Perrie gespielt?", "Wer wird von Lynne Perrie gespielt?", "Wer wurde von Lynne Perrie gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lynne_Perrie>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lynsey Bartilson gespielt?", "Welche fiktiven Charaktere wurden von Lynsey Bartilson gespielt?", "Welcher fiktive Charakter wird von Lynsey Bartilson gespielt?", "Welcher fiktive Charakter wurde von Lynsey Bartilson gespielt?", "Wer wird von Lynsey Bartilson gespielt?", "Wer wurde von Lynsey Bartilson gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lynsey_Bartilson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Lysette Anthony gespielt?", "Welche fiktiven Charaktere wurden von Lysette Anthony gespielt?", "Welcher fiktive Charakter wird von Lysette Anthony gespielt?", "Welcher fiktive Charakter wurde von Lysette Anthony gespielt?", "Wer wird von Lysette Anthony gespielt?", "Wer wurde von Lysette Anthony gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lysette_Anthony>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von M*A*S*H (Fernsehserie) gespielt?", "Welche fiktiven Charaktere wurden von M*A*S*H (Fernsehserie) gespielt?", "Welcher fiktive Charakter wird von M*A*S*H (Fernsehserie) gespielt?", "Welcher fiktive Charakter wurde von M*A*S*H (Fernsehserie) gespielt?", "Wer wird von M*A*S*H (Fernsehserie) gespielt?", "Wer wurde von M*A*S*H (Fernsehserie) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/M*A*S*H_(TV_series)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von M. C. Gainey gespielt?", "Welche fiktiven Charaktere wurden von M. C. Gainey gespielt?", "Welcher fiktive Charakter wird von M. C. Gainey gespielt?", "Welcher fiktive Charakter wurde von M. C. Gainey gespielt?", "Wer wird von M. C. Gainey gespielt?", "Wer wurde von M. C. Gainey gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/M._C._Gainey>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von M. Pokora gespielt?", "Welche fiktiven Charaktere wurden von M. Pokora gespielt?", "Welcher fiktive Charakter wird von M. Pokora gespielt?", "Welcher fiktive Charakter wurde von M. Pokora gespielt?", "Wer wird von M. Pokora gespielt?", "Wer wurde von M. Pokora gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/M._Pokora>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von MASH (Film) gespielt?", "Welche fiktiven Charaktere wurden von MASH (Film) gespielt?", "Welcher fiktive Charakter wird von MASH (Film) gespielt?", "Welcher fiktive Charakter wurde von MASH (Film) gespielt?", "Wer wird von MASH (Film) gespielt?", "Wer wurde von MASH (Film) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/MASH_(film)>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von MacKenzie Mauzy gespielt?", "Welche fiktiven Charaktere wurden von MacKenzie Mauzy gespielt?", "Welcher fiktive Charakter wird von MacKenzie Mauzy gespielt?", "Welcher fiktive Charakter wurde von MacKenzie Mauzy gespielt?", "Wer wird von MacKenzie Mauzy gespielt?", "Wer wurde von MacKenzie Mauzy gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/MacKenzie_Mauzy>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Macdonald Carey gespielt?", "Welche fiktiven Charaktere wurden von Macdonald Carey gespielt?", "Welcher fiktive Charakter wird von Macdonald Carey gespielt?", "Welcher fiktive Charakter wurde von Macdonald Carey gespielt?", "Wer wird von Macdonald Carey gespielt?", "Wer wurde von Macdonald Carey gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Macdonald_Carey>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Mackenzie Crook gespielt?", "Welche fiktiven Charaktere wurden von Mackenzie Crook gespielt?", "Welcher fiktive Charakter wird von Mackenzie Crook gespielt?", "Welcher fiktive Charakter wurde von Mackenzie Crook gespielt?", "Wer wird von Mackenzie Crook gespielt?", "Wer wurde von Mackenzie Crook gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mackenzie_Crook>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Mad Max II – Der Vollstrecker gespielt?", "Welche fiktiven Charaktere wurden von Mad Max II – Der Vollstrecker gespielt?", "Welcher fiktive Charakter wird von Mad Max II – Der Vollstrecker gespielt?", "Welcher fiktive Charakter wurde von Mad Max II – Der Vollstrecker gespielt?", "Wer wird von Mad Max II – Der Vollstrecker gespielt?", "Wer wurde von Mad Max II – Der Vollstrecker gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mad_Max_2>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Mad Max – Jenseits der Donnerkuppel gespielt?", "Welche fiktiven Charaktere wurden von Mad Max – Jenseits der Donnerkuppel gespielt?", "Welcher fiktive Charakter wird von Mad Max – Jenseits der Donnerkuppel gespielt?", "Welcher fiktive Charakter wurde von Mad Max – Jenseits der Donnerkuppel gespielt?", "Wer wird von Mad Max – Jenseits der Donnerkuppel gespielt?", "Wer wurde von Mad Max – Jenseits der Donnerkuppel gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mad_Max_Beyond_Thunderdome>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Madelaine Petsch gespielt?", "Welche fiktiven Charaktere wurden von Madelaine Petsch gespielt?", "Welcher fiktive Charakter wird von Madelaine Petsch gespielt?", "Welcher fiktive Charakter wurde von Madelaine Petsch gespielt?", "Wer wird von Madelaine Petsch gespielt?", "Wer wurde von Madelaine Petsch gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Madelaine_Petsch>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Madeleine West gespielt?", "Welche fiktiven Charaktere wurden von Madeleine West gespielt?", "Welcher fiktive Charakter wird von Madeleine West gespielt?", "Welcher fiktive Charakter wurde von Madeleine West gespielt?", "Wer wird von Madeleine West gespielt?", "Wer wurde von Madeleine West gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Madeleine_West>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Madeline Kahn gespielt?", "Welche fiktiven Charaktere wurden von Madeline Kahn gespielt?", "Welcher fiktive Charakter wird von Madeline Kahn gespielt?", "Welcher fiktive Charakter wurde von Madeline Kahn gespielt?", "Wer wird von Madeline Kahn gespielt?", "Wer wurde von Madeline Kahn gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Madeline_Kahn>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Madhuri Dixit gespielt?", "Welche fiktiven Charaktere wurden von Madhuri Dixit gespielt?", "Welcher fiktive Charakter wird von Madhuri Dixit gespielt?", "Welcher fiktive Charakter wurde von Madhuri Dixit gespielt?", "Wer wird von Madhuri Dixit gespielt?", "Wer wurde von Madhuri Dixit gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Madhuri_Dixit>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Madison Davenport gespielt?", "Welche fiktiven Charaktere wurden von Madison Davenport gespielt?", "Welcher fiktive Charakter wird von Madison Davenport gespielt?", "Welcher fiktive Charakter wurde von Madison Davenport gespielt?", "Wer wird von Madison Davenport gespielt?", "Wer wurde von Madison Davenport gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Madison_Davenport>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Madison Square Garden gespielt?", "Welche fiktiven Charaktere wurden von Madison Square Garden gespielt?", "Welcher fiktive Charakter wird von Madison Square Garden gespielt?", "Welcher fiktive Charakter wurde von Madison Square Garden gespielt?", "Wer wird von Madison Square Garden gespielt?", "Wer wurde von Madison Square Garden gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Madison_Square_Garden>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Mads Mikkelsen gespielt?", "Welche fiktiven Charaktere wurden von Mads Mikkelsen gespielt?", "Welcher fiktive Charakter wird von Mads Mikkelsen gespielt?", "Welcher fiktive Charakter wurde von Mads Mikkelsen gespielt?", "Wer wird von Mads Mikkelsen gespielt?", "Wer wurde von Mads Mikkelsen gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mads_Mikkelsen>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Mae Clarke gespielt?", "Welche fiktiven Charaktere wurden von Mae Clarke gespielt?", "Welcher fiktive Charakter wird von Mae Clarke gespielt?", "Welcher fiktive Charakter wurde von Mae Clarke gespielt?", "Wer wird von Mae Clarke gespielt?", "Wer wurde von Mae Clarke gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mae_Clarke>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Mae Questel gespielt?", "Welche fiktiven Charaktere wurden von Mae Questel gespielt?", "Welcher fiktive Charakter wird von Mae Questel gespielt?", "Welcher fiktive Charakter wurde von Mae Questel gespielt?", "Wer wird von Mae Questel gespielt?", "Wer wurde von Mae Questel gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mae_Questel>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Magda Szubanski gespielt?", "Welche fiktiven Charaktere wurden von Magda Szubanski gespielt?", "Welcher fiktive Charakter wird von Magda Szubanski gespielt?", "Welcher fiktive Charakter wurde von Magda Szubanski gespielt?", "Wer wird von Magda Szubanski gespielt?", "Wer wurde von Magda Szubanski gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Magda_Szubanski>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Maggie Grace gespielt?", "Welche fiktiven Charaktere wurden von Maggie Grace gespielt?", "Welcher fiktive Charakter wird von Maggie Grace gespielt?", "Welcher fiktive Charakter wurde von Maggie Grace gespielt?", "Wer wird von Maggie Grace gespielt?", "Wer wurde von Maggie Grace gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maggie_Grace>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Maggie Gyllenhaal gespielt?", "Welche fiktiven Charaktere wurden von Maggie Gyllenhaal gespielt?", "Welcher fiktive Charakter wird von Maggie Gyllenhaal gespielt?", "Welcher fiktive Charakter wurde von Maggie Gyllenhaal gespielt?", "Wer wird von Maggie Gyllenhaal gespielt?", "Wer wurde von Maggie Gyllenhaal gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maggie_Gyllenhaal>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Maggie Lawson gespielt?", "Welche fiktiven Charaktere wurden von Maggie Lawson gespielt?", "Welcher fiktive Charakter wird von Maggie Lawson gespielt?", "Welcher fiktive Charakter wurde von Maggie Lawson gespielt?", "Wer wird von Maggie Lawson gespielt?", "Wer wurde von Maggie Lawson gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maggie_Lawson>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Maggie Q gespielt?", "Welche fiktiven Charaktere wurden von Maggie Q gespielt?", "Welcher fiktive Charakter wird von Maggie Q gespielt?", "Welcher fiktive Charakter wurde von Maggie Q gespielt?", "Wer wird von Maggie Q gespielt?", "Wer wurde von Maggie Q gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maggie_Q>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Maggie Smith gespielt?", "Welche fiktiven Charaktere wurden von Maggie Smith gespielt?", "Welcher fiktive Charakter wird von Maggie Smith gespielt?", "Welcher fiktive Charakter wurde von Maggie Smith gespielt?", "Wer wird von Maggie Smith gespielt?", "Wer wurde von Maggie Smith gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maggie_Smith>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Achille Fould gespielt?", "Welche fiktiven Charaktere wurden von Achille Fould gespielt?", "Welcher fiktive Charakter wird von Achille Fould gespielt?", "Welcher fiktive Charakter wurde von Achille Fould gespielt?", "Wer wird von Achille Fould gespielt?", "Wer wurde von Achille Fould gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Adolf Pichler gespielt?", "Welche fiktiven Charaktere wurden von Adolf Pichler gespielt?", "Welcher fiktive Charakter wird von Adolf Pichler gespielt?", "Welcher fiktive Charakter wurde von Adolf Pichler gespielt?", "Wer wird von Adolf Pichler gespielt?", "Wer wurde von Adolf Pichler gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Adolf Sandberger gespielt?", "Welche fiktiven Charaktere wurden von Adolf Sandberger gespielt?", "Welcher fiktive Charakter wird von Adolf Sandberger gespielt?", "Welcher fiktive Charakter wurde von Adolf Sandberger gespielt?", "Wer wird von Adolf Sandberger gespielt?", "Wer wurde von Adolf Sandberger gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Adolphe Noël des Vergers gespielt?", "Welche fiktiven Charaktere wurden von Adolphe Noël des Vergers gespielt?", "Welcher fiktive Charakter wird von Adolphe Noël des Vergers gespielt?", "Welcher fiktive Charakter wurde von Adolphe Noël des Vergers gespielt?", "Wer wird von Adolphe Noël des Vergers gespielt?", "Wer wurde von Adolphe Noël des Vergers gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Adolphe Sax gespielt?", "Welche fiktiven Charaktere wurden von Adolphe Sax gespielt?", "Welcher fiktive Charakter wird von Adolphe Sax gespielt?", "Welcher fiktive Charakter wurde von Adolphe Sax gespielt?", "Wer wird von Adolphe Sax gespielt?", "Wer wurde von Adolphe Sax gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alan Garner gespielt?", "Welche fiktiven Charaktere wurden von Alan Garner gespielt?", "Welcher fiktive Charakter wird von Alan Garner gespielt?", "Welcher fiktive Charakter wurde von Alan Garner gespielt?", "Wer wird von Alan Garner gespielt?", "Wer wurde von Alan Garner gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Albert Schreiner (Geologe) gespielt?", "Welche fiktiven Charaktere wurden von Albert Schreiner (Geologe) gespielt?", "Welcher fiktive Charakter wird von Albert Schreiner (Geologe) gespielt?", "Welcher fiktive Charakter wurde von Albert Schreiner (Geologe) gespielt?", "Wer wird von Albert Schreiner (Geologe) gespielt?", "Wer wurde von Albert Schreiner (Geologe) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alexander Haggerty Krappe gespielt?", "Welche fiktiven Charaktere wurden von Alexander Haggerty Krappe gespielt?", "Welcher fiktive Charakter wird von Alexander Haggerty Krappe gespielt?", "Welcher fiktive Charakter wurde von Alexander Haggerty Krappe gespielt?", "Wer wird von Alexander Haggerty Krappe gespielt?", "Wer wurde von Alexander Haggerty Krappe gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alexandra von Dänemark gespielt?", "Welche fiktiven Charaktere wurden von Alexandra von Dänemark gespielt?", "Welcher fiktive Charakter wird von Alexandra von Dänemark gespielt?", "Welcher fiktive Charakter wurde von Alexandra von Dänemark gespielt?", "Wer wird von Alexandra von Dänemark gespielt?", "Wer wurde von Alexandra von Dänemark gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alexei Nikolajewitsch Tolstoi gespielt?", "Welche fiktiven Charaktere wurden von Alexei Nikolajewitsch Tolstoi gespielt?", "Welcher fiktive Charakter wird von Alexei Nikolajewitsch Tolstoi gespielt?", "Welcher fiktive Charakter wurde von Alexei Nikolajewitsch Tolstoi gespielt?", "Wer wird von Alexei Nikolajewitsch Tolstoi gespielt?", "Wer wurde von Alexei Nikolajewitsch Tolstoi gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alfred Francis Přibram gespielt?", "Welche fiktiven Charaktere wurden von Alfred Francis Přibram gespielt?", "Welcher fiktive Charakter wird von Alfred Francis Přibram gespielt?", "Welcher fiktive Charakter wurde von Alfred Francis Přibram gespielt?", "Wer wird von Alfred Francis Přibram gespielt?", "Wer wurde von Alfred Francis Přibram gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alfred Hillebrandt gespielt?", "Welche fiktiven Charaktere wurden von Alfred Hillebrandt gespielt?", "Welcher fiktive Charakter wird von Alfred Hillebrandt gespielt?", "Welcher fiktive Charakter wurde von Alfred Hillebrandt gespielt?", "Wer wird von Alfred Hillebrandt gespielt?", "Wer wurde von Alfred Hillebrandt gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alfred M. Freudenthal gespielt?", "Welche fiktiven Charaktere wurden von Alfred M. Freudenthal gespielt?", "Welcher fiktive Charakter wird von Alfred M. Freudenthal gespielt?", "Welcher fiktive Charakter wurde von Alfred M. Freudenthal gespielt?", "Wer wird von Alfred M. Freudenthal gespielt?", "Wer wurde von Alfred M. Freudenthal gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alfredo Jaar gespielt?", "Welche fiktiven Charaktere wurden von Alfredo Jaar gespielt?", "Welcher fiktive Charakter wird von Alfredo Jaar gespielt?", "Welcher fiktive Charakter wurde von Alfredo Jaar gespielt?", "Wer wird von Alfredo Jaar gespielt?", "Wer wurde von Alfredo Jaar gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Alphonse Jeannet gespielt?", "Welche fiktiven Charaktere wurden von Alphonse Jeannet gespielt?", "Welcher fiktive Charakter wird von Alphonse Jeannet gespielt?", "Welcher fiktive Charakter wurde von Alphonse Jeannet gespielt?", "Wer wird von Alphonse Jeannet gespielt?", "Wer wurde von Alphonse Jeannet gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Amanda Brugel gespielt?", "Welche fiktiven Charaktere wurden von Amanda Brugel gespielt?", "Welcher fiktive Charakter wird von Amanda Brugel gespielt?", "Welcher fiktive Charakter wurde von Amanda Brugel gespielt?", "Wer wird von Amanda Brugel gespielt?", "Wer wurde von Amanda Brugel gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Andreas Cellarius (Astronom) gespielt?", "Welche fiktiven Charaktere wurden von Andreas Cellarius (Astronom) gespielt?", "Welcher fiktive Charakter wird von Andreas Cellarius (Astronom) gespielt?", "Welcher fiktive Charakter wurde von Andreas Cellarius (Astronom) gespielt?", "Wer wird von Andreas Cellarius (Astronom) gespielt?", "Wer wurde von Andreas Cellarius (Astronom) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von André Masséna gespielt?", "Welche fiktiven Charaktere wurden von André Masséna gespielt?", "Welcher fiktive Charakter wird von André Masséna gespielt?", "Welcher fiktive Charakter wurde von André Masséna gespielt?", "Wer wird von André Masséna gespielt?", "Wer wurde von André Masséna gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Annedore Kleist gespielt?", "Welche fiktiven Charaktere wurden von Annedore Kleist gespielt?", "Welcher fiktive Charakter wird von Annedore Kleist gespielt?", "Welcher fiktive Charakter wurde von Annedore Kleist gespielt?", "Wer wird von Annedore Kleist gespielt?", "Wer wurde von Annedore Kleist gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Anton Seder gespielt?", "Welche fiktiven Charaktere wurden von Anton Seder gespielt?", "Welcher fiktive Charakter wird von Anton Seder gespielt?", "Welcher fiktive Charakter wurde von Anton Seder gespielt?", "Wer wird von Anton Seder gespielt?", "Wer wurde von Anton Seder gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Antonello Manacorda gespielt?", "Welche fiktiven Charaktere wurden von Antonello Manacorda gespielt?", "Welcher fiktive Charakter wird von Antonello Manacorda gespielt?", "Welcher fiktive Charakter wurde von Antonello Manacorda gespielt?", "Wer wird von Antonello Manacorda gespielt?", "Wer wurde von Antonello Manacorda gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Antonio Orbe gespielt?", "Welche fiktiven Charaktere wurden von Antonio Orbe gespielt?", "Welcher fiktive Charakter wird von Antonio Orbe gespielt?", "Welcher fiktive Charakter wurde von Antonio Orbe gespielt?", "Wer wird von Antonio Orbe gespielt?", "Wer wurde von Antonio Orbe gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Armand de Caulaincourt gespielt?", "Welche fiktiven Charaktere wurden von Armand de Caulaincourt gespielt?", "Welcher fiktive Charakter wird von Armand de Caulaincourt gespielt?", "Welcher fiktive Charakter wurde von Armand de Caulaincourt gespielt?", "Wer wird von Armand de Caulaincourt gespielt?", "Wer wurde von Armand de Caulaincourt gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von August Stöber gespielt?", "Welche fiktiven Charaktere wurden von August Stöber gespielt?", "Welcher fiktive Charakter wird von August Stöber gespielt?", "Welcher fiktive Charakter wurde von August Stöber gespielt?", "Wer wird von August Stöber gespielt?", "Wer wurde von August Stöber gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Baldus de Ubaldis gespielt?", "Welche fiktiven Charaktere wurden von Baldus de Ubaldis gespielt?", "Welcher fiktive Charakter wird von Baldus de Ubaldis gespielt?", "Welcher fiktive Charakter wurde von Baldus de Ubaldis gespielt?", "Wer wird von Baldus de Ubaldis gespielt?", "Wer wurde von Baldus de Ubaldis gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Barbara Hammer (Filmemacherin) gespielt?", "Welche fiktiven Charaktere wurden von Barbara Hammer (Filmemacherin) gespielt?", "Welcher fiktive Charakter wird von Barbara Hammer (Filmemacherin) gespielt?", "Welcher fiktive Charakter wurde von Barbara Hammer (Filmemacherin) gespielt?", "Wer wird von Barbara Hammer (Filmemacherin) gespielt?", "Wer wurde von Barbara Hammer (Filmemacherin) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Barbara Wolff (Fotografin) gespielt?", "Welche fiktiven Charaktere wurden von Barbara Wolff (Fotografin) gespielt?", "Welcher fiktive Charakter wird von Barbara Wolff (Fotografin) gespielt?", "Welcher fiktive Charakter wurde von Barbara Wolff (Fotografin) gespielt?", "Wer wird von Barbara Wolff (Fotografin) gespielt?", "Wer wurde von Barbara Wolff (Fotografin) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Bartel Leendert van der Waerden gespielt?", "Welche fiktiven Charaktere wurden von Bartel Leendert van der Waerden gespielt?", "Welcher fiktive Charakter wird von Bartel Leendert van der Waerden gespielt?", "Welcher fiktive Charakter wurde von Bartel Leendert van der Waerden gespielt?", "Wer wird von Bartel Leendert van der Waerden gespielt?", "Wer wurde von Bartel Leendert van der Waerden gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Benny Barth gespielt?", "Welche fiktiven Charaktere wurden von Benny Barth gespielt?", "Welcher fiktive Charakter wird von Benny Barth gespielt?", "Welcher fiktive Charakter wurde von Benny Barth gespielt?", "Wer wird von Benny Barth gespielt?", "Wer wurde von Benny Barth gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Bernhard Sigmund Schultze gespielt?", "Welche fiktiven Charaktere wurden von Bernhard Sigmund Schultze gespielt?", "Welcher fiktive Charakter wird von Bernhard Sigmund Schultze gespielt?", "Welcher fiktive Charakter wurde von Bernhard Sigmund Schultze gespielt?", "Wer wird von Bernhard Sigmund Schultze gespielt?", "Wer wurde von Bernhard Sigmund Schultze gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Beth Carvalho gespielt?", "Welche fiktiven Charaktere wurden von Beth Carvalho gespielt?", "Welcher fiktive Charakter wird von Beth Carvalho gespielt?", "Welcher fiktive Charakter wurde von Beth Carvalho gespielt?", "Wer wird von Beth Carvalho gespielt?", "Wer wurde von Beth Carvalho gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Bora Ćosić gespielt?", "Welche fiktiven Charaktere wurden von Bora Ćosić gespielt?", "Welcher fiktive Charakter wird von Bora Ćosić gespielt?", "Welcher fiktive Charakter wurde von Bora Ćosić gespielt?", "Wer wird von Bora Ćosić gespielt?", "Wer wurde von Bora Ćosić gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Bruno Nicolai gespielt?", "Welche fiktiven Charaktere wurden von Bruno Nicolai gespielt?", "Welcher fiktive Charakter wird von Bruno Nicolai gespielt?", "Welcher fiktive Charakter wurde von Bruno Nicolai gespielt?", "Wer wird von Bruno Nicolai gespielt?", "Wer wurde von Bruno Nicolai gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Carlo Pellion di Persano gespielt?", "Welche fiktiven Charaktere wurden von Carlo Pellion di Persano gespielt?", "Welcher fiktive Charakter wird von Carlo Pellion di Persano gespielt?", "Welcher fiktive Charakter wurde von Carlo Pellion di Persano gespielt?", "Wer wird von Carlo Pellion di Persano gespielt?", "Wer wurde von Carlo Pellion di Persano gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Carlos Lyra gespielt?", "Welche fiktiven Charaktere wurden von Carlos Lyra gespielt?", "Welcher fiktive Charakter wird von Carlos Lyra gespielt?", "Welcher fiktive Charakter wurde von Carlos Lyra gespielt?", "Wer wird von Carlos Lyra gespielt?", "Wer wurde von Carlos Lyra gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Cate Shortland gespielt?", "Welche fiktiven Charaktere wurden von Cate Shortland gespielt?", "Welcher fiktive Charakter wird von Cate Shortland gespielt?", "Welcher fiktive Charakter wurde von Cate Shortland gespielt?", "Wer wird von Cate Shortland gespielt?", "Wer wurde von Cate Shortland gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Charles Edmond Kayser gespielt?", "Welche fiktiven Charaktere wurden von Charles Edmond Kayser gespielt?", "Welcher fiktive Charakter wird von Charles Edmond Kayser gespielt?", "Welcher fiktive Charakter wurde von Charles Edmond Kayser gespielt?", "Wer wird von Charles Edmond Kayser gespielt?", "Wer wurde von Charles Edmond Kayser gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Charles Gounod gespielt?", "Welche fiktiven Charaktere wurden von Charles Gounod gespielt?", "Welcher fiktive Charakter wird von Charles Gounod gespielt?", "Welcher fiktive Charakter wurde von Charles Gounod gespielt?", "Wer wird von Charles Gounod gespielt?", "Wer wurde von Charles Gounod gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Charles Klein (Regisseur) gespielt?", "Welche fiktiven Charaktere wurden von Charles Klein (Regisseur) gespielt?", "Welcher fiktive Charakter wird von Charles Klein (Regisseur) gespielt?", "Welcher fiktive Charakter wurde von Charles Klein (Regisseur) gespielt?", "Wer wird von Charles Klein (Regisseur) gespielt?", "Wer wurde von Charles Klein (Regisseur) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Charles Louis Fleury Panckoucke gespielt?", "Welche fiktiven Charaktere wurden von Charles Louis Fleury Panckoucke gespielt?", "Welcher fiktive Charakter wird von Charles Louis Fleury Panckoucke gespielt?", "Welcher fiktive Charakter wurde von Charles Louis Fleury Panckoucke gespielt?", "Wer wird von Charles Louis Fleury Panckoucke gespielt?", "Wer wurde von Charles Louis Fleury Panckoucke gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Charles Motte gespielt?", "Welche fiktiven Charaktere wurden von Charles Motte gespielt?", "Welcher fiktive Charakter wird von Charles Motte gespielt?", "Welcher fiktive Charakter wurde von Charles Motte gespielt?", "Wer wird von Charles Motte gespielt?", "Wer wurde von Charles Motte gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Charles Perrault gespielt?", "Welche fiktiven Charaktere wurden von Charles Perrault gespielt?", "Welcher fiktive Charakter wird von Charles Perrault gespielt?", "Welcher fiktive Charakter wurde von Charles Perrault gespielt?", "Wer wird von Charles Perrault gespielt?", "Wer wurde von Charles Perrault gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Chilperich II. gespielt?", "Welche fiktiven Charaktere wurden von Chilperich II. gespielt?", "Welcher fiktive Charakter wird von Chilperich II. gespielt?", "Welcher fiktive Charakter wurde von Chilperich II. gespielt?", "Wer wird von Chilperich II. gespielt?", "Wer wurde von Chilperich II. gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "9",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Christian Friedrich Richter gespielt?", "Welche fiktiven Charaktere wurden von Christian Friedrich Richter gespielt?", "Welcher fiktive Charakter wird von Christian Friedrich Richter gespielt?", "Welcher fiktive Charakter wurde von Christian Friedrich Richter gespielt?", "Wer wird von Christian Friedrich Richter gespielt?", "Wer wurde von Christian Friedrich Richter gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mahershala_Ali>))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfProp"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lowell Bergman geheiratet?", "Welche Person wurde von Lowell Bergman geheiratet?", "Welche Personen werden von Lowell Bergman geheiratet?", "Welche Personen wurden von Lowell Bergman geheiratet?", "Wer wird von Lowell Bergman geheiratet?", "Wer wurde von Lowell Bergman geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lowell_Bergman> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lowell Sherman geheiratet?", "Welche Person wurde von Lowell Sherman geheiratet?", "Welche Personen werden von Lowell Sherman geheiratet?", "Welche Personen wurden von Lowell Sherman geheiratet?", "Wer wird von Lowell Sherman geheiratet?", "Wer wurde von Lowell Sherman geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lowell_Sherman> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lu Chuan geheiratet?", "Welche Person wurde von Lu Chuan geheiratet?", "Welche Personen werden von Lu Chuan geheiratet?", "Welche Personen wurden von Lu Chuan geheiratet?", "Wer wird von Lu Chuan geheiratet?", "Wer wurde von Lu Chuan geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lu_Chuan> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lu Kang geheiratet?", "Welche Person wurde von Lu Kang geheiratet?", "Welche Personen werden von Lu Kang geheiratet?", "Welche Personen wurden von Lu Kang geheiratet?", "Wer wird von Lu Kang geheiratet?", "Wer wurde von Lu Kang geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lu_Kang_(Three_Kingdoms)> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lu Xun geheiratet?", "Welche Person wurde von Lu Xun geheiratet?", "Welche Personen werden von Lu Xun geheiratet?", "Welche Personen wurden von Lu Xun geheiratet?", "Wer wird von Lu Xun geheiratet?", "Wer wurde von Lu Xun geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lu_Xun> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lu Xun (Drei Reiche) geheiratet?", "Welche Person wurde von Lu Xun (Drei Reiche) geheiratet?", "Welche Personen werden von Lu Xun (Drei Reiche) geheiratet?", "Welche Personen wurden von Lu Xun (Drei Reiche) geheiratet?", "Wer wird von Lu Xun (Drei Reiche) geheiratet?", "Wer wurde von Lu Xun (Drei Reiche) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lu_Xun_(Three_Kingdoms)> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luana Patten geheiratet?", "Welche Person wurde von Luana Patten geheiratet?", "Welche Personen werden von Luana Patten geheiratet?", "Welche Personen wurden von Luana Patten geheiratet?", "Wer wird von Luana Patten geheiratet?", "Wer wurde von Luana Patten geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luana_Patten> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luc Besson geheiratet?", "Welche Person wurde von Luc Besson geheiratet?", "Welche Personen werden von Luc Besson geheiratet?", "Welche Personen wurden von Luc Besson geheiratet?", "Wer wird von Luc Besson geheiratet?", "Wer wurde von Luc Besson geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luc_Besson> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luc Tuymans geheiratet?", "Welche Person wurde von Luc Tuymans geheiratet?", "Welche Personen werden von Luc Tuymans geheiratet?", "Welche Personen wurden von Luc Tuymans geheiratet?", "Wer wird von Luc Tuymans geheiratet?", "Wer wurde von Luc Tuymans geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luc_Tuymans> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucas Monteverde geheiratet?", "Welche Person wurde von Lucas Monteverde geheiratet?", "Welche Personen werden von Lucas Monteverde geheiratet?", "Welche Personen wurden von Lucas Monteverde geheiratet?", "Wer wird von Lucas Monteverde geheiratet?", "Wer wurde von Lucas Monteverde geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucas_Monteverde> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucas Neff geheiratet?", "Welche Person wurde von Lucas Neff geheiratet?", "Welche Personen werden von Lucas Neff geheiratet?", "Welche Personen wurden von Lucas Neff geheiratet?", "Wer wird von Lucas Neff geheiratet?", "Wer wurde von Lucas Neff geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucas_Neff> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucette Lagnado geheiratet?", "Welche Person wurde von Lucette Lagnado geheiratet?", "Welche Personen werden von Lucette Lagnado geheiratet?", "Welche Personen wurden von Lucette Lagnado geheiratet?", "Wer wird von Lucette Lagnado geheiratet?", "Wer wurde von Lucette Lagnado geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucette_Lagnado> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucia Bosè geheiratet?", "Welche Person wurde von Lucia Bosè geheiratet?", "Welche Personen werden von Lucia Bosè geheiratet?", "Welche Personen wurden von Lucia Bosè geheiratet?", "Wer wird von Lucia Bosè geheiratet?", "Wer wurde von Lucia Bosè geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucia_Bosè> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucia Migliaccio geheiratet?", "Welche Person wurde von Lucia Migliaccio geheiratet?", "Welche Personen werden von Lucia Migliaccio geheiratet?", "Welche Personen wurden von Lucia Migliaccio geheiratet?", "Wer wird von Lucia Migliaccio geheiratet?", "Wer wurde von Lucia Migliaccio geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucia_Migliaccio> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucia Moholy geheiratet?", "Welche Person wurde von Lucia Moholy geheiratet?", "Welche Personen werden von Lucia Moholy geheiratet?", "Welche Personen wurden von Lucia Moholy geheiratet?", "Wer wird von Lucia Moholy geheiratet?", "Wer wurde von Lucia Moholy geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucia_Moholy> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucia Popp geheiratet?", "Welche Person wurde von Lucia Popp geheiratet?", "Welche Personen werden von Lucia Popp geheiratet?", "Welche Personen wurden von Lucia Popp geheiratet?", "Wer wird von Lucia Popp geheiratet?", "Wer wurde von Lucia Popp geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucia_Popp> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucian Freud geheiratet?", "Welche Person wurde von Lucian Freud geheiratet?", "Welche Personen werden von Lucian Freud geheiratet?", "Welche Personen wurden von Lucian Freud geheiratet?", "Wer wird von Lucian Freud geheiratet?", "Wer wurde von Lucian Freud geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucian_Freud> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luciana Castellina geheiratet?", "Welche Person wurde von Luciana Castellina geheiratet?", "Welche Personen werden von Luciana Castellina geheiratet?", "Welche Personen wurden von Luciana Castellina geheiratet?", "Wer wird von Luciana Castellina geheiratet?", "Wer wurde von Luciana Castellina geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luciana_Castellina> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luciana Paluzzi geheiratet?", "Welche Person wurde von Luciana Paluzzi geheiratet?", "Welche Personen werden von Luciana Paluzzi geheiratet?", "Welche Personen wurden von Luciana Paluzzi geheiratet?", "Wer wird von Luciana Paluzzi geheiratet?", "Wer wurde von Luciana Paluzzi geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luciana_Paluzzi> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luciana Pedraza geheiratet?", "Welche Person wurde von Luciana Pedraza geheiratet?", "Welche Personen werden von Luciana Pedraza geheiratet?", "Welche Personen wurden von Luciana Pedraza geheiratet?", "Wer wird von Luciana Pedraza geheiratet?", "Wer wurde von Luciana Pedraza geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luciana_Pedraza> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luciano Ercoli geheiratet?", "Welche Person wurde von Luciano Ercoli geheiratet?", "Welche Personen werden von Luciano Ercoli geheiratet?", "Welche Personen wurden von Luciano Ercoli geheiratet?", "Wer wird von Luciano Ercoli geheiratet?", "Wer wurde von Luciano Ercoli geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luciano_Ercoli> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luciano Martino geheiratet?", "Welche Person wurde von Luciano Martino geheiratet?", "Welche Personen werden von Luciano Martino geheiratet?", "Welche Personen wurden von Luciano Martino geheiratet?", "Wer wird von Luciano Martino geheiratet?", "Wer wurde von Luciano Martino geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luciano_Martino> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucie Arnaz geheiratet?", "Welche Person wurde von Lucie Arnaz geheiratet?", "Welche Personen werden von Lucie Arnaz geheiratet?", "Welche Personen wurden von Lucie Arnaz geheiratet?", "Wer wird von Lucie Arnaz geheiratet?", "Wer wurde von Lucie Arnaz geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucie_Arnaz> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucie Aubrac geheiratet?", "Welche Person wurde von Lucie Aubrac geheiratet?", "Welche Personen werden von Lucie Aubrac geheiratet?", "Welche Personen wurden von Lucie Aubrac geheiratet?", "Wer wird von Lucie Aubrac geheiratet?", "Wer wurde von Lucie Aubrac geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucie_Aubrac> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucie Mannheim geheiratet?", "Welche Person wurde von Lucie Mannheim geheiratet?", "Welche Personen werden von Lucie Mannheim geheiratet?", "Welche Personen wurden von Lucie Mannheim geheiratet?", "Wer wird von Lucie Mannheim geheiratet?", "Wer wurde von Lucie Mannheim geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucie_Mannheim> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucien E. Blackwell geheiratet?", "Welche Person wurde von Lucien E. Blackwell geheiratet?", "Welche Personen werden von Lucien E. Blackwell geheiratet?", "Welche Personen wurden von Lucien E. Blackwell geheiratet?", "Wer wird von Lucien E. Blackwell geheiratet?", "Wer wurde von Lucien E. Blackwell geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucien_Blackwell> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucien Bonaparte geheiratet?", "Welche Person wurde von Lucien Bonaparte geheiratet?", "Welche Personen werden von Lucien Bonaparte geheiratet?", "Welche Personen wurden von Lucien Bonaparte geheiratet?", "Wer wird von Lucien Bonaparte geheiratet?", "Wer wurde von Lucien Bonaparte geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucien_Bonaparte> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucien Pissarro geheiratet?", "Welche Person wurde von Lucien Pissarro geheiratet?", "Welche Personen werden von Lucien Pissarro geheiratet?", "Welche Personen wurden von Lucien Pissarro geheiratet?", "Wer wird von Lucien Pissarro geheiratet?", "Wer wurde von Lucien Pissarro geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucien_Pissarro> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucienne Boyer geheiratet?", "Welche Person wurde von Lucienne Boyer geheiratet?", "Welche Personen werden von Lucienne Boyer geheiratet?", "Welche Personen wurden von Lucienne Boyer geheiratet?", "Wer wird von Lucienne Boyer geheiratet?", "Wer wurde von Lucienne Boyer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucienne_Boyer> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucienne Day geheiratet?", "Welche Person wurde von Lucienne Day geheiratet?", "Welche Personen werden von Lucienne Day geheiratet?", "Welche Personen wurden von Lucienne Day geheiratet?", "Wer wird von Lucienne Day geheiratet?", "Wer wurde von Lucienne Day geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucienne_Day> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucile Browne geheiratet?", "Welche Person wurde von Lucile Browne geheiratet?", "Welche Personen werden von Lucile Browne geheiratet?", "Welche Personen wurden von Lucile Browne geheiratet?", "Wer wird von Lucile Browne geheiratet?", "Wer wurde von Lucile Browne geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucile_Browne> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucile Hadzihalilovic geheiratet?", "Welche Person wurde von Lucile Hadzihalilovic geheiratet?", "Welche Personen werden von Lucile Hadzihalilovic geheiratet?", "Welche Personen wurden von Lucile Hadzihalilovic geheiratet?", "Wer wird von Lucile Hadzihalilovic geheiratet?", "Wer wurde von Lucile Hadzihalilovic geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucile_Hadžihalilović> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucile Watson geheiratet?", "Welche Person wurde von Lucile Watson geheiratet?", "Welche Personen werden von Lucile Watson geheiratet?", "Welche Personen wurden von Lucile Watson geheiratet?", "Wer wird von Lucile Watson geheiratet?", "Wer wurde von Lucile Watson geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucile_Watson> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucilla geheiratet?", "Welche Person wurde von Lucilla geheiratet?", "Welche Personen werden von Lucilla geheiratet?", "Welche Personen wurden von Lucilla geheiratet?", "Wer wird von Lucilla geheiratet?", "Wer wurde von Lucilla geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucilla> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucille Ball geheiratet?", "Welche Person wurde von Lucille Ball geheiratet?", "Welche Personen werden von Lucille Ball geheiratet?", "Welche Personen wurden von Lucille Ball geheiratet?", "Wer wird von Lucille Ball geheiratet?", "Wer wurde von Lucille Ball geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucille_Ball> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucina da Costa Gomez-Matheeuws geheiratet?", "Welche Person wurde von Lucina da Costa Gomez-Matheeuws geheiratet?", "Welche Personen werden von Lucina da Costa Gomez-Matheeuws geheiratet?", "Welche Personen wurden von Lucina da Costa Gomez-Matheeuws geheiratet?", "Wer wird von Lucina da Costa Gomez-Matheeuws geheiratet?", "Wer wurde von Lucina da Costa Gomez-Matheeuws geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucina_da_Costa_Gomez-Matheeuws> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucinda Jenney geheiratet?", "Welche Person wurde von Lucinda Jenney geheiratet?", "Welche Personen werden von Lucinda Jenney geheiratet?", "Welche Personen wurden von Lucinda Jenney geheiratet?", "Wer wird von Lucinda Jenney geheiratet?", "Wer wurde von Lucinda Jenney geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucinda_Jenney> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucius Aelius Caesar geheiratet?", "Welche Person wurde von Lucius Aelius Caesar geheiratet?", "Welche Personen werden von Lucius Aelius Caesar geheiratet?", "Welche Personen wurden von Lucius Aelius Caesar geheiratet?", "Wer wird von Lucius Aelius Caesar geheiratet?", "Wer wurde von Lucius Aelius Caesar geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucius_Aelius> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucius Marcius Philippus (Suffektkonsul 38 v. Chr.) geheiratet?", "Welche Person wurde von Lucius Marcius Philippus (Suffektkonsul 38 v. Chr.) geheiratet?", "Welche Personen werden von Lucius Marcius Philippus (Suffektkonsul 38 v. Chr.) geheiratet?", "Welche Personen wurden von Lucius Marcius Philippus (Suffektkonsul 38 v. Chr.) geheiratet?", "Wer wird von Lucius Marcius Philippus (Suffektkonsul 38 v. Chr.) geheiratet?", "Wer wurde von Lucius Marcius Philippus (Suffektkonsul 38 v. Chr.) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucius_Marcius_Philippus_(consul_38_BC)> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucius Marcius Philippus (Konsul 56 v. Chr.) geheiratet?", "Welche Person wurde von Lucius Marcius Philippus (Konsul 56 v. Chr.) geheiratet?", "Welche Personen werden von Lucius Marcius Philippus (Konsul 56 v. Chr.) geheiratet?", "Welche Personen wurden von Lucius Marcius Philippus (Konsul 56 v. Chr.) geheiratet?", "Wer wird von Lucius Marcius Philippus (Konsul 56 v. Chr.) geheiratet?", "Wer wurde von Lucius Marcius Philippus (Konsul 56 v. Chr.) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucius_Marcius_Philippus_(consul_56_BC)> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucius Tarquinius Superbus geheiratet?", "Welche Person wurde von Lucius Tarquinius Superbus geheiratet?", "Welche Personen werden von Lucius Tarquinius Superbus geheiratet?", "Welche Personen wurden von Lucius Tarquinius Superbus geheiratet?", "Wer wird von Lucius Tarquinius Superbus geheiratet?", "Wer wurde von Lucius Tarquinius Superbus geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucius_Tarquinius_Superbus> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucius Verus geheiratet?", "Welche Person wurde von Lucius Verus geheiratet?", "Welche Personen werden von Lucius Verus geheiratet?", "Welche Personen wurden von Lucius Verus geheiratet?", "Wer wird von Lucius Verus geheiratet?", "Wer wurde von Lucius Verus geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucius_Verus> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucius Volusius Saturninus (Suffektkonsul 12 v. Chr.) geheiratet?", "Welche Person wurde von Lucius Volusius Saturninus (Suffektkonsul 12 v. Chr.) geheiratet?", "Welche Personen werden von Lucius Volusius Saturninus (Suffektkonsul 12 v. Chr.) geheiratet?", "Welche Personen wurden von Lucius Volusius Saturninus (Suffektkonsul 12 v. Chr.) geheiratet?", "Wer wird von Lucius Volusius Saturninus (Suffektkonsul 12 v. Chr.) geheiratet?", "Wer wurde von Lucius Volusius Saturninus (Suffektkonsul 12 v. Chr.) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucius_Volusius_Saturninus_(suffect_consul_12_BC)> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucretia Garfield geheiratet?", "Welche Person wurde von Lucretia Garfield geheiratet?", "Welche Personen werden von Lucretia Garfield geheiratet?", "Welche Personen wurden von Lucretia Garfield geheiratet?", "Wer wird von Lucretia Garfield geheiratet?", "Wer wurde von Lucretia Garfield geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucretia_Garfield> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucretia Mott geheiratet?", "Welche Person wurde von Lucretia Mott geheiratet?", "Welche Personen werden von Lucretia Mott geheiratet?", "Welche Personen wurden von Lucretia Mott geheiratet?", "Wer wird von Lucretia Mott geheiratet?", "Wer wurde von Lucretia Mott geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucretia_Mott> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucrezia Borgia geheiratet?", "Welche Person wurde von Lucrezia Borgia geheiratet?", "Welche Personen werden von Lucrezia Borgia geheiratet?", "Welche Personen wurden von Lucrezia Borgia geheiratet?", "Wer wird von Lucrezia Borgia geheiratet?", "Wer wurde von Lucrezia Borgia geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucrezia_Borgia> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucrezia Tornabuoni geheiratet?", "Welche Person wurde von Lucrezia Tornabuoni geheiratet?", "Welche Personen werden von Lucrezia Tornabuoni geheiratet?", "Welche Personen wurden von Lucrezia Tornabuoni geheiratet?", "Wer wird von Lucrezia Tornabuoni geheiratet?", "Wer wurde von Lucrezia Tornabuoni geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucrezia_Tornabuoni> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucrezia di Cosimo de’ Medici geheiratet?", "Welche Person wurde von Lucrezia di Cosimo de’ Medici geheiratet?", "Welche Personen werden von Lucrezia di Cosimo de’ Medici geheiratet?", "Welche Personen wurden von Lucrezia di Cosimo de’ Medici geheiratet?", "Wer wird von Lucrezia di Cosimo de’ Medici geheiratet?", "Wer wurde von Lucrezia di Cosimo de’ Medici geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucrezia_de'_Medici,_Duchess_of_Ferrara> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucrezia di Lorenzo de’ Medici geheiratet?", "Welche Person wurde von Lucrezia di Lorenzo de’ Medici geheiratet?", "Welche Personen werden von Lucrezia di Lorenzo de’ Medici geheiratet?", "Welche Personen wurden von Lucrezia di Lorenzo de’ Medici geheiratet?", "Wer wird von Lucrezia di Lorenzo de’ Medici geheiratet?", "Wer wurde von Lucrezia di Lorenzo de’ Medici geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucrezia_de'_Medici_(1470–1553)> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucius Licinius Lucullus geheiratet?", "Welche Person wurde von Lucius Licinius Lucullus geheiratet?", "Welche Personen werden von Lucius Licinius Lucullus geheiratet?", "Welche Personen wurden von Lucius Licinius Lucullus geheiratet?", "Wer wird von Lucius Licinius Lucullus geheiratet?", "Wer wurde von Lucius Licinius Lucullus geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucullus> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Christiana Duff Gordon geheiratet?", "Welche Person wurde von Lucy Christiana Duff Gordon geheiratet?", "Welche Personen werden von Lucy Christiana Duff Gordon geheiratet?", "Welche Personen wurden von Lucy Christiana Duff Gordon geheiratet?", "Wer wird von Lucy Christiana Duff Gordon geheiratet?", "Wer wurde von Lucy Christiana Duff Gordon geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy,_Lady_Duff-Gordon> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy-Jo Hudson geheiratet?", "Welche Person wurde von Lucy-Jo Hudson geheiratet?", "Welche Personen werden von Lucy-Jo Hudson geheiratet?", "Welche Personen wurden von Lucy-Jo Hudson geheiratet?", "Wer wird von Lucy-Jo Hudson geheiratet?", "Wer wurde von Lucy-Jo Hudson geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy-Jo_Hudson> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Aharish geheiratet?", "Welche Person wurde von Lucy Aharish geheiratet?", "Welche Personen werden von Lucy Aharish geheiratet?", "Welche Personen wurden von Lucy Aharish geheiratet?", "Wer wird von Lucy Aharish geheiratet?", "Wer wurde von Lucy Aharish geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Aharish> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Akhurst geheiratet?", "Welche Person wurde von Lucy Akhurst geheiratet?", "Welche Personen werden von Lucy Akhurst geheiratet?", "Welche Personen wurden von Lucy Akhurst geheiratet?", "Wer wird von Lucy Akhurst geheiratet?", "Wer wurde von Lucy Akhurst geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Akhurst> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Baxley geheiratet?", "Welche Person wurde von Lucy Baxley geheiratet?", "Welche Personen werden von Lucy Baxley geheiratet?", "Welche Personen wurden von Lucy Baxley geheiratet?", "Wer wird von Lucy Baxley geheiratet?", "Wer wurde von Lucy Baxley geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Baxley> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Brown geheiratet?", "Welche Person wurde von Lucy Brown geheiratet?", "Welche Personen werden von Lucy Brown geheiratet?", "Welche Personen wurden von Lucy Brown geheiratet?", "Wer wird von Lucy Brown geheiratet?", "Wer wurde von Lucy Brown geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Brown> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Cohu geheiratet?", "Welche Person wurde von Lucy Cohu geheiratet?", "Welche Personen werden von Lucy Cohu geheiratet?", "Welche Personen wurden von Lucy Cohu geheiratet?", "Wer wird von Lucy Cohu geheiratet?", "Wer wurde von Lucy Cohu geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Cohu> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Davis (Schauspielerin) geheiratet?", "Welche Person wurde von Lucy Davis (Schauspielerin) geheiratet?", "Welche Personen werden von Lucy Davis (Schauspielerin) geheiratet?", "Welche Personen wurden von Lucy Davis (Schauspielerin) geheiratet?", "Wer wird von Lucy Davis (Schauspielerin) geheiratet?", "Wer wurde von Lucy Davis (Schauspielerin) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Davis> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Doraine geheiratet?", "Welche Person wurde von Lucy Doraine geheiratet?", "Welche Personen werden von Lucy Doraine geheiratet?", "Welche Personen wurden von Lucy Doraine geheiratet?", "Wer wird von Lucy Doraine geheiratet?", "Wer wurde von Lucy Doraine geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Doraine> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Ellmann geheiratet?", "Welche Person wurde von Lucy Ellmann geheiratet?", "Welche Personen werden von Lucy Ellmann geheiratet?", "Welche Personen wurden von Lucy Ellmann geheiratet?", "Wer wird von Lucy Ellmann geheiratet?", "Wer wurde von Lucy Ellmann geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Ellmann> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Gaskell geheiratet?", "Welche Person wurde von Lucy Gaskell geheiratet?", "Welche Personen werden von Lucy Gaskell geheiratet?", "Welche Personen wurden von Lucy Gaskell geheiratet?", "Wer wird von Lucy Gaskell geheiratet?", "Wer wurde von Lucy Gaskell geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Gaskell> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Kellaway geheiratet?", "Welche Person wurde von Lucy Kellaway geheiratet?", "Welche Personen werden von Lucy Kellaway geheiratet?", "Welche Personen wurden von Lucy Kellaway geheiratet?", "Wer wird von Lucy Kellaway geheiratet?", "Wer wurde von Lucy Kellaway geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Kellaway> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Lawless geheiratet?", "Welche Person wurde von Lucy Lawless geheiratet?", "Welche Personen werden von Lucy Lawless geheiratet?", "Welche Personen wurden von Lucy Lawless geheiratet?", "Wer wird von Lucy Lawless geheiratet?", "Wer wurde von Lucy Lawless geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Lawless> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Madox Brown geheiratet?", "Welche Person wurde von Lucy Madox Brown geheiratet?", "Welche Personen werden von Lucy Madox Brown geheiratet?", "Welche Personen wurden von Lucy Madox Brown geheiratet?", "Wer wird von Lucy Madox Brown geheiratet?", "Wer wurde von Lucy Madox Brown geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Madox_Brown> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Mercer geheiratet?", "Welche Person wurde von Lucy Mercer geheiratet?", "Welche Personen werden von Lucy Mercer geheiratet?", "Welche Personen wurden von Lucy Mercer geheiratet?", "Wer wird von Lucy Mercer geheiratet?", "Wer wurde von Lucy Mercer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Mercer_Rutherfurd> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Nethsingha geheiratet?", "Welche Person wurde von Lucy Nethsingha geheiratet?", "Welche Personen werden von Lucy Nethsingha geheiratet?", "Welche Personen wurden von Lucy Nethsingha geheiratet?", "Wer wird von Lucy Nethsingha geheiratet?", "Wer wurde von Lucy Nethsingha geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Nethsingha> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Neville-Rolfe, Baroness Neville-Rolfe geheiratet?", "Welche Person wurde von Lucy Neville-Rolfe, Baroness Neville-Rolfe geheiratet?", "Welche Personen werden von Lucy Neville-Rolfe, Baroness Neville-Rolfe geheiratet?", "Welche Personen wurden von Lucy Neville-Rolfe, Baroness Neville-Rolfe geheiratet?", "Wer wird von Lucy Neville-Rolfe, Baroness Neville-Rolfe geheiratet?", "Wer wurde von Lucy Neville-Rolfe, Baroness Neville-Rolfe geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Neville-Rolfe> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Parsons geheiratet?", "Welche Person wurde von Lucy Parsons geheiratet?", "Welche Personen werden von Lucy Parsons geheiratet?", "Welche Personen wurden von Lucy Parsons geheiratet?", "Wer wird von Lucy Parsons geheiratet?", "Wer wurde von Lucy Parsons geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Parsons> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Scott geheiratet?", "Welche Person wurde von Lucy Scott geheiratet?", "Welche Personen werden von Lucy Scott geheiratet?", "Welche Personen wurden von Lucy Scott geheiratet?", "Wer wird von Lucy Scott geheiratet?", "Wer wurde von Lucy Scott geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Scott> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Shapiro geheiratet?", "Welche Person wurde von Lucy Shapiro geheiratet?", "Welche Personen werden von Lucy Shapiro geheiratet?", "Welche Personen wurden von Lucy Shapiro geheiratet?", "Wer wird von Lucy Shapiro geheiratet?", "Wer wurde von Lucy Shapiro geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Shapiro> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Stone geheiratet?", "Welche Person wurde von Lucy Stone geheiratet?", "Welche Personen werden von Lucy Stone geheiratet?", "Welche Personen wurden von Lucy Stone geheiratet?", "Wer wird von Lucy Stone geheiratet?", "Wer wurde von Lucy Stone geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Stone> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucy Hayes geheiratet?", "Welche Person wurde von Lucy Hayes geheiratet?", "Welche Personen werden von Lucy Hayes geheiratet?", "Welche Personen wurden von Lucy Hayes geheiratet?", "Wer wird von Lucy Hayes geheiratet?", "Wer wurde von Lucy Hayes geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucy_Webb_Hayes> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Lucía Topolansky geheiratet?", "Welche Person wurde von Lucía Topolansky geheiratet?", "Welche Personen werden von Lucía Topolansky geheiratet?", "Welche Personen wurden von Lucía Topolansky geheiratet?", "Wer wird von Lucía Topolansky geheiratet?", "Wer wurde von Lucía Topolansky geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lucía_Topolansky> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludger Stühlmeyer geheiratet?", "Welche Person wurde von Ludger Stühlmeyer geheiratet?", "Welche Personen werden von Ludger Stühlmeyer geheiratet?", "Welche Personen wurden von Ludger Stühlmeyer geheiratet?", "Wer wird von Ludger Stühlmeyer geheiratet?", "Wer wurde von Ludger Stühlmeyer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludger_Stühlmeyer> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludmila Mikaël geheiratet?", "Welche Person wurde von Ludmila Mikaël geheiratet?", "Welche Personen werden von Ludmila Mikaël geheiratet?", "Welche Personen wurden von Ludmila Mikaël geheiratet?", "Wer wird von Ludmila Mikaël geheiratet?", "Wer wurde von Ludmila Mikaël geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludmila_Mikaël> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludmilla von Podiebrad geheiratet?", "Welche Person wurde von Ludmilla von Podiebrad geheiratet?", "Welche Personen werden von Ludmilla von Podiebrad geheiratet?", "Welche Personen wurden von Ludmilla von Podiebrad geheiratet?", "Wer wird von Ludmilla von Podiebrad geheiratet?", "Wer wurde von Ludmilla von Podiebrad geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludmila_of_Poděbrady> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludmilla von Böhmen (um 1170) geheiratet?", "Welche Person wurde von Ludmilla von Böhmen (um 1170) geheiratet?", "Welche Personen werden von Ludmilla von Böhmen (um 1170) geheiratet?", "Welche Personen wurden von Ludmilla von Böhmen (um 1170) geheiratet?", "Wer wird von Ludmilla von Böhmen (um 1170) geheiratet?", "Wer wurde von Ludmilla von Böhmen (um 1170) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludmilla_of_Bohemia> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludovic Kennedy geheiratet?", "Welche Person wurde von Ludovic Kennedy geheiratet?", "Welche Personen werden von Ludovic Kennedy geheiratet?", "Welche Personen wurden von Ludovic Kennedy geheiratet?", "Wer wird von Ludovic Kennedy geheiratet?", "Wer wurde von Ludovic Kennedy geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludovic_Kennedy> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludovico III. Gonzaga geheiratet?", "Welche Person wurde von Ludovico III. Gonzaga geheiratet?", "Welche Personen werden von Ludovico III. Gonzaga geheiratet?", "Welche Personen wurden von Ludovico III. Gonzaga geheiratet?", "Wer wird von Ludovico III. Gonzaga geheiratet?", "Wer wurde von Ludovico III. Gonzaga geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludovico_III_Gonzaga,_Marquis_of_Mantua> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludovico Manin geheiratet?", "Welche Person wurde von Ludovico Manin geheiratet?", "Welche Personen werden von Ludovico Manin geheiratet?", "Welche Personen wurden von Ludovico Manin geheiratet?", "Wer wird von Ludovico Manin geheiratet?", "Wer wurde von Ludovico Manin geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludovico_Manin> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludovico Sforza geheiratet?", "Welche Person wurde von Ludovico Sforza geheiratet?", "Welche Personen werden von Ludovico Sforza geheiratet?", "Welche Personen wurden von Ludovico Sforza geheiratet?", "Wer wird von Ludovico Sforza geheiratet?", "Wer wurde von Ludovico Sforza geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludovico_Sforza> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludovica Margaretha von Zweibrücken-Bitsch geheiratet?", "Welche Person wurde von Ludovica Margaretha von Zweibrücken-Bitsch geheiratet?", "Welche Personen werden von Ludovica Margaretha von Zweibrücken-Bitsch geheiratet?", "Welche Personen wurden von Ludovica Margaretha von Zweibrücken-Bitsch geheiratet?", "Wer wird von Ludovica Margaretha von Zweibrücken-Bitsch geheiratet?", "Wer wurde von Ludovica Margaretha von Zweibrücken-Bitsch geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludowika_Margaretha_of_Zweibrücken-Bitsch> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludwig Bemelmans geheiratet?", "Welche Person wurde von Ludwig Bemelmans geheiratet?", "Welche Personen werden von Ludwig Bemelmans geheiratet?", "Welche Personen wurden von Ludwig Bemelmans geheiratet?", "Wer wird von Ludwig Bemelmans geheiratet?", "Wer wurde von Ludwig Bemelmans geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludwig_Bemelmans> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludwig Erhard geheiratet?", "Welche Person wurde von Ludwig Erhard geheiratet?", "Welche Personen werden von Ludwig Erhard geheiratet?", "Welche Personen wurden von Ludwig Erhard geheiratet?", "Wer wird von Ludwig Erhard geheiratet?", "Wer wurde von Ludwig Erhard geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludwig_Erhard> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludwig III. (Bayern) geheiratet?", "Welche Person wurde von Ludwig III. (Bayern) geheiratet?", "Welche Personen werden von Ludwig III. (Bayern) geheiratet?", "Welche Personen wurden von Ludwig III. (Bayern) geheiratet?", "Wer wird von Ludwig III. (Bayern) geheiratet?", "Wer wurde von Ludwig III. (Bayern) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludwig_III_of_Bavaria> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludwig I. (Bayern) geheiratet?", "Welche Person wurde von Ludwig I. (Bayern) geheiratet?", "Welche Personen werden von Ludwig I. (Bayern) geheiratet?", "Welche Personen wurden von Ludwig I. (Bayern) geheiratet?", "Wer wird von Ludwig I. (Bayern) geheiratet?", "Wer wurde von Ludwig I. (Bayern) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludwig_I_of_Bavaria> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luise Charlotte Radziwill geheiratet?", "Welche Person wurde von Luise Charlotte Radziwill geheiratet?", "Welche Personen werden von Luise Charlotte Radziwill geheiratet?", "Welche Personen wurden von Luise Charlotte Radziwill geheiratet?", "Wer wird von Luise Charlotte Radziwill geheiratet?", "Wer wurde von Luise Charlotte Radziwill geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludwika_Karolina_Radziwiłł> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Ludwika Paleta geheiratet?", "Welche Person wurde von Ludwika Paleta geheiratet?", "Welche Personen werden von Ludwika Paleta geheiratet?", "Welche Personen wurden von Ludwika Paleta geheiratet?", "Wer wird von Ludwika Paleta geheiratet?", "Wer wurde von Ludwika Paleta geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Ludwika_Paleta> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luděk Munzar geheiratet?", "Welche Person wurde von Luděk Munzar geheiratet?", "Welche Personen werden von Luděk Munzar geheiratet?", "Welche Personen wurden von Luděk Munzar geheiratet?", "Wer wird von Luděk Munzar geheiratet?", "Wer wurde von Luděk Munzar geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luděk_Munzar> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Aurélien-Marie Lugné-Poe geheiratet?", "Welche Person wurde von Aurélien-Marie Lugné-Poe geheiratet?", "Welche Personen werden von Aurélien-Marie Lugné-Poe geheiratet?", "Welche Personen wurden von Aurélien-Marie Lugné-Poe geheiratet?", "Wer wird von Aurélien-Marie Lugné-Poe geheiratet?", "Wer wurde von Aurélien-Marie Lugné-Poe geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Lugné-Poe> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis A. Ferré geheiratet?", "Welche Person wurde von Luis A. Ferré geheiratet?", "Welche Personen werden von Luis A. Ferré geheiratet?", "Welche Personen wurden von Luis A. Ferré geheiratet?", "Wer wird von Luis A. Ferré geheiratet?", "Wer wurde von Luis A. Ferré geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_A._Ferré> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Adolfo Siles Salinas geheiratet?", "Welche Person wurde von Luis Adolfo Siles Salinas geheiratet?", "Welche Personen werden von Luis Adolfo Siles Salinas geheiratet?", "Welche Personen wurden von Luis Adolfo Siles Salinas geheiratet?", "Wer wird von Luis Adolfo Siles Salinas geheiratet?", "Wer wurde von Luis Adolfo Siles Salinas geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Adolfo_Siles_Salinas> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Alberto Lacalle Herrera geheiratet?", "Welche Person wurde von Luis Alberto Lacalle Herrera geheiratet?", "Welche Personen werden von Luis Alberto Lacalle Herrera geheiratet?", "Welche Personen wurden von Luis Alberto Lacalle Herrera geheiratet?", "Wer wird von Luis Alberto Lacalle Herrera geheiratet?", "Wer wurde von Luis Alberto Lacalle Herrera geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Alberto_Lacalle> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Alberto Monge Álvarez geheiratet?", "Welche Person wurde von Luis Alberto Monge Álvarez geheiratet?", "Welche Personen werden von Luis Alberto Monge Álvarez geheiratet?", "Welche Personen wurden von Luis Alberto Monge Álvarez geheiratet?", "Wer wird von Luis Alberto Monge Álvarez geheiratet?", "Wer wurde von Luis Alberto Monge Álvarez geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Alberto_Monge> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Alcoriza geheiratet?", "Welche Person wurde von Luis Alcoriza geheiratet?", "Welche Personen werden von Luis Alcoriza geheiratet?", "Welche Personen wurden von Luis Alcoriza geheiratet?", "Wer wird von Luis Alcoriza geheiratet?", "Wer wurde von Luis Alcoriza geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Alcoriza> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Batlle Berres geheiratet?", "Welche Person wurde von Luis Batlle Berres geheiratet?", "Welche Personen werden von Luis Batlle Berres geheiratet?", "Welche Personen wurden von Luis Batlle Berres geheiratet?", "Wer wird von Luis Batlle Berres geheiratet?", "Wer wurde von Luis Batlle Berres geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Batlle_Berres> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Buñuel geheiratet?", "Welche Person wurde von Luis Buñuel geheiratet?", "Welche Personen werden von Luis Buñuel geheiratet?", "Welche Personen wurden von Luis Buñuel geheiratet?", "Wer wird von Luis Buñuel geheiratet?", "Wer wurde von Luis Buñuel geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Buñuel> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Camnitzer geheiratet?", "Welche Person wurde von Luis Camnitzer geheiratet?", "Welche Personen werden von Luis Camnitzer geheiratet?", "Welche Personen wurden von Luis Camnitzer geheiratet?", "Wer wird von Luis Camnitzer geheiratet?", "Wer wurde von Luis Camnitzer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Camnitzer> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Donaldo Colosio geheiratet?", "Welche Person wurde von Luis Donaldo Colosio geheiratet?", "Welche Personen werden von Luis Donaldo Colosio geheiratet?", "Welche Personen wurden von Luis Donaldo Colosio geheiratet?", "Wer wird von Luis Donaldo Colosio geheiratet?", "Wer wurde von Luis Donaldo Colosio geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Donaldo_Colosio> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "11",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Luis Fonsi geheiratet?", "Welche Person wurde von Luis Fonsi geheiratet?", "Welche Personen werden von Luis Fonsi geheiratet?", "Welche Personen wurden von Luis Fonsi geheiratet?", "Wer wird von Luis Fonsi geheiratet?", "Wer wurde von Luis Fonsi geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp (triple <http://dbpedia.org/resource/Luis_Fonsi> <http://dbpedia.org/ontology/spouse> ?objOfProp))\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfProp"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : false
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Luke Macfarlane ?", "Welche Person heiratete fiktive Charaktere gespielt von Luke Macfarlane ?", "Welche Personen heiraten fiktive Charaktere gespielt von Luke Macfarlane ?", "Welche Personen heirateten fiktive Charaktere gespielt von Luke Macfarlane ?", "Wer heiratet fiktive Charaktere gespielt von Luke Macfarlane ?", "Wer heiratete fiktive Charaktere gespielt von Luke Macfarlane ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Macfarlane>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Lysette Anthony ?", "Welche Person heiratete fiktive Charaktere gespielt von Lysette Anthony ?", "Welche Personen heiraten fiktive Charaktere gespielt von Lysette Anthony ?", "Welche Personen heirateten fiktive Charaktere gespielt von Lysette Anthony ?", "Wer heiratet fiktive Charaktere gespielt von Lysette Anthony ?", "Wer heiratete fiktive Charaktere gespielt von Lysette Anthony ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lysette_Anthony>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Maggie Smith ?", "Welche Person heiratete fiktive Charaktere gespielt von Maggie Smith ?", "Welche Personen heiraten fiktive Charaktere gespielt von Maggie Smith ?", "Welche Personen heirateten fiktive Charaktere gespielt von Maggie Smith ?", "Wer heiratet fiktive Charaktere gespielt von Maggie Smith ?", "Wer heiratete fiktive Charaktere gespielt von Maggie Smith ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maggie_Smith>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Uta Hagen ?", "Welche Person heiratete fiktive Charaktere gespielt von Uta Hagen ?", "Welche Personen heiraten fiktive Charaktere gespielt von Uta Hagen ?", "Welche Personen heirateten fiktive Charaktere gespielt von Uta Hagen ?", "Wer heiratet fiktive Charaktere gespielt von Uta Hagen ?", "Wer heiratete fiktive Charaktere gespielt von Uta Hagen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Uta_Hagen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Welche Person heiratete fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Welche Personen heiraten fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Welche Personen heirateten fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Wer heiratet fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Wer heiratete fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sara_Woods>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Goran Višnjić ?", "Welche Person heiratete fiktive Charaktere gespielt von Goran Višnjić ?", "Welche Personen heiraten fiktive Charaktere gespielt von Goran Višnjić ?", "Welche Personen heirateten fiktive Charaktere gespielt von Goran Višnjić ?", "Wer heiratet fiktive Charaktere gespielt von Goran Višnjić ?", "Wer heiratete fiktive Charaktere gespielt von Goran Višnjić ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Goran_Višnjić>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Krista Allen ?", "Welche Person heiratete fiktive Charaktere gespielt von Krista Allen ?", "Welche Personen heiraten fiktive Charaktere gespielt von Krista Allen ?", "Welche Personen heirateten fiktive Charaktere gespielt von Krista Allen ?", "Wer heiratet fiktive Charaktere gespielt von Krista Allen ?", "Wer heiratete fiktive Charaktere gespielt von Krista Allen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Krista_Allen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Krista Tesreau ?", "Welche Person heiratete fiktive Charaktere gespielt von Krista Tesreau ?", "Welche Personen heiraten fiktive Charaktere gespielt von Krista Tesreau ?", "Welche Personen heirateten fiktive Charaktere gespielt von Krista Tesreau ?", "Wer heiratet fiktive Charaktere gespielt von Krista Tesreau ?", "Wer heiratete fiktive Charaktere gespielt von Krista Tesreau ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Krista_Tesreau>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Prunella Scales ?", "Welche Person heiratete fiktive Charaktere gespielt von Prunella Scales ?", "Welche Personen heiraten fiktive Charaktere gespielt von Prunella Scales ?", "Welche Personen heirateten fiktive Charaktere gespielt von Prunella Scales ?", "Wer heiratet fiktive Charaktere gespielt von Prunella Scales ?", "Wer heiratete fiktive Charaktere gespielt von Prunella Scales ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Prunella_Scales>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Alexander Beyer ?", "Welche Person heiratete fiktive Charaktere gespielt von Alexander Beyer ?", "Welche Personen heiraten fiktive Charaktere gespielt von Alexander Beyer ?", "Welche Personen heirateten fiktive Charaktere gespielt von Alexander Beyer ?", "Wer heiratet fiktive Charaktere gespielt von Alexander Beyer ?", "Wer heiratete fiktive Charaktere gespielt von Alexander Beyer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Alexander_Beyer>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Catherine O’Hara ?", "Welche Person heiratete fiktive Charaktere gespielt von Catherine O’Hara ?", "Welche Personen heiraten fiktive Charaktere gespielt von Catherine O’Hara ?", "Welche Personen heirateten fiktive Charaktere gespielt von Catherine O’Hara ?", "Wer heiratet fiktive Charaktere gespielt von Catherine O’Hara ?", "Wer heiratete fiktive Charaktere gespielt von Catherine O’Hara ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Catherine_O'Hara>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Chad Michael Murray ?", "Welche Person heiratete fiktive Charaktere gespielt von Chad Michael Murray ?", "Welche Personen heiraten fiktive Charaktere gespielt von Chad Michael Murray ?", "Welche Personen heirateten fiktive Charaktere gespielt von Chad Michael Murray ?", "Wer heiratet fiktive Charaktere gespielt von Chad Michael Murray ?", "Wer heiratete fiktive Charaktere gespielt von Chad Michael Murray ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Chad_Michael_Murray>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Noah Ringer ?", "Welche Person heiratete fiktive Charaktere gespielt von Noah Ringer ?", "Welche Personen heiraten fiktive Charaktere gespielt von Noah Ringer ?", "Welche Personen heirateten fiktive Charaktere gespielt von Noah Ringer ?", "Wer heiratet fiktive Charaktere gespielt von Noah Ringer ?", "Wer heiratete fiktive Charaktere gespielt von Noah Ringer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Noah_Ringer>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Nathalie Kelley ?", "Welche Person heiratete fiktive Charaktere gespielt von Nathalie Kelley ?", "Welche Personen heiraten fiktive Charaktere gespielt von Nathalie Kelley ?", "Welche Personen heirateten fiktive Charaktere gespielt von Nathalie Kelley ?", "Wer heiratet fiktive Charaktere gespielt von Nathalie Kelley ?", "Wer heiratete fiktive Charaktere gespielt von Nathalie Kelley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Nathalie_Kelley>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Barbara Crampton ?", "Welche Person heiratete fiktive Charaktere gespielt von Barbara Crampton ?", "Welche Personen heiraten fiktive Charaktere gespielt von Barbara Crampton ?", "Welche Personen heirateten fiktive Charaktere gespielt von Barbara Crampton ?", "Wer heiratet fiktive Charaktere gespielt von Barbara Crampton ?", "Wer heiratete fiktive Charaktere gespielt von Barbara Crampton ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Barbara_Crampton>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Barbara Hershey ?", "Welche Person heiratete fiktive Charaktere gespielt von Barbara Hershey ?", "Welche Personen heiraten fiktive Charaktere gespielt von Barbara Hershey ?", "Welche Personen heirateten fiktive Charaktere gespielt von Barbara Hershey ?", "Wer heiratet fiktive Charaktere gespielt von Barbara Hershey ?", "Wer heiratete fiktive Charaktere gespielt von Barbara Hershey ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Barbara_Hershey>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Calista Flockhart ?", "Welche Person heiratete fiktive Charaktere gespielt von Calista Flockhart ?", "Welche Personen heiraten fiktive Charaktere gespielt von Calista Flockhart ?", "Welche Personen heirateten fiktive Charaktere gespielt von Calista Flockhart ?", "Wer heiratet fiktive Charaktere gespielt von Calista Flockhart ?", "Wer heiratete fiktive Charaktere gespielt von Calista Flockhart ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Calista_Flockhart>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Chris Pratt ?", "Welche Person heiratete fiktive Charaktere gespielt von Chris Pratt ?", "Welche Personen heiraten fiktive Charaktere gespielt von Chris Pratt ?", "Welche Personen heirateten fiktive Charaktere gespielt von Chris Pratt ?", "Wer heiratet fiktive Charaktere gespielt von Chris Pratt ?", "Wer heiratete fiktive Charaktere gespielt von Chris Pratt ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Chris_Pratt>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Christian Serratos ?", "Welche Person heiratete fiktive Charaktere gespielt von Christian Serratos ?", "Welche Personen heiraten fiktive Charaktere gespielt von Christian Serratos ?", "Welche Personen heirateten fiktive Charaktere gespielt von Christian Serratos ?", "Wer heiratet fiktive Charaktere gespielt von Christian Serratos ?", "Wer heiratete fiktive Charaktere gespielt von Christian Serratos ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Christian_Serratos>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Jeanine Mason ?", "Welche Person heiratete fiktive Charaktere gespielt von Jeanine Mason ?", "Welche Personen heiraten fiktive Charaktere gespielt von Jeanine Mason ?", "Welche Personen heirateten fiktive Charaktere gespielt von Jeanine Mason ?", "Wer heiratet fiktive Charaktere gespielt von Jeanine Mason ?", "Wer heiratete fiktive Charaktere gespielt von Jeanine Mason ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jeanine_Mason>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Jed Allan ?", "Welche Person heiratete fiktive Charaktere gespielt von Jed Allan ?", "Welche Personen heiraten fiktive Charaktere gespielt von Jed Allan ?", "Welche Personen heirateten fiktive Charaktere gespielt von Jed Allan ?", "Wer heiratet fiktive Charaktere gespielt von Jed Allan ?", "Wer heiratete fiktive Charaktere gespielt von Jed Allan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jed_Allan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Jennifer Garner ?", "Welche Person heiratete fiktive Charaktere gespielt von Jennifer Garner ?", "Welche Personen heiraten fiktive Charaktere gespielt von Jennifer Garner ?", "Welche Personen heirateten fiktive Charaktere gespielt von Jennifer Garner ?", "Wer heiratet fiktive Charaktere gespielt von Jennifer Garner ?", "Wer heiratete fiktive Charaktere gespielt von Jennifer Garner ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jennifer_Garner>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Joan Van Ark ?", "Welche Person heiratete fiktive Charaktere gespielt von Joan Van Ark ?", "Welche Personen heiraten fiktive Charaktere gespielt von Joan Van Ark ?", "Welche Personen heirateten fiktive Charaktere gespielt von Joan Van Ark ?", "Wer heiratet fiktive Charaktere gespielt von Joan Van Ark ?", "Wer heiratete fiktive Charaktere gespielt von Joan Van Ark ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Joan_Van_Ark>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Joey Luthman ?", "Welche Person heiratete fiktive Charaktere gespielt von Joey Luthman ?", "Welche Personen heiraten fiktive Charaktere gespielt von Joey Luthman ?", "Welche Personen heirateten fiktive Charaktere gespielt von Joey Luthman ?", "Wer heiratet fiktive Charaktere gespielt von Joey Luthman ?", "Wer heiratete fiktive Charaktere gespielt von Joey Luthman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Joey_Luthman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von John Goodman ?", "Welche Person heiratete fiktive Charaktere gespielt von John Goodman ?", "Welche Personen heiraten fiktive Charaktere gespielt von John Goodman ?", "Welche Personen heirateten fiktive Charaktere gespielt von John Goodman ?", "Wer heiratet fiktive Charaktere gespielt von John Goodman ?", "Wer heiratete fiktive Charaktere gespielt von John Goodman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/John_Goodman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Bebe Neuwirth ?", "Welche Person heiratete fiktive Charaktere gespielt von Bebe Neuwirth ?", "Welche Personen heiraten fiktive Charaktere gespielt von Bebe Neuwirth ?", "Welche Personen heirateten fiktive Charaktere gespielt von Bebe Neuwirth ?", "Wer heiratet fiktive Charaktere gespielt von Bebe Neuwirth ?", "Wer heiratete fiktive Charaktere gespielt von Bebe Neuwirth ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Bebe_Neuwirth>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Kareena Kapoor ?", "Welche Person heiratete fiktive Charaktere gespielt von Kareena Kapoor ?", "Welche Personen heiraten fiktive Charaktere gespielt von Kareena Kapoor ?", "Welche Personen heirateten fiktive Charaktere gespielt von Kareena Kapoor ?", "Wer heiratet fiktive Charaktere gespielt von Kareena Kapoor ?", "Wer heiratete fiktive Charaktere gespielt von Kareena Kapoor ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kareena_Kapoor>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Kassie DePaiva ?", "Welche Person heiratete fiktive Charaktere gespielt von Kassie DePaiva ?", "Welche Personen heiraten fiktive Charaktere gespielt von Kassie DePaiva ?", "Welche Personen heirateten fiktive Charaktere gespielt von Kassie DePaiva ?", "Wer heiratet fiktive Charaktere gespielt von Kassie DePaiva ?", "Wer heiratete fiktive Charaktere gespielt von Kassie DePaiva ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kassie_DePaiva>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Kathy Bates ?", "Welche Person heiratete fiktive Charaktere gespielt von Kathy Bates ?", "Welche Personen heiraten fiktive Charaktere gespielt von Kathy Bates ?", "Welche Personen heirateten fiktive Charaktere gespielt von Kathy Bates ?", "Wer heiratet fiktive Charaktere gespielt von Kathy Bates ?", "Wer heiratete fiktive Charaktere gespielt von Kathy Bates ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kathy_Bates>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Lexi Ainsworth ?", "Welche Person heiratete fiktive Charaktere gespielt von Lexi Ainsworth ?", "Welche Personen heiraten fiktive Charaktere gespielt von Lexi Ainsworth ?", "Welche Personen heirateten fiktive Charaktere gespielt von Lexi Ainsworth ?", "Wer heiratet fiktive Charaktere gespielt von Lexi Ainsworth ?", "Wer heiratete fiktive Charaktere gespielt von Lexi Ainsworth ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lexi_Ainsworth>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Linda Evans ?", "Welche Person heiratete fiktive Charaktere gespielt von Linda Evans ?", "Welche Personen heiraten fiktive Charaktere gespielt von Linda Evans ?", "Welche Personen heirateten fiktive Charaktere gespielt von Linda Evans ?", "Wer heiratet fiktive Charaktere gespielt von Linda Evans ?", "Wer heiratete fiktive Charaktere gespielt von Linda Evans ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Linda_Evans>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Lindsay Wagner ?", "Welche Person heiratete fiktive Charaktere gespielt von Lindsay Wagner ?", "Welche Personen heiraten fiktive Charaktere gespielt von Lindsay Wagner ?", "Welche Personen heirateten fiktive Charaktere gespielt von Lindsay Wagner ?", "Wer heiratet fiktive Charaktere gespielt von Lindsay Wagner ?", "Wer heiratete fiktive Charaktere gespielt von Lindsay Wagner ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lindsay_Wagner>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Lindsey Morgan ?", "Welche Person heiratete fiktive Charaktere gespielt von Lindsey Morgan ?", "Welche Personen heiraten fiktive Charaktere gespielt von Lindsey Morgan ?", "Welche Personen heirateten fiktive Charaktere gespielt von Lindsey Morgan ?", "Wer heiratet fiktive Charaktere gespielt von Lindsey Morgan ?", "Wer heiratete fiktive Charaktere gespielt von Lindsey Morgan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lindsey_Morgan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Lisa Rinna ?", "Welche Person heiratete fiktive Charaktere gespielt von Lisa Rinna ?", "Welche Personen heiraten fiktive Charaktere gespielt von Lisa Rinna ?", "Welche Personen heirateten fiktive Charaktere gespielt von Lisa Rinna ?", "Wer heiratet fiktive Charaktere gespielt von Lisa Rinna ?", "Wer heiratete fiktive Charaktere gespielt von Lisa Rinna ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lisa_Rinna>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Teri Hatcher ?", "Welche Person heiratete fiktive Charaktere gespielt von Teri Hatcher ?", "Welche Personen heiraten fiktive Charaktere gespielt von Teri Hatcher ?", "Welche Personen heirateten fiktive Charaktere gespielt von Teri Hatcher ?", "Wer heiratet fiktive Charaktere gespielt von Teri Hatcher ?", "Wer heiratete fiktive Charaktere gespielt von Teri Hatcher ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Teri_Hatcher>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Yvonne Strahovski ?", "Welche Person heiratete fiktive Charaktere gespielt von Yvonne Strahovski ?", "Welche Personen heiraten fiktive Charaktere gespielt von Yvonne Strahovski ?", "Welche Personen heirateten fiktive Charaktere gespielt von Yvonne Strahovski ?", "Wer heiratet fiktive Charaktere gespielt von Yvonne Strahovski ?", "Wer heiratete fiktive Charaktere gespielt von Yvonne Strahovski ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Yvonne_Strahovski>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Kimberley Simms ?", "Welche Person heiratete fiktive Charaktere gespielt von Kimberley Simms ?", "Welche Personen heiraten fiktive Charaktere gespielt von Kimberley Simms ?", "Welche Personen heirateten fiktive Charaktere gespielt von Kimberley Simms ?", "Wer heiratet fiktive Charaktere gespielt von Kimberley Simms ?", "Wer heiratete fiktive Charaktere gespielt von Kimberley Simms ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kimberley_Simms>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Michael Nader ?", "Welche Person heiratete fiktive Charaktere gespielt von Michael Nader ?", "Welche Personen heiraten fiktive Charaktere gespielt von Michael Nader ?", "Welche Personen heirateten fiktive Charaktere gespielt von Michael Nader ?", "Wer heiratet fiktive Charaktere gespielt von Michael Nader ?", "Wer heiratete fiktive Charaktere gespielt von Michael Nader ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michael_Nader>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Michaela Conlin ?", "Welche Person heiratete fiktive Charaktere gespielt von Michaela Conlin ?", "Welche Personen heiraten fiktive Charaktere gespielt von Michaela Conlin ?", "Welche Personen heirateten fiktive Charaktere gespielt von Michaela Conlin ?", "Wer heiratet fiktive Charaktere gespielt von Michaela Conlin ?", "Wer heiratete fiktive Charaktere gespielt von Michaela Conlin ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michaela_Conlin>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Ryan Carnes ?", "Welche Person heiratete fiktive Charaktere gespielt von Ryan Carnes ?", "Welche Personen heiraten fiktive Charaktere gespielt von Ryan Carnes ?", "Welche Personen heirateten fiktive Charaktere gespielt von Ryan Carnes ?", "Wer heiratet fiktive Charaktere gespielt von Ryan Carnes ?", "Wer heiratete fiktive Charaktere gespielt von Ryan Carnes ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ryan_Carnes>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Rachel Kimsey ?", "Welche Person heiratete fiktive Charaktere gespielt von Rachel Kimsey ?", "Welche Personen heiraten fiktive Charaktere gespielt von Rachel Kimsey ?", "Welche Personen heirateten fiktive Charaktere gespielt von Rachel Kimsey ?", "Wer heiratet fiktive Charaktere gespielt von Rachel Kimsey ?", "Wer heiratete fiktive Charaktere gespielt von Rachel Kimsey ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Rachel_Kimsey>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Dragonball Evolution ?", "Welche Person heiratete fiktive Charaktere gespielt von Dragonball Evolution ?", "Welche Personen heiraten fiktive Charaktere gespielt von Dragonball Evolution ?", "Welche Personen heirateten fiktive Charaktere gespielt von Dragonball Evolution ?", "Wer heiratet fiktive Charaktere gespielt von Dragonball Evolution ?", "Wer heiratete fiktive Charaktere gespielt von Dragonball Evolution ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Dragonball_Evolution>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Dylan Minnette ?", "Welche Person heiratete fiktive Charaktere gespielt von Dylan Minnette ?", "Welche Personen heiraten fiktive Charaktere gespielt von Dylan Minnette ?", "Welche Personen heirateten fiktive Charaktere gespielt von Dylan Minnette ?", "Wer heiratet fiktive Charaktere gespielt von Dylan Minnette ?", "Wer heiratete fiktive Charaktere gespielt von Dylan Minnette ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Dylan_Minnette>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Children of Dune ?", "Welche Person heiratete fiktive Charaktere gespielt von Children of Dune ?", "Welche Personen heiraten fiktive Charaktere gespielt von Children of Dune ?", "Welche Personen heirateten fiktive Charaktere gespielt von Children of Dune ?", "Wer heiratet fiktive Charaktere gespielt von Children of Dune ?", "Wer heiratete fiktive Charaktere gespielt von Children of Dune ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Frank_Herbert's_Children_of_Dune>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) ?", "Welche Person heiratete fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) ?", "Welche Personen heiraten fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) ?", "Welche Personen heirateten fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) ?", "Wer heiratet fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) ?", "Wer heiratete fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ian_Carmichael>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Ian Somerhalder ?", "Welche Person heiratete fiktive Charaktere gespielt von Ian Somerhalder ?", "Welche Personen heiraten fiktive Charaktere gespielt von Ian Somerhalder ?", "Welche Personen heirateten fiktive Charaktere gespielt von Ian Somerhalder ?", "Wer heiratet fiktive Charaktere gespielt von Ian Somerhalder ?", "Wer heiratete fiktive Charaktere gespielt von Ian Somerhalder ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ian_Somerhalder>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von James Patrick Stuart ?", "Welche Person heiratete fiktive Charaktere gespielt von James Patrick Stuart ?", "Welche Personen heiraten fiktive Charaktere gespielt von James Patrick Stuart ?", "Welche Personen heirateten fiktive Charaktere gespielt von James Patrick Stuart ?", "Wer heiratet fiktive Charaktere gespielt von James Patrick Stuart ?", "Wer heiratete fiktive Charaktere gespielt von James Patrick Stuart ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/James_Patrick_Stuart>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Jason Behr ?", "Welche Person heiratete fiktive Charaktere gespielt von Jason Behr ?", "Welche Personen heiraten fiktive Charaktere gespielt von Jason Behr ?", "Welche Personen heirateten fiktive Charaktere gespielt von Jason Behr ?", "Wer heiratet fiktive Charaktere gespielt von Jason Behr ?", "Wer heiratete fiktive Charaktere gespielt von Jason Behr ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jason_Behr>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Jayne Atkinson ?", "Welche Person heiratete fiktive Charaktere gespielt von Jayne Atkinson ?", "Welche Personen heiraten fiktive Charaktere gespielt von Jayne Atkinson ?", "Welche Personen heirateten fiktive Charaktere gespielt von Jayne Atkinson ?", "Wer heiratet fiktive Charaktere gespielt von Jayne Atkinson ?", "Wer heiratete fiktive Charaktere gespielt von Jayne Atkinson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jayne_Atkinson>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Welche Person heiratete fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Welche Personen heiraten fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Welche Personen heirateten fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Wer heiratet fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Wer heiratete fiktive Charaktere gespielt von Sarah Jessica Parker ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sarah_Jessica_Parker>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Sarah Siddons ?", "Welche Person heiratete fiktive Charaktere gespielt von Sarah Siddons ?", "Welche Personen heiraten fiktive Charaktere gespielt von Sarah Siddons ?", "Welche Personen heirateten fiktive Charaktere gespielt von Sarah Siddons ?", "Wer heiratet fiktive Charaktere gespielt von Sarah Siddons ?", "Wer heiratete fiktive Charaktere gespielt von Sarah Siddons ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sarah_Siddons>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk ?", "Welche Person heiratete fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk ?", "Welche Personen heiraten fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk ?", "Welche Personen heirateten fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk ?", "Wer heiratet fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk ?", "Wer heiratete fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sergei_Bondarchuk>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Amy Brenneman ?", "Welche Person heiratete fiktive Charaktere gespielt von Amy Brenneman ?", "Welche Personen heiraten fiktive Charaktere gespielt von Amy Brenneman ?", "Welche Personen heirateten fiktive Charaktere gespielt von Amy Brenneman ?", "Wer heiratet fiktive Charaktere gespielt von Amy Brenneman ?", "Wer heiratete fiktive Charaktere gespielt von Amy Brenneman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Amy_Brenneman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Andy Griffith ?", "Welche Person heiratete fiktive Charaktere gespielt von Andy Griffith ?", "Welche Personen heiraten fiktive Charaktere gespielt von Andy Griffith ?", "Welche Personen heirateten fiktive Charaktere gespielt von Andy Griffith ?", "Wer heiratet fiktive Charaktere gespielt von Andy Griffith ?", "Wer heiratete fiktive Charaktere gespielt von Andy Griffith ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Andy_Griffith>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Angela Kinsey ?", "Welche Person heiratete fiktive Charaktere gespielt von Angela Kinsey ?", "Welche Personen heiraten fiktive Charaktere gespielt von Angela Kinsey ?", "Welche Personen heirateten fiktive Charaktere gespielt von Angela Kinsey ?", "Wer heiratet fiktive Charaktere gespielt von Angela Kinsey ?", "Wer heiratete fiktive Charaktere gespielt von Angela Kinsey ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Angela_Kinsey>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Anjelica Huston ?", "Welche Person heiratete fiktive Charaktere gespielt von Anjelica Huston ?", "Welche Personen heiraten fiktive Charaktere gespielt von Anjelica Huston ?", "Welche Personen heirateten fiktive Charaktere gespielt von Anjelica Huston ?", "Wer heiratet fiktive Charaktere gespielt von Anjelica Huston ?", "Wer heiratete fiktive Charaktere gespielt von Anjelica Huston ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anjelica_Huston>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von AnnaSophia Robb ?", "Welche Person heiratete fiktive Charaktere gespielt von AnnaSophia Robb ?", "Welche Personen heiraten fiktive Charaktere gespielt von AnnaSophia Robb ?", "Welche Personen heirateten fiktive Charaktere gespielt von AnnaSophia Robb ?", "Wer heiratet fiktive Charaktere gespielt von AnnaSophia Robb ?", "Wer heiratete fiktive Charaktere gespielt von AnnaSophia Robb ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/AnnaSophia_Robb>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Anthony Geary ?", "Welche Person heiratete fiktive Charaktere gespielt von Anthony Geary ?", "Welche Personen heiraten fiktive Charaktere gespielt von Anthony Geary ?", "Welche Personen heirateten fiktive Charaktere gespielt von Anthony Geary ?", "Wer heiratet fiktive Charaktere gespielt von Anthony Geary ?", "Wer heiratete fiktive Charaktere gespielt von Anthony Geary ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anthony_Geary>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Anthony Hopkins ?", "Welche Person heiratete fiktive Charaktere gespielt von Anthony Hopkins ?", "Welche Personen heiraten fiktive Charaktere gespielt von Anthony Hopkins ?", "Welche Personen heirateten fiktive Charaktere gespielt von Anthony Hopkins ?", "Wer heiratet fiktive Charaktere gespielt von Anthony Hopkins ?", "Wer heiratete fiktive Charaktere gespielt von Anthony Hopkins ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anthony_Hopkins>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Arthur Darvill ?", "Welche Person heiratete fiktive Charaktere gespielt von Arthur Darvill ?", "Welche Personen heiraten fiktive Charaktere gespielt von Arthur Darvill ?", "Welche Personen heirateten fiktive Charaktere gespielt von Arthur Darvill ?", "Wer heiratet fiktive Charaktere gespielt von Arthur Darvill ?", "Wer heiratete fiktive Charaktere gespielt von Arthur Darvill ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Arthur_Darvill>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Ashley Peldon ?", "Welche Person heiratete fiktive Charaktere gespielt von Ashley Peldon ?", "Welche Personen heiraten fiktive Charaktere gespielt von Ashley Peldon ?", "Welche Personen heirateten fiktive Charaktere gespielt von Ashley Peldon ?", "Wer heiratet fiktive Charaktere gespielt von Ashley Peldon ?", "Wer heiratete fiktive Charaktere gespielt von Ashley Peldon ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ashley_Peldon>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Rhea Seehorn ?", "Welche Person heiratete fiktive Charaktere gespielt von Rhea Seehorn ?", "Welche Personen heiraten fiktive Charaktere gespielt von Rhea Seehorn ?", "Welche Personen heirateten fiktive Charaktere gespielt von Rhea Seehorn ?", "Wer heiratet fiktive Charaktere gespielt von Rhea Seehorn ?", "Wer heiratete fiktive Charaktere gespielt von Rhea Seehorn ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Rhea_Seehorn>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Richard Burgi ?", "Welche Person heiratete fiktive Charaktere gespielt von Richard Burgi ?", "Welche Personen heiraten fiktive Charaktere gespielt von Richard Burgi ?", "Welche Personen heirateten fiktive Charaktere gespielt von Richard Burgi ?", "Wer heiratet fiktive Charaktere gespielt von Richard Burgi ?", "Wer heiratete fiktive Charaktere gespielt von Richard Burgi ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Richard_Burgi>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Tessa Allen ?", "Welche Person heiratete fiktive Charaktere gespielt von Tessa Allen ?", "Welche Personen heiraten fiktive Charaktere gespielt von Tessa Allen ?", "Welche Personen heirateten fiktive Charaktere gespielt von Tessa Allen ?", "Wer heiratet fiktive Charaktere gespielt von Tessa Allen ?", "Wer heiratete fiktive Charaktere gespielt von Tessa Allen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Tessa_Allen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Welche Person heiratete fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Welche Personen heiraten fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Welche Personen heirateten fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Wer heiratet fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Wer heiratete fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/The_Carrie_Diaries_(TV_series)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Adrian Paul ?", "Welche Person heiratete fiktive Charaktere gespielt von Adrian Paul ?", "Welche Personen heiraten fiktive Charaktere gespielt von Adrian Paul ?", "Welche Personen heirateten fiktive Charaktere gespielt von Adrian Paul ?", "Wer heiratet fiktive Charaktere gespielt von Adrian Paul ?", "Wer heiratete fiktive Charaktere gespielt von Adrian Paul ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Adrian_Paul>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Brooke Shields ?", "Welche Person heiratete fiktive Charaktere gespielt von Brooke Shields ?", "Welche Personen heiraten fiktive Charaktere gespielt von Brooke Shields ?", "Welche Personen heirateten fiktive Charaktere gespielt von Brooke Shields ?", "Wer heiratet fiktive Charaktere gespielt von Brooke Shields ?", "Wer heiratete fiktive Charaktere gespielt von Brooke Shields ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Brooke_Shields>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Laura Allen ?", "Welche Person heiratete fiktive Charaktere gespielt von Laura Allen ?", "Welche Personen heiraten fiktive Charaktere gespielt von Laura Allen ?", "Welche Personen heirateten fiktive Charaktere gespielt von Laura Allen ?", "Wer heiratet fiktive Charaktere gespielt von Laura Allen ?", "Wer heiratete fiktive Charaktere gespielt von Laura Allen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Laura_Allen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Leah Remini ?", "Welche Person heiratete fiktive Charaktere gespielt von Leah Remini ?", "Welche Personen heiraten fiktive Charaktere gespielt von Leah Remini ?", "Welche Personen heirateten fiktive Charaktere gespielt von Leah Remini ?", "Wer heiratet fiktive Charaktere gespielt von Leah Remini ?", "Wer heiratete fiktive Charaktere gespielt von Leah Remini ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Leah_Remini>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Dan Gauthier ?", "Welche Person heiratete fiktive Charaktere gespielt von Dan Gauthier ?", "Welche Personen heiraten fiktive Charaktere gespielt von Dan Gauthier ?", "Welche Personen heirateten fiktive Charaktere gespielt von Dan Gauthier ?", "Wer heiratet fiktive Charaktere gespielt von Dan Gauthier ?", "Wer heiratete fiktive Charaktere gespielt von Dan Gauthier ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Dan_Gauthier>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Daniel Olbrychski ?", "Welche Person heiratete fiktive Charaktere gespielt von Daniel Olbrychski ?", "Welche Personen heiraten fiktive Charaktere gespielt von Daniel Olbrychski ?", "Welche Personen heirateten fiktive Charaktere gespielt von Daniel Olbrychski ?", "Wer heiratet fiktive Charaktere gespielt von Daniel Olbrychski ?", "Wer heiratete fiktive Charaktere gespielt von Daniel Olbrychski ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Daniel_Olbrychski>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Daniella Alonso ?", "Welche Person heiratete fiktive Charaktere gespielt von Daniella Alonso ?", "Welche Personen heiraten fiktive Charaktere gespielt von Daniella Alonso ?", "Welche Personen heirateten fiktive Charaktere gespielt von Daniella Alonso ?", "Wer heiratet fiktive Charaktere gespielt von Daniella Alonso ?", "Wer heiratete fiktive Charaktere gespielt von Daniella Alonso ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Daniella_Alonso>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Daryl Hannah ?", "Welche Person heiratete fiktive Charaktere gespielt von Daryl Hannah ?", "Welche Personen heiraten fiktive Charaktere gespielt von Daryl Hannah ?", "Welche Personen heirateten fiktive Charaktere gespielt von Daryl Hannah ?", "Wer heiratet fiktive Charaktere gespielt von Daryl Hannah ?", "Wer heiratete fiktive Charaktere gespielt von Daryl Hannah ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Daryl_Hannah>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von David Boreanaz ?", "Welche Person heiratete fiktive Charaktere gespielt von David Boreanaz ?", "Welche Personen heiraten fiktive Charaktere gespielt von David Boreanaz ?", "Welche Personen heirateten fiktive Charaktere gespielt von David Boreanaz ?", "Wer heiratet fiktive Charaktere gespielt von David Boreanaz ?", "Wer heiratete fiktive Charaktere gespielt von David Boreanaz ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/David_Boreanaz>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Debra Jo Rupp ?", "Welche Person heiratete fiktive Charaktere gespielt von Debra Jo Rupp ?", "Welche Personen heiraten fiktive Charaktere gespielt von Debra Jo Rupp ?", "Welche Personen heirateten fiktive Charaktere gespielt von Debra Jo Rupp ?", "Wer heiratet fiktive Charaktere gespielt von Debra Jo Rupp ?", "Wer heiratete fiktive Charaktere gespielt von Debra Jo Rupp ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Debra_Jo_Rupp>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Patrick Duffy ?", "Welche Person heiratete fiktive Charaktere gespielt von Patrick Duffy ?", "Welche Personen heiraten fiktive Charaktere gespielt von Patrick Duffy ?", "Welche Personen heirateten fiktive Charaktere gespielt von Patrick Duffy ?", "Wer heiratet fiktive Charaktere gespielt von Patrick Duffy ?", "Wer heiratete fiktive Charaktere gespielt von Patrick Duffy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Patrick_Duffy>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Paul Adelstein ?", "Welche Person heiratete fiktive Charaktere gespielt von Paul Adelstein ?", "Welche Personen heiraten fiktive Charaktere gespielt von Paul Adelstein ?", "Welche Personen heirateten fiktive Charaktere gespielt von Paul Adelstein ?", "Wer heiratet fiktive Charaktere gespielt von Paul Adelstein ?", "Wer heiratete fiktive Charaktere gespielt von Paul Adelstein ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Paul_Adelstein>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Paul Dano ?", "Welche Person heiratete fiktive Charaktere gespielt von Paul Dano ?", "Welche Personen heiraten fiktive Charaktere gespielt von Paul Dano ?", "Welche Personen heirateten fiktive Charaktere gespielt von Paul Dano ?", "Wer heiratet fiktive Charaktere gespielt von Paul Dano ?", "Wer heiratete fiktive Charaktere gespielt von Paul Dano ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Paul_Dano>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Peggy Ashcroft ?", "Welche Person heiratete fiktive Charaktere gespielt von Peggy Ashcroft ?", "Welche Personen heiraten fiktive Charaktere gespielt von Peggy Ashcroft ?", "Welche Personen heirateten fiktive Charaktere gespielt von Peggy Ashcroft ?", "Wer heiratet fiktive Charaktere gespielt von Peggy Ashcroft ?", "Wer heiratete fiktive Charaktere gespielt von Peggy Ashcroft ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Peggy_Ashcroft>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Robert Montgomery (Schauspieler) ?", "Welche Person heiratete fiktive Charaktere gespielt von Robert Montgomery (Schauspieler) ?", "Welche Personen heiraten fiktive Charaktere gespielt von Robert Montgomery (Schauspieler) ?", "Welche Personen heirateten fiktive Charaktere gespielt von Robert Montgomery (Schauspieler) ?", "Wer heiratet fiktive Charaktere gespielt von Robert Montgomery (Schauspieler) ?", "Wer heiratete fiktive Charaktere gespielt von Robert Montgomery (Schauspieler) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Robert_Montgomery_(actor)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Sex and the City ?", "Welche Person heiratete fiktive Charaktere gespielt von Sex and the City ?", "Welche Personen heiraten fiktive Charaktere gespielt von Sex and the City ?", "Welche Personen heirateten fiktive Charaktere gespielt von Sex and the City ?", "Wer heiratet fiktive Charaktere gespielt von Sex and the City ?", "Wer heiratete fiktive Charaktere gespielt von Sex and the City ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sex_and_the_City>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Shelley Morrison ?", "Welche Person heiratete fiktive Charaktere gespielt von Shelley Morrison ?", "Welche Personen heiraten fiktive Charaktere gespielt von Shelley Morrison ?", "Welche Personen heirateten fiktive Charaktere gespielt von Shelley Morrison ?", "Wer heiratet fiktive Charaktere gespielt von Shelley Morrison ?", "Wer heiratete fiktive Charaktere gespielt von Shelley Morrison ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Shelley_Morrison>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Sherri Saum ?", "Welche Person heiratete fiktive Charaktere gespielt von Sherri Saum ?", "Welche Personen heiraten fiktive Charaktere gespielt von Sherri Saum ?", "Welche Personen heirateten fiktive Charaktere gespielt von Sherri Saum ?", "Wer heiratet fiktive Charaktere gespielt von Sherri Saum ?", "Wer heiratete fiktive Charaktere gespielt von Sherri Saum ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sherri_Saum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Sherry Stringfield ?", "Welche Person heiratete fiktive Charaktere gespielt von Sherry Stringfield ?", "Welche Personen heiraten fiktive Charaktere gespielt von Sherry Stringfield ?", "Welche Personen heirateten fiktive Charaktere gespielt von Sherry Stringfield ?", "Wer heiratet fiktive Charaktere gespielt von Sherry Stringfield ?", "Wer heiratete fiktive Charaktere gespielt von Sherry Stringfield ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sherry_Stringfield>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Shiri Appleby ?", "Welche Person heiratete fiktive Charaktere gespielt von Shiri Appleby ?", "Welche Personen heiraten fiktive Charaktere gespielt von Shiri Appleby ?", "Welche Personen heirateten fiktive Charaktere gespielt von Shiri Appleby ?", "Wer heiratet fiktive Charaktere gespielt von Shiri Appleby ?", "Wer heiratete fiktive Charaktere gespielt von Shiri Appleby ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Shiri_Appleby>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Suzanne Rogers ?", "Welche Person heiratete fiktive Charaktere gespielt von Suzanne Rogers ?", "Welche Personen heiraten fiktive Charaktere gespielt von Suzanne Rogers ?", "Welche Personen heirateten fiktive Charaktere gespielt von Suzanne Rogers ?", "Wer heiratet fiktive Charaktere gespielt von Suzanne Rogers ?", "Wer heiratete fiktive Charaktere gespielt von Suzanne Rogers ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Suzanne_Rogers>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von T. R. Knight ?", "Welche Person heiratete fiktive Charaktere gespielt von T. R. Knight ?", "Welche Personen heiraten fiktive Charaktere gespielt von T. R. Knight ?", "Welche Personen heirateten fiktive Charaktere gespielt von T. R. Knight ?", "Wer heiratet fiktive Charaktere gespielt von T. R. Knight ?", "Wer heiratete fiktive Charaktere gespielt von T. R. Knight ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/T._R._Knight>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Taye Diggs ?", "Welche Person heiratete fiktive Charaktere gespielt von Taye Diggs ?", "Welche Personen heiraten fiktive Charaktere gespielt von Taye Diggs ?", "Welche Personen heirateten fiktive Charaktere gespielt von Taye Diggs ?", "Wer heiratet fiktive Charaktere gespielt von Taye Diggs ?", "Wer heiratete fiktive Charaktere gespielt von Taye Diggs ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Taye_Diggs>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Victor Webster ?", "Welche Person heiratete fiktive Charaktere gespielt von Victor Webster ?", "Welche Personen heiraten fiktive Charaktere gespielt von Victor Webster ?", "Welche Personen heirateten fiktive Charaktere gespielt von Victor Webster ?", "Wer heiratet fiktive Charaktere gespielt von Victor Webster ?", "Wer heiratete fiktive Charaktere gespielt von Victor Webster ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Victor_Webster>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Victoria Clark ?", "Welche Person heiratete fiktive Charaktere gespielt von Victoria Clark ?", "Welche Personen heiraten fiktive Charaktere gespielt von Victoria Clark ?", "Welche Personen heirateten fiktive Charaktere gespielt von Victoria Clark ?", "Wer heiratet fiktive Charaktere gespielt von Victoria Clark ?", "Wer heiratete fiktive Charaktere gespielt von Victoria Clark ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Victoria_Clark>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Virginia Madsen ?", "Welche Person heiratete fiktive Charaktere gespielt von Virginia Madsen ?", "Welche Personen heiraten fiktive Charaktere gespielt von Virginia Madsen ?", "Welche Personen heirateten fiktive Charaktere gespielt von Virginia Madsen ?", "Wer heiratet fiktive Charaktere gespielt von Virginia Madsen ?", "Wer heiratete fiktive Charaktere gespielt von Virginia Madsen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Virginia_Madsen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Merle Louise ?", "Welche Person heiratete fiktive Charaktere gespielt von Merle Louise ?", "Welche Personen heiraten fiktive Charaktere gespielt von Merle Louise ?", "Welche Personen heirateten fiktive Charaktere gespielt von Merle Louise ?", "Wer heiratet fiktive Charaktere gespielt von Merle Louise ?", "Wer heiratete fiktive Charaktere gespielt von Merle Louise ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Merle_Louise>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Eva Green ?", "Welche Person heiratete fiktive Charaktere gespielt von Eva Green ?", "Welche Personen heiraten fiktive Charaktere gespielt von Eva Green ?", "Welche Personen heirateten fiktive Charaktere gespielt von Eva Green ?", "Wer heiratet fiktive Charaktere gespielt von Eva Green ?", "Wer heiratete fiktive Charaktere gespielt von Eva Green ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Eva_Green>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Naya Rivera ?", "Welche Person heiratete fiktive Charaktere gespielt von Naya Rivera ?", "Welche Personen heiraten fiktive Charaktere gespielt von Naya Rivera ?", "Welche Personen heirateten fiktive Charaktere gespielt von Naya Rivera ?", "Wer heiratet fiktive Charaktere gespielt von Naya Rivera ?", "Wer heiratete fiktive Charaktere gespielt von Naya Rivera ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Naya_Rivera>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Stacy Haiduk ?", "Welche Person heiratete fiktive Charaktere gespielt von Stacy Haiduk ?", "Welche Personen heiraten fiktive Charaktere gespielt von Stacy Haiduk ?", "Welche Personen heirateten fiktive Charaktere gespielt von Stacy Haiduk ?", "Wer heiratet fiktive Charaktere gespielt von Stacy Haiduk ?", "Wer heiratete fiktive Charaktere gespielt von Stacy Haiduk ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Stacy_Haiduk>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Star Wars: Episode III – Die Rache der Sith ?", "Welche Person heiratete fiktive Charaktere gespielt von Star Wars: Episode III – Die Rache der Sith ?", "Welche Personen heiraten fiktive Charaktere gespielt von Star Wars: Episode III – Die Rache der Sith ?", "Welche Personen heirateten fiktive Charaktere gespielt von Star Wars: Episode III – Die Rache der Sith ?", "Wer heiratet fiktive Charaktere gespielt von Star Wars: Episode III – Die Rache der Sith ?", "Wer heiratete fiktive Charaktere gespielt von Star Wars: Episode III – Die Rache der Sith ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Star_Wars:_Episode_III_–_Revenge_of_the_Sith>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Star Wars: Der Aufstieg Skywalkers ?", "Welche Person heiratete fiktive Charaktere gespielt von Star Wars: Der Aufstieg Skywalkers ?", "Welche Personen heiraten fiktive Charaktere gespielt von Star Wars: Der Aufstieg Skywalkers ?", "Welche Personen heirateten fiktive Charaktere gespielt von Star Wars: Der Aufstieg Skywalkers ?", "Wer heiratet fiktive Charaktere gespielt von Star Wars: Der Aufstieg Skywalkers ?", "Wer heiratete fiktive Charaktere gespielt von Star Wars: Der Aufstieg Skywalkers ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Star_Wars:_The_Rise_of_Skywalker>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Stefanie Scott ?", "Welche Person heiratete fiktive Charaktere gespielt von Stefanie Scott ?", "Welche Personen heiraten fiktive Charaktere gespielt von Stefanie Scott ?", "Welche Personen heirateten fiktive Charaktere gespielt von Stefanie Scott ?", "Wer heiratet fiktive Charaktere gespielt von Stefanie Scott ?", "Wer heiratete fiktive Charaktere gespielt von Stefanie Scott ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Stefanie_Scott>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Wentworth Miller ?", "Welche Person heiratete fiktive Charaktere gespielt von Wentworth Miller ?", "Welche Personen heiraten fiktive Charaktere gespielt von Wentworth Miller ?", "Welche Personen heirateten fiktive Charaktere gespielt von Wentworth Miller ?", "Wer heiratet fiktive Charaktere gespielt von Wentworth Miller ?", "Wer heiratete fiktive Charaktere gespielt von Wentworth Miller ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Wentworth_Miller>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "13",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet fiktive Charaktere gespielt von Michelle Fairley ?", "Welche Person heiratete fiktive Charaktere gespielt von Michelle Fairley ?", "Welche Personen heiraten fiktive Charaktere gespielt von Michelle Fairley ?", "Welche Personen heirateten fiktive Charaktere gespielt von Michelle Fairley ?", "Wer heiratet fiktive Charaktere gespielt von Michelle Fairley ?", "Wer heiratete fiktive Charaktere gespielt von Michelle Fairley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michelle_Fairley>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Luana Patten ?", "Welche Person heiratete Personen geheiratet von Luana Patten ?", "Welche Personen heiraten Personen geheiratet von Luana Patten ?", "Welche Personen heirateten Personen geheiratet von Luana Patten ?", "Wer heiratet Personen geheiratet von Luana Patten ?", "Wer heiratete Personen geheiratet von Luana Patten ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Luana_Patten> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Lucia Bosè ?", "Welche Person heiratete Personen geheiratet von Lucia Bosè ?", "Welche Personen heiraten Personen geheiratet von Lucia Bosè ?", "Welche Personen heirateten Personen geheiratet von Lucia Bosè ?", "Wer heiratet Personen geheiratet von Lucia Bosè ?", "Wer heiratete Personen geheiratet von Lucia Bosè ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucia_Bosè> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Lucia Moholy ?", "Welche Person heiratete Personen geheiratet von Lucia Moholy ?", "Welche Personen heiraten Personen geheiratet von Lucia Moholy ?", "Welche Personen heirateten Personen geheiratet von Lucia Moholy ?", "Wer heiratet Personen geheiratet von Lucia Moholy ?", "Wer heiratete Personen geheiratet von Lucia Moholy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucia_Moholy> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Lucilla ?", "Welche Person heiratete Personen geheiratet von Lucilla ?", "Welche Personen heiraten Personen geheiratet von Lucilla ?", "Welche Personen heirateten Personen geheiratet von Lucilla ?", "Wer heiratet Personen geheiratet von Lucilla ?", "Wer heiratete Personen geheiratet von Lucilla ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucilla> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Lucius Verus ?", "Welche Person heiratete Personen geheiratet von Lucius Verus ?", "Welche Personen heiraten Personen geheiratet von Lucius Verus ?", "Welche Personen heirateten Personen geheiratet von Lucius Verus ?", "Wer heiratet Personen geheiratet von Lucius Verus ?", "Wer heiratete Personen geheiratet von Lucius Verus ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucius_Verus> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Ludovico III. Gonzaga ?", "Welche Person heiratete Personen geheiratet von Ludovico III. Gonzaga ?", "Welche Personen heiraten Personen geheiratet von Ludovico III. Gonzaga ?", "Welche Personen heirateten Personen geheiratet von Ludovico III. Gonzaga ?", "Wer heiratet Personen geheiratet von Ludovico III. Gonzaga ?", "Wer heiratete Personen geheiratet von Ludovico III. Gonzaga ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ludovico_III_Gonzaga,_Marquis_of_Mantua> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Luis Fortuño ?", "Welche Person heiratete Personen geheiratet von Luis Fortuño ?", "Welche Personen heiraten Personen geheiratet von Luis Fortuño ?", "Welche Personen heirateten Personen geheiratet von Luis Fortuño ?", "Wer heiratet Personen geheiratet von Luis Fortuño ?", "Wer heiratete Personen geheiratet von Luis Fortuño ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Luis_Fortuño> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Lysette Anthony ?", "Welche Person heiratete Personen geheiratet von Lysette Anthony ?", "Welche Personen heiraten Personen geheiratet von Lysette Anthony ?", "Welche Personen heirateten Personen geheiratet von Lysette Anthony ?", "Wer heiratet Personen geheiratet von Lysette Anthony ?", "Wer heiratete Personen geheiratet von Lysette Anthony ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lysette_Anthony> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von László Moholy-Nagy ?", "Welche Person heiratete Personen geheiratet von László Moholy-Nagy ?", "Welche Personen heiraten Personen geheiratet von László Moholy-Nagy ?", "Welche Personen heirateten Personen geheiratet von László Moholy-Nagy ?", "Wer heiratet Personen geheiratet von László Moholy-Nagy ?", "Wer heiratete Personen geheiratet von László Moholy-Nagy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/László_Moholy-Nagy> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Mae West ?", "Welche Person heiratete Personen geheiratet von Mae West ?", "Welche Personen heiraten Personen geheiratet von Mae West ?", "Welche Personen heirateten Personen geheiratet von Mae West ?", "Wer heiratet Personen geheiratet von Mae West ?", "Wer heiratete Personen geheiratet von Mae West ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mae_West> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Malcolm Turnbull ?", "Welche Person heiratete Personen geheiratet von Malcolm Turnbull ?", "Welche Personen heiraten Personen geheiratet von Malcolm Turnbull ?", "Welche Personen heirateten Personen geheiratet von Malcolm Turnbull ?", "Wer heiratet Personen geheiratet von Malcolm Turnbull ?", "Wer heiratete Personen geheiratet von Malcolm Turnbull ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Malcolm_Turnbull> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Walerij Borsow ?", "Welche Person heiratete Personen geheiratet von Walerij Borsow ?", "Welche Personen heiraten Personen geheiratet von Walerij Borsow ?", "Welche Personen heirateten Personen geheiratet von Walerij Borsow ?", "Wer heiratet Personen geheiratet von Walerij Borsow ?", "Wer heiratete Personen geheiratet von Walerij Borsow ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Valeriy_Borzov> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Suriyothai ?", "Welche Person heiratete Personen geheiratet von Suriyothai ?", "Welche Personen heiraten Personen geheiratet von Suriyothai ?", "Welche Personen heirateten Personen geheiratet von Suriyothai ?", "Wer heiratet Personen geheiratet von Suriyothai ?", "Wer heiratete Personen geheiratet von Suriyothai ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Suriyothai> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Manuel Sadosky ?", "Welche Person heiratete Personen geheiratet von Manuel Sadosky ?", "Welche Personen heiraten Personen geheiratet von Manuel Sadosky ?", "Welche Personen heirateten Personen geheiratet von Manuel Sadosky ?", "Wer heiratet Personen geheiratet von Manuel Sadosky ?", "Wer heiratete Personen geheiratet von Manuel Sadosky ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Manuel_Sadosky> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Blanche von Namur ?", "Welche Person heiratete Personen geheiratet von Blanche von Namur ?", "Welche Personen heiraten Personen geheiratet von Blanche von Namur ?", "Welche Personen heirateten Personen geheiratet von Blanche von Namur ?", "Wer heiratet Personen geheiratet von Blanche von Namur ?", "Wer heiratete Personen geheiratet von Blanche von Namur ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Blanche_of_Namur> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Bořivoj I. ?", "Welche Person heiratete Personen geheiratet von Bořivoj I. ?", "Welche Personen heiraten Personen geheiratet von Bořivoj I. ?", "Welche Personen heirateten Personen geheiratet von Bořivoj I. ?", "Wer heiratet Personen geheiratet von Bořivoj I. ?", "Wer heiratete Personen geheiratet von Bořivoj I. ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bořivoj_I,_Duke_of_Bohemia> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Desmond FitzGerald ?", "Welche Person heiratete Personen geheiratet von Desmond FitzGerald ?", "Welche Personen heiraten Personen geheiratet von Desmond FitzGerald ?", "Welche Personen heirateten Personen geheiratet von Desmond FitzGerald ?", "Wer heiratet Personen geheiratet von Desmond FitzGerald ?", "Wer heiratete Personen geheiratet von Desmond FitzGerald ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Desmond_FitzGerald_(politician)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Diahann Carroll ?", "Welche Person heiratete Personen geheiratet von Diahann Carroll ?", "Welche Personen heiraten Personen geheiratet von Diahann Carroll ?", "Welche Personen heirateten Personen geheiratet von Diahann Carroll ?", "Wer heiratet Personen geheiratet von Diahann Carroll ?", "Wer heiratete Personen geheiratet von Diahann Carroll ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Diahann_Carroll> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Dick Cheney ?", "Welche Person heiratete Personen geheiratet von Dick Cheney ?", "Welche Personen heiraten Personen geheiratet von Dick Cheney ?", "Welche Personen heirateten Personen geheiratet von Dick Cheney ?", "Wer heiratet Personen geheiratet von Dick Cheney ?", "Wer heiratete Personen geheiratet von Dick Cheney ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Dick_Cheney> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Gladys Moore Vanderbilt ?", "Welche Person heiratete Personen geheiratet von Gladys Moore Vanderbilt ?", "Welche Personen heiraten Personen geheiratet von Gladys Moore Vanderbilt ?", "Welche Personen heirateten Personen geheiratet von Gladys Moore Vanderbilt ?", "Wer heiratet Personen geheiratet von Gladys Moore Vanderbilt ?", "Wer heiratete Personen geheiratet von Gladys Moore Vanderbilt ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gladys_Vanderbilt_Széchenyi> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Grigori Wassiljewitsch Alexandrow ?", "Welche Person heiratete Personen geheiratet von Grigori Wassiljewitsch Alexandrow ?", "Welche Personen heiraten Personen geheiratet von Grigori Wassiljewitsch Alexandrow ?", "Welche Personen heirateten Personen geheiratet von Grigori Wassiljewitsch Alexandrow ?", "Wer heiratet Personen geheiratet von Grigori Wassiljewitsch Alexandrow ?", "Wer heiratete Personen geheiratet von Grigori Wassiljewitsch Alexandrow ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Grigori_Aleksandrov> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Kim Hunter ?", "Welche Person heiratete Personen geheiratet von Kim Hunter ?", "Welche Personen heiraten Personen geheiratet von Kim Hunter ?", "Welche Personen heirateten Personen geheiratet von Kim Hunter ?", "Wer heiratet Personen geheiratet von Kim Hunter ?", "Wer heiratete Personen geheiratet von Kim Hunter ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kim_Hunter> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Kishore Kumar ?", "Welche Person heiratete Personen geheiratet von Kishore Kumar ?", "Welche Personen heiraten Personen geheiratet von Kishore Kumar ?", "Welche Personen heirateten Personen geheiratet von Kishore Kumar ?", "Wer heiratet Personen geheiratet von Kishore Kumar ?", "Wer heiratete Personen geheiratet von Kishore Kumar ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kishore_Kumar> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Franz Xaver von Bourbon-Parma ?", "Welche Person heiratete Personen geheiratet von Franz Xaver von Bourbon-Parma ?", "Welche Personen heiraten Personen geheiratet von Franz Xaver von Bourbon-Parma ?", "Welche Personen heirateten Personen geheiratet von Franz Xaver von Bourbon-Parma ?", "Wer heiratet Personen geheiratet von Franz Xaver von Bourbon-Parma ?", "Wer heiratete Personen geheiratet von Franz Xaver von Bourbon-Parma ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Prince_Xavier_of_Bourbon-Parma> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Ratna von Nepal ?", "Welche Person heiratete Personen geheiratet von Ratna von Nepal ?", "Welche Personen heiraten Personen geheiratet von Ratna von Nepal ?", "Welche Personen heirateten Personen geheiratet von Ratna von Nepal ?", "Wer heiratet Personen geheiratet von Ratna von Nepal ?", "Wer heiratete Personen geheiratet von Ratna von Nepal ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Queen_Ratna_of_Nepal> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Quinn Martin ?", "Welche Person heiratete Personen geheiratet von Quinn Martin ?", "Welche Personen heiraten Personen geheiratet von Quinn Martin ?", "Welche Personen heirateten Personen geheiratet von Quinn Martin ?", "Wer heiratet Personen geheiratet von Quinn Martin ?", "Wer heiratete Personen geheiratet von Quinn Martin ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Quinn_Martin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Rachel Miner ?", "Welche Person heiratete Personen geheiratet von Rachel Miner ?", "Welche Personen heiraten Personen geheiratet von Rachel Miner ?", "Welche Personen heirateten Personen geheiratet von Rachel Miner ?", "Wer heiratet Personen geheiratet von Rachel Miner ?", "Wer heiratete Personen geheiratet von Rachel Miner ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rachel_Miner> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Rachel Portman ?", "Welche Person heiratete Personen geheiratet von Rachel Portman ?", "Welche Personen heiraten Personen geheiratet von Rachel Portman ?", "Welche Personen heirateten Personen geheiratet von Rachel Portman ?", "Wer heiratet Personen geheiratet von Rachel Portman ?", "Wer heiratete Personen geheiratet von Rachel Portman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rachel_Portman> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Iulia (Tochter Agrippas) ?", "Welche Person heiratete Personen geheiratet von Iulia (Tochter Agrippas) ?", "Welche Personen heiraten Personen geheiratet von Iulia (Tochter Agrippas) ?", "Welche Personen heirateten Personen geheiratet von Iulia (Tochter Agrippas) ?", "Wer heiratet Personen geheiratet von Iulia (Tochter Agrippas) ?", "Wer heiratete Personen geheiratet von Iulia (Tochter Agrippas) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Julia_the_Younger> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Richard Lane (Schriftsteller) ?", "Welche Person heiratete Personen geheiratet von Richard Lane (Schriftsteller) ?", "Welche Personen heiraten Personen geheiratet von Richard Lane (Schriftsteller) ?", "Welche Personen heirateten Personen geheiratet von Richard Lane (Schriftsteller) ?", "Wer heiratet Personen geheiratet von Richard Lane (Schriftsteller) ?", "Wer heiratete Personen geheiratet von Richard Lane (Schriftsteller) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Richard_Lane_(writer)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Jakob II. (Zypern) ?", "Welche Person heiratete Personen geheiratet von Jakob II. (Zypern) ?", "Welche Personen heiraten Personen geheiratet von Jakob II. (Zypern) ?", "Welche Personen heirateten Personen geheiratet von Jakob II. (Zypern) ?", "Wer heiratet Personen geheiratet von Jakob II. (Zypern) ?", "Wer heiratete Personen geheiratet von Jakob II. (Zypern) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/James_II_of_Cyprus> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Alan Halsall ?", "Welche Person heiratete Personen geheiratet von Alan Halsall ?", "Welche Personen heiraten Personen geheiratet von Alan Halsall ?", "Welche Personen heirateten Personen geheiratet von Alan Halsall ?", "Wer heiratet Personen geheiratet von Alan Halsall ?", "Wer heiratete Personen geheiratet von Alan Halsall ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alan_Halsall> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Albert S. Ruddy ?", "Welche Person heiratete Personen geheiratet von Albert S. Ruddy ?", "Welche Personen heiraten Personen geheiratet von Albert S. Ruddy ?", "Welche Personen heirateten Personen geheiratet von Albert S. Ruddy ?", "Wer heiratet Personen geheiratet von Albert S. Ruddy ?", "Wer heiratete Personen geheiratet von Albert S. Ruddy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Albert_S._Ruddy> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Alex O’Loughlin ?", "Welche Person heiratete Personen geheiratet von Alex O’Loughlin ?", "Welche Personen heiraten Personen geheiratet von Alex O’Loughlin ?", "Welche Personen heirateten Personen geheiratet von Alex O’Loughlin ?", "Wer heiratet Personen geheiratet von Alex O’Loughlin ?", "Wer heiratete Personen geheiratet von Alex O’Loughlin ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alex_O'Loughlin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Alexander Borissowitsch Godunow ?", "Welche Person heiratete Personen geheiratet von Alexander Borissowitsch Godunow ?", "Welche Personen heiraten Personen geheiratet von Alexander Borissowitsch Godunow ?", "Welche Personen heirateten Personen geheiratet von Alexander Borissowitsch Godunow ?", "Wer heiratet Personen geheiratet von Alexander Borissowitsch Godunow ?", "Wer heiratete Personen geheiratet von Alexander Borissowitsch Godunow ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alexander_Godunov> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Alfonso I. d’Este ?", "Welche Person heiratete Personen geheiratet von Alfonso I. d’Este ?", "Welche Personen heiraten Personen geheiratet von Alfonso I. d’Este ?", "Welche Personen heirateten Personen geheiratet von Alfonso I. d’Este ?", "Wer heiratet Personen geheiratet von Alfonso I. d’Este ?", "Wer heiratete Personen geheiratet von Alfonso I. d’Este ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alfonso_I_d'Este,_Duke_of_Ferrara> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Alfred Lunt ?", "Welche Person heiratete Personen geheiratet von Alfred Lunt ?", "Welche Personen heiraten Personen geheiratet von Alfred Lunt ?", "Welche Personen heirateten Personen geheiratet von Alfred Lunt ?", "Wer heiratet Personen geheiratet von Alfred Lunt ?", "Wer heiratete Personen geheiratet von Alfred Lunt ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alfred_Lunt> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Alistair Petrie ?", "Welche Person heiratete Personen geheiratet von Alistair Petrie ?", "Welche Personen heiraten Personen geheiratet von Alistair Petrie ?", "Welche Personen heirateten Personen geheiratet von Alistair Petrie ?", "Wer heiratet Personen geheiratet von Alistair Petrie ?", "Wer heiratete Personen geheiratet von Alistair Petrie ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alistair_Petrie> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Allan Edwall ?", "Welche Person heiratete Personen geheiratet von Allan Edwall ?", "Welche Personen heiraten Personen geheiratet von Allan Edwall ?", "Welche Personen heirateten Personen geheiratet von Allan Edwall ?", "Wer heiratet Personen geheiratet von Allan Edwall ?", "Wer heiratete Personen geheiratet von Allan Edwall ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Allan_Edwall> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Allen Tate ?", "Welche Person heiratete Personen geheiratet von Allen Tate ?", "Welche Personen heiraten Personen geheiratet von Allen Tate ?", "Welche Personen heirateten Personen geheiratet von Allen Tate ?", "Wer heiratet Personen geheiratet von Allen Tate ?", "Wer heiratete Personen geheiratet von Allen Tate ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Allen_Tate> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Chamlong Srimuang ?", "Welche Person heiratete Personen geheiratet von Chamlong Srimuang ?", "Welche Personen heiraten Personen geheiratet von Chamlong Srimuang ?", "Welche Personen heirateten Personen geheiratet von Chamlong Srimuang ?", "Wer heiratet Personen geheiratet von Chamlong Srimuang ?", "Wer heiratete Personen geheiratet von Chamlong Srimuang ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chamlong_Srimuang> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Karl I. (Valois) ?", "Welche Person heiratete Personen geheiratet von Karl I. (Valois) ?", "Welche Personen heiraten Personen geheiratet von Karl I. (Valois) ?", "Welche Personen heirateten Personen geheiratet von Karl I. (Valois) ?", "Wer heiratet Personen geheiratet von Karl I. (Valois) ?", "Wer heiratete Personen geheiratet von Karl I. (Valois) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles,_Count_of_Valois> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Charles Howard, 1. Earl of Nottingham ?", "Welche Person heiratete Personen geheiratet von Charles Howard, 1. Earl of Nottingham ?", "Welche Personen heiraten Personen geheiratet von Charles Howard, 1. Earl of Nottingham ?", "Welche Personen heirateten Personen geheiratet von Charles Howard, 1. Earl of Nottingham ?", "Wer heiratet Personen geheiratet von Charles Howard, 1. Earl of Nottingham ?", "Wer heiratete Personen geheiratet von Charles Howard, 1. Earl of Nottingham ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles_Howard,_1st_Earl_of_Nottingham> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Karl III. Philipp (Pfalz) ?", "Welche Person heiratete Personen geheiratet von Karl III. Philipp (Pfalz) ?", "Welche Personen heiraten Personen geheiratet von Karl III. Philipp (Pfalz) ?", "Welche Personen heirateten Personen geheiratet von Karl III. Philipp (Pfalz) ?", "Wer heiratet Personen geheiratet von Karl III. Philipp (Pfalz) ?", "Wer heiratete Personen geheiratet von Karl III. Philipp (Pfalz) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles_III_Philip,_Elector_Palatine> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) ?", "Welche Person heiratete Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) ?", "Welche Personen heiraten Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) ?", "Welche Personen heirateten Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) ?", "Wer heiratet Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) ?", "Wer heiratete Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles_III_William,_Margrave_of_Baden-Durlach> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Charles Townshend (Politiker) ?", "Welche Person heiratete Personen geheiratet von Charles Townshend (Politiker) ?", "Welche Personen heiraten Personen geheiratet von Charles Townshend (Politiker) ?", "Welche Personen heirateten Personen geheiratet von Charles Townshend (Politiker) ?", "Wer heiratet Personen geheiratet von Charles Townshend (Politiker) ?", "Wer heiratete Personen geheiratet von Charles Townshend (Politiker) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles_Townshend> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Charlton Heston ?", "Welche Person heiratete Personen geheiratet von Charlton Heston ?", "Welche Personen heiraten Personen geheiratet von Charlton Heston ?", "Welche Personen heirateten Personen geheiratet von Charlton Heston ?", "Wer heiratet Personen geheiratet von Charlton Heston ?", "Wer heiratete Personen geheiratet von Charlton Heston ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charlton_Heston> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Nieves Navarro ?", "Welche Person heiratete Personen geheiratet von Nieves Navarro ?", "Welche Personen heiraten Personen geheiratet von Nieves Navarro ?", "Welche Personen heirateten Personen geheiratet von Nieves Navarro ?", "Wer heiratet Personen geheiratet von Nieves Navarro ?", "Wer heiratete Personen geheiratet von Nieves Navarro ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Nieves_Navarro> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Nnamdi Azikiwe ?", "Welche Person heiratete Personen geheiratet von Nnamdi Azikiwe ?", "Welche Personen heiraten Personen geheiratet von Nnamdi Azikiwe ?", "Welche Personen heirateten Personen geheiratet von Nnamdi Azikiwe ?", "Wer heiratet Personen geheiratet von Nnamdi Azikiwe ?", "Wer heiratete Personen geheiratet von Nnamdi Azikiwe ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Nnamdi_Azikiwe> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Noah Baumbach ?", "Welche Person heiratete Personen geheiratet von Noah Baumbach ?", "Welche Personen heiraten Personen geheiratet von Noah Baumbach ?", "Welche Personen heirateten Personen geheiratet von Noah Baumbach ?", "Wer heiratet Personen geheiratet von Noah Baumbach ?", "Wer heiratete Personen geheiratet von Noah Baumbach ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Noah_Baumbach> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Noah Bean ?", "Welche Person heiratete Personen geheiratet von Noah Bean ?", "Welche Personen heiraten Personen geheiratet von Noah Bean ?", "Welche Personen heirateten Personen geheiratet von Noah Bean ?", "Wer heiratet Personen geheiratet von Noah Bean ?", "Wer heiratete Personen geheiratet von Noah Bean ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Noah_Bean> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Georg I. (Hessen-Darmstadt) ?", "Welche Person heiratete Personen geheiratet von Georg I. (Hessen-Darmstadt) ?", "Welche Personen heiraten Personen geheiratet von Georg I. (Hessen-Darmstadt) ?", "Welche Personen heirateten Personen geheiratet von Georg I. (Hessen-Darmstadt) ?", "Wer heiratet Personen geheiratet von Georg I. (Hessen-Darmstadt) ?", "Wer heiratete Personen geheiratet von Georg I. (Hessen-Darmstadt) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_I,_Landgrave_of_Hesse-Darmstadt> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Sulochana Gadgil ?", "Welche Person heiratete Personen geheiratet von Sulochana Gadgil ?", "Welche Personen heiraten Personen geheiratet von Sulochana Gadgil ?", "Welche Personen heirateten Personen geheiratet von Sulochana Gadgil ?", "Wer heiratet Personen geheiratet von Sulochana Gadgil ?", "Wer heiratete Personen geheiratet von Sulochana Gadgil ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sulochana_Gadgil> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Sulinyavongsa ?", "Welche Person heiratete Personen geheiratet von Sulinyavongsa ?", "Welche Personen heiraten Personen geheiratet von Sulinyavongsa ?", "Welche Personen heirateten Personen geheiratet von Sulinyavongsa ?", "Wer heiratet Personen geheiratet von Sulinyavongsa ?", "Wer heiratete Personen geheiratet von Sulinyavongsa ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sourigna_Vongsa> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Barbara Stühlmeyer ?", "Welche Person heiratete Personen geheiratet von Barbara Stühlmeyer ?", "Welche Personen heiraten Personen geheiratet von Barbara Stühlmeyer ?", "Welche Personen heirateten Personen geheiratet von Barbara Stühlmeyer ?", "Wer heiratet Personen geheiratet von Barbara Stühlmeyer ?", "Wer heiratete Personen geheiratet von Barbara Stühlmeyer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Barbara_Stühlmeyer> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Barbara von Brandenburg (1422–1481) ?", "Welche Person heiratete Personen geheiratet von Barbara von Brandenburg (1422–1481) ?", "Welche Personen heiraten Personen geheiratet von Barbara von Brandenburg (1422–1481) ?", "Welche Personen heirateten Personen geheiratet von Barbara von Brandenburg (1422–1481) ?", "Wer heiratet Personen geheiratet von Barbara von Brandenburg (1422–1481) ?", "Wer heiratete Personen geheiratet von Barbara von Brandenburg (1422–1481) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Barbara_of_Brandenburg,_Marquise_of_Mantua> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Frederick Cavendish ?", "Welche Person heiratete Personen geheiratet von Frederick Cavendish ?", "Welche Personen heiraten Personen geheiratet von Frederick Cavendish ?", "Welche Personen heirateten Personen geheiratet von Frederick Cavendish ?", "Wer heiratet Personen geheiratet von Frederick Cavendish ?", "Wer heiratete Personen geheiratet von Frederick Cavendish ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lord_Frederick_Cavendish> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Lorenzo di Piero de’ Medici ?", "Welche Person heiratete Personen geheiratet von Lorenzo di Piero de’ Medici ?", "Welche Personen heiraten Personen geheiratet von Lorenzo di Piero de’ Medici ?", "Welche Personen heirateten Personen geheiratet von Lorenzo di Piero de’ Medici ?", "Wer heiratet Personen geheiratet von Lorenzo di Piero de’ Medici ?", "Wer heiratete Personen geheiratet von Lorenzo di Piero de’ Medici ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lorenzo_de'_Medici,_Duke_of_Urbino> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Louis-Ferdinand Céline ?", "Welche Person heiratete Personen geheiratet von Louis-Ferdinand Céline ?", "Welche Personen heiraten Personen geheiratet von Louis-Ferdinand Céline ?", "Welche Personen heirateten Personen geheiratet von Louis-Ferdinand Céline ?", "Wer heiratet Personen geheiratet von Louis-Ferdinand Céline ?", "Wer heiratete Personen geheiratet von Louis-Ferdinand Céline ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Louis-Ferdinand_Céline> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) ?", "Welche Person heiratete Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) ?", "Welche Personen heiraten Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) ?", "Welche Personen heirateten Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) ?", "Wer heiratet Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) ?", "Wer heiratete Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Louis_Frederick_II,_Prince_of_Schwarzburg-Rudolstadt> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Ludwig der Kelheimer ?", "Welche Person heiratete Personen geheiratet von Ludwig der Kelheimer ?", "Welche Personen heiraten Personen geheiratet von Ludwig der Kelheimer ?", "Welche Personen heirateten Personen geheiratet von Ludwig der Kelheimer ?", "Wer heiratet Personen geheiratet von Ludwig der Kelheimer ?", "Wer heiratete Personen geheiratet von Ludwig der Kelheimer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Louis_I,_Duke_of_Bavaria> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Ludwig VI. (Frankreich) ?", "Welche Person heiratete Personen geheiratet von Ludwig VI. (Frankreich) ?", "Welche Personen heiraten Personen geheiratet von Ludwig VI. (Frankreich) ?", "Welche Personen heirateten Personen geheiratet von Ludwig VI. (Frankreich) ?", "Wer heiratet Personen geheiratet von Ludwig VI. (Frankreich) ?", "Wer heiratete Personen geheiratet von Ludwig VI. (Frankreich) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Louis_VI_of_France> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Tullia die Jüngere ?", "Welche Person heiratete Personen geheiratet von Tullia die Jüngere ?", "Welche Personen heiraten Personen geheiratet von Tullia die Jüngere ?", "Welche Personen heirateten Personen geheiratet von Tullia die Jüngere ?", "Wer heiratet Personen geheiratet von Tullia die Jüngere ?", "Wer heiratete Personen geheiratet von Tullia die Jüngere ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Tullia_Minor> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Sigurður Hlöðvisson ?", "Welche Person heiratete Personen geheiratet von Sigurður Hlöðvisson ?", "Welche Personen heiraten Personen geheiratet von Sigurður Hlöðvisson ?", "Welche Personen heirateten Personen geheiratet von Sigurður Hlöðvisson ?", "Wer heiratet Personen geheiratet von Sigurður Hlöðvisson ?", "Wer heiratete Personen geheiratet von Sigurður Hlöðvisson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sigurd_the_Stout> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Caitlin Stasey ?", "Welche Person heiratete Personen geheiratet von Caitlin Stasey ?", "Welche Personen heiraten Personen geheiratet von Caitlin Stasey ?", "Welche Personen heirateten Personen geheiratet von Caitlin Stasey ?", "Wer heiratet Personen geheiratet von Caitlin Stasey ?", "Wer heiratete Personen geheiratet von Caitlin Stasey ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Caitlin_Stasey> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Carl Demmer (Sänger, 1766) ?", "Welche Person heiratete Personen geheiratet von Carl Demmer (Sänger, 1766) ?", "Welche Personen heiraten Personen geheiratet von Carl Demmer (Sänger, 1766) ?", "Welche Personen heirateten Personen geheiratet von Carl Demmer (Sänger, 1766) ?", "Wer heiratet Personen geheiratet von Carl Demmer (Sänger, 1766) ?", "Wer heiratete Personen geheiratet von Carl Demmer (Sänger, 1766) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carl_Demmer> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Carl Sagan ?", "Welche Person heiratete Personen geheiratet von Carl Sagan ?", "Welche Personen heiraten Personen geheiratet von Carl Sagan ?", "Welche Personen heirateten Personen geheiratet von Carl Sagan ?", "Wer heiratet Personen geheiratet von Carl Sagan ?", "Wer heiratete Personen geheiratet von Carl Sagan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carl_Sagan> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Carlos Arthur Nuzman ?", "Welche Person heiratete Personen geheiratet von Carlos Arthur Nuzman ?", "Welche Personen heiraten Personen geheiratet von Carlos Arthur Nuzman ?", "Welche Personen heirateten Personen geheiratet von Carlos Arthur Nuzman ?", "Wer heiratet Personen geheiratet von Carlos Arthur Nuzman ?", "Wer heiratete Personen geheiratet von Carlos Arthur Nuzman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carlos_Arthur_Nuzman> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Ilich Ramírez Sánchez ?", "Welche Person heiratete Personen geheiratet von Ilich Ramírez Sánchez ?", "Welche Personen heiraten Personen geheiratet von Ilich Ramírez Sánchez ?", "Welche Personen heirateten Personen geheiratet von Ilich Ramírez Sánchez ?", "Wer heiratet Personen geheiratet von Ilich Ramírez Sánchez ?", "Wer heiratete Personen geheiratet von Ilich Ramírez Sánchez ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carlos_the_Jackal> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Karl II. (Rumänien) ?", "Welche Person heiratete Personen geheiratet von Karl II. (Rumänien) ?", "Welche Personen heiraten Personen geheiratet von Karl II. (Rumänien) ?", "Welche Personen heirateten Personen geheiratet von Karl II. (Rumänien) ?", "Wer heiratet Personen geheiratet von Karl II. (Rumänien) ?", "Wer heiratete Personen geheiratet von Karl II. (Rumänien) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carol_II_of_Romania> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Chien-Shiung Wu ?", "Welche Person heiratete Personen geheiratet von Chien-Shiung Wu ?", "Welche Personen heiraten Personen geheiratet von Chien-Shiung Wu ?", "Welche Personen heirateten Personen geheiratet von Chien-Shiung Wu ?", "Wer heiratet Personen geheiratet von Chien-Shiung Wu ?", "Wer heiratete Personen geheiratet von Chien-Shiung Wu ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chien-Shiung_Wu> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Chris Hardwick ?", "Welche Person heiratete Personen geheiratet von Chris Hardwick ?", "Welche Personen heiraten Personen geheiratet von Chris Hardwick ?", "Welche Personen heirateten Personen geheiratet von Chris Hardwick ?", "Wer heiratet Personen geheiratet von Chris Hardwick ?", "Wer heiratete Personen geheiratet von Chris Hardwick ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chris_Hardwick> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Chris Rock ?", "Welche Person heiratete Personen geheiratet von Chris Rock ?", "Welche Personen heiraten Personen geheiratet von Chris Rock ?", "Welche Personen heirateten Personen geheiratet von Chris Rock ?", "Wer heiratet Personen geheiratet von Chris Rock ?", "Wer heiratete Personen geheiratet von Chris Rock ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chris_Rock> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Christian von Dänemark ?", "Welche Person heiratete Personen geheiratet von Christian von Dänemark ?", "Welche Personen heiraten Personen geheiratet von Christian von Dänemark ?", "Welche Personen heirateten Personen geheiratet von Christian von Dänemark ?", "Wer heiratet Personen geheiratet von Christian von Dänemark ?", "Wer heiratete Personen geheiratet von Christian von Dänemark ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christian,_Prince-Elect_of_Denmark> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Christine Boyer ?", "Welche Person heiratete Personen geheiratet von Christine Boyer ?", "Welche Personen heiraten Personen geheiratet von Christine Boyer ?", "Welche Personen heirateten Personen geheiratet von Christine Boyer ?", "Wer heiratet Personen geheiratet von Christine Boyer ?", "Wer heiratete Personen geheiratet von Christine Boyer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christine_Boyer> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Christopher George ?", "Welche Person heiratete Personen geheiratet von Christopher George ?", "Welche Personen heiraten Personen geheiratet von Christopher George ?", "Welche Personen heirateten Personen geheiratet von Christopher George ?", "Wer heiratet Personen geheiratet von Christopher George ?", "Wer heiratete Personen geheiratet von Christopher George ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christopher_George> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Chuck Robb ?", "Welche Person heiratete Personen geheiratet von Chuck Robb ?", "Welche Personen heiraten Personen geheiratet von Chuck Robb ?", "Welche Personen heirateten Personen geheiratet von Chuck Robb ?", "Wer heiratet Personen geheiratet von Chuck Robb ?", "Wer heiratete Personen geheiratet von Chuck Robb ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chuck_Robb> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Cindy Pickett ?", "Welche Person heiratete Personen geheiratet von Cindy Pickett ?", "Welche Personen heiraten Personen geheiratet von Cindy Pickett ?", "Welche Personen heirateten Personen geheiratet von Cindy Pickett ?", "Wer heiratet Personen geheiratet von Cindy Pickett ?", "Wer heiratete Personen geheiratet von Cindy Pickett ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Cindy_Pickett> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Clifford Odets ?", "Welche Person heiratete Personen geheiratet von Clifford Odets ?", "Welche Personen heiraten Personen geheiratet von Clifford Odets ?", "Welche Personen heirateten Personen geheiratet von Clifford Odets ?", "Wer heiratet Personen geheiratet von Clifford Odets ?", "Wer heiratete Personen geheiratet von Clifford Odets ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Clifford_Odets> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Colin Low ?", "Welche Person heiratete Personen geheiratet von Colin Low ?", "Welche Personen heiraten Personen geheiratet von Colin Low ?", "Welche Personen heirateten Personen geheiratet von Colin Low ?", "Wer heiratet Personen geheiratet von Colin Low ?", "Wer heiratete Personen geheiratet von Colin Low ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Colin_Low_(filmmaker)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Andrew J. West ?", "Welche Person heiratete Personen geheiratet von Andrew J. West ?", "Welche Personen heiraten Personen geheiratet von Andrew J. West ?", "Welche Personen heirateten Personen geheiratet von Andrew J. West ?", "Wer heiratet Personen geheiratet von Andrew J. West ?", "Wer heiratete Personen geheiratet von Andrew J. West ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Andrew_J._West> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Gaspar Noé ?", "Welche Person heiratete Personen geheiratet von Gaspar Noé ?", "Welche Personen heiraten Personen geheiratet von Gaspar Noé ?", "Welche Personen heirateten Personen geheiratet von Gaspar Noé ?", "Wer heiratet Personen geheiratet von Gaspar Noé ?", "Wer heiratete Personen geheiratet von Gaspar Noé ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gaspar_Noé> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Gaston de Foix (Viana) ?", "Welche Person heiratete Personen geheiratet von Gaston de Foix (Viana) ?", "Welche Personen heiraten Personen geheiratet von Gaston de Foix (Viana) ?", "Welche Personen heirateten Personen geheiratet von Gaston de Foix (Viana) ?", "Wer heiratet Personen geheiratet von Gaston de Foix (Viana) ?", "Wer heiratete Personen geheiratet von Gaston de Foix (Viana) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gaston,_Prince_of_Viana> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von George Montagu, 8. Duke of Manchester ?", "Welche Person heiratete Personen geheiratet von George Montagu, 8. Duke of Manchester ?", "Welche Personen heiraten Personen geheiratet von George Montagu, 8. Duke of Manchester ?", "Welche Personen heirateten Personen geheiratet von George Montagu, 8. Duke of Manchester ?", "Wer heiratet Personen geheiratet von George Montagu, 8. Duke of Manchester ?", "Wer heiratete Personen geheiratet von George Montagu, 8. Duke of Manchester ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Montagu,_8th_Duke_of_Manchester> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von George Reid ?", "Welche Person heiratete Personen geheiratet von George Reid ?", "Welche Personen heiraten Personen geheiratet von George Reid ?", "Welche Personen heirateten Personen geheiratet von George Reid ?", "Wer heiratet Personen geheiratet von George Reid ?", "Wer heiratete Personen geheiratet von George Reid ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Reid> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von George Sand ?", "Welche Person heiratete Personen geheiratet von George Sand ?", "Welche Personen heiraten Personen geheiratet von George Sand ?", "Welche Personen heirateten Personen geheiratet von George Sand ?", "Wer heiratet Personen geheiratet von George Sand ?", "Wer heiratete Personen geheiratet von George Sand ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Sand> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von George Sanders (Schauspieler) ?", "Welche Person heiratete Personen geheiratet von George Sanders (Schauspieler) ?", "Welche Personen heiraten Personen geheiratet von George Sanders (Schauspieler) ?", "Welche Personen heirateten Personen geheiratet von George Sanders (Schauspieler) ?", "Wer heiratet Personen geheiratet von George Sanders (Schauspieler) ?", "Wer heiratete Personen geheiratet von George Sanders (Schauspieler) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Sanders> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von George Wallace ?", "Welche Person heiratete Personen geheiratet von George Wallace ?", "Welche Personen heiraten Personen geheiratet von George Wallace ?", "Welche Personen heirateten Personen geheiratet von George Wallace ?", "Wer heiratet Personen geheiratet von George Wallace ?", "Wer heiratete Personen geheiratet von George Wallace ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Wallace> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Georges Rivière (Schauspieler) ?", "Welche Person heiratete Personen geheiratet von Georges Rivière (Schauspieler) ?", "Welche Personen heiraten Personen geheiratet von Georges Rivière (Schauspieler) ?", "Welche Personen heirateten Personen geheiratet von Georges Rivière (Schauspieler) ?", "Wer heiratet Personen geheiratet von Georges Rivière (Schauspieler) ?", "Wer heiratete Personen geheiratet von Georges Rivière (Schauspieler) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Georges_Rivière> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Gia Long ?", "Welche Person heiratete Personen geheiratet von Gia Long ?", "Welche Personen heiraten Personen geheiratet von Gia Long ?", "Welche Personen heirateten Personen geheiratet von Gia Long ?", "Wer heiratet Personen geheiratet von Gia Long ?", "Wer heiratete Personen geheiratet von Gia Long ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gia_Long> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Giorgi Margwelaschwili ?", "Welche Person heiratete Personen geheiratet von Giorgi Margwelaschwili ?", "Welche Personen heiraten Personen geheiratet von Giorgi Margwelaschwili ?", "Welche Personen heirateten Personen geheiratet von Giorgi Margwelaschwili ?", "Wer heiratet Personen geheiratet von Giorgi Margwelaschwili ?", "Wer heiratete Personen geheiratet von Giorgi Margwelaschwili ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Giorgi_Margvelashvili> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Giovanni di Pierfrancesco de’ Medici ?", "Welche Person heiratete Personen geheiratet von Giovanni di Pierfrancesco de’ Medici ?", "Welche Personen heiraten Personen geheiratet von Giovanni di Pierfrancesco de’ Medici ?", "Welche Personen heirateten Personen geheiratet von Giovanni di Pierfrancesco de’ Medici ?", "Wer heiratet Personen geheiratet von Giovanni di Pierfrancesco de’ Medici ?", "Wer heiratete Personen geheiratet von Giovanni di Pierfrancesco de’ Medici ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Giovanni_il_Popolano> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Girolamo Riario ?", "Welche Person heiratete Personen geheiratet von Girolamo Riario ?", "Welche Personen heiraten Personen geheiratet von Girolamo Riario ?", "Welche Personen heirateten Personen geheiratet von Girolamo Riario ?", "Wer heiratet Personen geheiratet von Girolamo Riario ?", "Wer heiratete Personen geheiratet von Girolamo Riario ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Girolamo_Riario> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Jean-Louis Barrault ?", "Welche Person heiratete Personen geheiratet von Jean-Louis Barrault ?", "Welche Personen heiraten Personen geheiratet von Jean-Louis Barrault ?", "Welche Personen heirateten Personen geheiratet von Jean-Louis Barrault ?", "Wer heiratet Personen geheiratet von Jean-Louis Barrault ?", "Wer heiratete Personen geheiratet von Jean-Louis Barrault ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jean-Louis_Barrault> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Jean-Marie Roland de La Platière ?", "Welche Person heiratete Personen geheiratet von Jean-Marie Roland de La Platière ?", "Welche Personen heiraten Personen geheiratet von Jean-Marie Roland de La Platière ?", "Welche Personen heirateten Personen geheiratet von Jean-Marie Roland de La Platière ?", "Wer heiratet Personen geheiratet von Jean-Marie Roland de La Platière ?", "Wer heiratete Personen geheiratet von Jean-Marie Roland de La Platière ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jean-Marie_Roland_de_la_Platière> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Jeanne Blum ?", "Welche Person heiratete Personen geheiratet von Jeanne Blum ?", "Welche Personen heiraten Personen geheiratet von Jeanne Blum ?", "Welche Personen heirateten Personen geheiratet von Jeanne Blum ?", "Wer heiratet Personen geheiratet von Jeanne Blum ?", "Wer heiratete Personen geheiratet von Jeanne Blum ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jeanne_Blum> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Jeff Bezos ?", "Welche Person heiratete Personen geheiratet von Jeff Bezos ?", "Welche Personen heiraten Personen geheiratet von Jeff Bezos ?", "Welche Personen heirateten Personen geheiratet von Jeff Bezos ?", "Wer heiratet Personen geheiratet von Jeff Bezos ?", "Wer heiratete Personen geheiratet von Jeff Bezos ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jeff_Bezos> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von Joachim II. (Brandenburg) ?", "Welche Person heiratete Personen geheiratet von Joachim II. (Brandenburg) ?", "Welche Personen heiraten Personen geheiratet von Joachim II. (Brandenburg) ?", "Welche Personen heirateten Personen geheiratet von Joachim II. (Brandenburg) ?", "Wer heiratet Personen geheiratet von Joachim II. (Brandenburg) ?", "Wer heiratete Personen geheiratet von Joachim II. (Brandenburg) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Joachim_II_Hector,_Elector_of_Brandenburg> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von John D. Waihee ?", "Welche Person heiratete Personen geheiratet von John D. Waihee ?", "Welche Personen heiraten Personen geheiratet von John D. Waihee ?", "Welche Personen heirateten Personen geheiratet von John D. Waihee ?", "Wer heiratet Personen geheiratet von John D. Waihee ?", "Wer heiratete Personen geheiratet von John D. Waihee ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_D._Waiheʻe_III> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "14",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person heiratet Personen geheiratet von John Eden, Baron Eden of Winton ?", "Welche Person heiratete Personen geheiratet von John Eden, Baron Eden of Winton ?", "Welche Personen heiraten Personen geheiratet von John Eden, Baron Eden of Winton ?", "Welche Personen heirateten Personen geheiratet von John Eden, Baron Eden of Winton ?", "Wer heiratet Personen geheiratet von John Eden, Baron Eden of Winton ?", "Wer heiratete Personen geheiratet von John Eden, Baron Eden of Winton ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_Eden,_Baron_Eden_of_Winton> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von LucasArts ?", "Welche Agenten entwickelten Werke entwickelt von LucasArts ?", "Welcher Agent entwickelt Werke entwickelt von LucasArts ?", "Welcher Agent entwickelte Werke entwickelt von LucasArts ?", "Wer entwickelt Werke entwickelt von LucasArts ?", "Wer entwickelte Werke entwickelt von LucasArts ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/LucasArts>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von MOL ?", "Welche Agenten entwickelten Werke entwickelt von MOL ?", "Welcher Agent entwickelt Werke entwickelt von MOL ?", "Welcher Agent entwickelte Werke entwickelt von MOL ?", "Wer entwickelt Werke entwickelt von MOL ?", "Wer entwickelte Werke entwickelt von MOL ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MOL_(company)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Mabrouk El Mechri ?", "Welche Agenten entwickelten Werke entwickelt von Mabrouk El Mechri ?", "Welcher Agent entwickelt Werke entwickelt von Mabrouk El Mechri ?", "Welcher Agent entwickelte Werke entwickelt von Mabrouk El Mechri ?", "Wer entwickelt Werke entwickelt von Mabrouk El Mechri ?", "Wer entwickelte Werke entwickelt von Mabrouk El Mechri ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Mabrouk_El_Mechri>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Macromedia ?", "Welche Agenten entwickelten Werke entwickelt von Macromedia ?", "Welcher Agent entwickelt Werke entwickelt von Macromedia ?", "Welcher Agent entwickelte Werke entwickelt von Macromedia ?", "Wer entwickelt Werke entwickelt von Macromedia ?", "Wer entwickelte Werke entwickelt von Macromedia ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Macromedia>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von University of Bristol ?", "Welche Agenten entwickelten Werke entwickelt von University of Bristol ?", "Welcher Agent entwickelt Werke entwickelt von University of Bristol ?", "Welcher Agent entwickelte Werke entwickelt von University of Bristol ?", "Wer entwickelt Werke entwickelt von University of Bristol ?", "Wer entwickelte Werke entwickelt von University of Bristol ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Bristol>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von University of California, San Francisco ?", "Welche Agenten entwickelten Werke entwickelt von University of California, San Francisco ?", "Welcher Agent entwickelt Werke entwickelt von University of California, San Francisco ?", "Welcher Agent entwickelte Werke entwickelt von University of California, San Francisco ?", "Wer entwickelt Werke entwickelt von University of California, San Francisco ?", "Wer entwickelte Werke entwickelt von University of California, San Francisco ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_California,_San_Francisco>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von University of South Florida ?", "Welche Agenten entwickelten Werke entwickelt von University of South Florida ?", "Welcher Agent entwickelt Werke entwickelt von University of South Florida ?", "Welcher Agent entwickelte Werke entwickelt von University of South Florida ?", "Wer entwickelt Werke entwickelt von University of South Florida ?", "Wer entwickelte Werke entwickelt von University of South Florida ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_South_Florida>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Universität Sydney ?", "Welche Agenten entwickelten Werke entwickelt von Universität Sydney ?", "Welcher Agent entwickelt Werke entwickelt von Universität Sydney ?", "Welcher Agent entwickelte Werke entwickelt von Universität Sydney ?", "Wer entwickelt Werke entwickelt von Universität Sydney ?", "Wer entwickelte Werke entwickelt von Universität Sydney ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/University_of_Sydney>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Softdisk ?", "Welche Agenten entwickelten Werke entwickelt von Softdisk ?", "Welcher Agent entwickelt Werke entwickelt von Softdisk ?", "Welcher Agent entwickelte Werke entwickelt von Softdisk ?", "Wer entwickelt Werke entwickelt von Softdisk ?", "Wer entwickelte Werke entwickelt von Softdisk ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Softdisk>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von BioWare ?", "Welche Agenten entwickelten Werke entwickelt von BioWare ?", "Welcher Agent entwickelt Werke entwickelt von BioWare ?", "Welcher Agent entwickelte Werke entwickelt von BioWare ?", "Wer entwickelt Werke entwickelt von BioWare ?", "Wer entwickelte Werke entwickelt von BioWare ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/BioWare>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Digital Equipment Corporation ?", "Welche Agenten entwickelten Werke entwickelt von Digital Equipment Corporation ?", "Welcher Agent entwickelt Werke entwickelt von Digital Equipment Corporation ?", "Welcher Agent entwickelte Werke entwickelt von Digital Equipment Corporation ?", "Wer entwickelt Werke entwickelt von Digital Equipment Corporation ?", "Wer entwickelte Werke entwickelt von Digital Equipment Corporation ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Digital_Equipment_Corporation>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Digital Research ?", "Welche Agenten entwickelten Werke entwickelt von Digital Research ?", "Welcher Agent entwickelt Werke entwickelt von Digital Research ?", "Welcher Agent entwickelte Werke entwickelt von Digital Research ?", "Wer entwickelt Werke entwickelt von Digital Research ?", "Wer entwickelte Werke entwickelt von Digital Research ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Digital_Research>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Wesley Pentz ?", "Welche Agenten entwickelten Werke entwickelt von Wesley Pentz ?", "Welcher Agent entwickelt Werke entwickelt von Wesley Pentz ?", "Welcher Agent entwickelte Werke entwickelt von Wesley Pentz ?", "Wer entwickelt Werke entwickelt von Wesley Pentz ?", "Wer entwickelte Werke entwickelt von Wesley Pentz ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Diplo>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Google LLC ?", "Welche Agenten entwickelten Werke entwickelt von Google LLC ?", "Welcher Agent entwickelt Werke entwickelt von Google LLC ?", "Welcher Agent entwickelte Werke entwickelt von Google LLC ?", "Wer entwickelt Werke entwickelt von Google LLC ?", "Wer entwickelte Werke entwickelt von Google LLC ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Google>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von D. Gottlieb & Co. ?", "Welche Agenten entwickelten Werke entwickelt von D. Gottlieb & Co. ?", "Welcher Agent entwickelt Werke entwickelt von D. Gottlieb & Co. ?", "Welcher Agent entwickelte Werke entwickelt von D. Gottlieb & Co. ?", "Wer entwickelt Werke entwickelt von D. Gottlieb & Co. ?", "Wer entwickelte Werke entwickelt von D. Gottlieb & Co. ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Gottlieb>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Kojima Productions ?", "Welche Agenten entwickelten Werke entwickelt von Kojima Productions ?", "Welcher Agent entwickelt Werke entwickelt von Kojima Productions ?", "Welcher Agent entwickelte Werke entwickelt von Kojima Productions ?", "Wer entwickelt Werke entwickelt von Kojima Productions ?", "Wer entwickelte Werke entwickelt von Kojima Productions ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Kojima_Productions>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Konami ?", "Welche Agenten entwickelten Werke entwickelt von Konami ?", "Welcher Agent entwickelt Werke entwickelt von Konami ?", "Welcher Agent entwickelte Werke entwickelt von Konami ?", "Wer entwickelt Werke entwickelt von Konami ?", "Wer entwickelte Werke entwickelt von Konami ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Konami>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Korean Broadcasting System ?", "Welche Agenten entwickelten Werke entwickelt von Korean Broadcasting System ?", "Welcher Agent entwickelt Werke entwickelt von Korean Broadcasting System ?", "Welcher Agent entwickelte Werke entwickelt von Korean Broadcasting System ?", "Wer entwickelt Werke entwickelt von Korean Broadcasting System ?", "Wer entwickelte Werke entwickelt von Korean Broadcasting System ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Korean_Broadcasting_System>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Radical Entertainment ?", "Welche Agenten entwickelten Werke entwickelt von Radical Entertainment ?", "Welcher Agent entwickelt Werke entwickelt von Radical Entertainment ?", "Welcher Agent entwickelte Werke entwickelt von Radical Entertainment ?", "Wer entwickelt Werke entwickelt von Radical Entertainment ?", "Wer entwickelte Werke entwickelt von Radical Entertainment ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Radical_Entertainment>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Rainbow Arts ?", "Welche Agenten entwickelten Werke entwickelt von Rainbow Arts ?", "Welcher Agent entwickelt Werke entwickelt von Rainbow Arts ?", "Welcher Agent entwickelte Werke entwickelt von Rainbow Arts ?", "Wer entwickelt Werke entwickelt von Rainbow Arts ?", "Wer entwickelte Werke entwickelt von Rainbow Arts ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Rainbow_Arts>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Irem (Unternehmen) ?", "Welche Agenten entwickelten Werke entwickelt von Irem (Unternehmen) ?", "Welcher Agent entwickelt Werke entwickelt von Irem (Unternehmen) ?", "Welcher Agent entwickelte Werke entwickelt von Irem (Unternehmen) ?", "Wer entwickelt Werke entwickelt von Irem (Unternehmen) ?", "Wer entwickelte Werke entwickelt von Irem (Unternehmen) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Irem>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Central Point Software ?", "Welche Agenten entwickelten Werke entwickelt von Central Point Software ?", "Welcher Agent entwickelt Werke entwickelt von Central Point Software ?", "Welcher Agent entwickelte Werke entwickelt von Central Point Software ?", "Wer entwickelt Werke entwickelt von Central Point Software ?", "Wer entwickelte Werke entwickelt von Central Point Software ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Central_Point_Software>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Nintendo ?", "Welche Agenten entwickelten Werke entwickelt von Nintendo ?", "Welcher Agent entwickelt Werke entwickelt von Nintendo ?", "Welcher Agent entwickelte Werke entwickelt von Nintendo ?", "Wer entwickelt Werke entwickelt von Nintendo ?", "Wer entwickelte Werke entwickelt von Nintendo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Nintendo>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Nintendo DS ?", "Welche Agenten entwickelten Werke entwickelt von Nintendo DS ?", "Welcher Agent entwickelt Werke entwickelt von Nintendo DS ?", "Welcher Agent entwickelte Werke entwickelt von Nintendo DS ?", "Wer entwickelt Werke entwickelt von Nintendo DS ?", "Wer entwickelte Werke entwickelt von Nintendo DS ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Nintendo_DS>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Nintendo Entertainment Analysis & Development ?", "Welche Agenten entwickelten Werke entwickelt von Nintendo Entertainment Analysis & Development ?", "Welcher Agent entwickelt Werke entwickelt von Nintendo Entertainment Analysis & Development ?", "Welcher Agent entwickelte Werke entwickelt von Nintendo Entertainment Analysis & Development ?", "Wer entwickelt Werke entwickelt von Nintendo Entertainment Analysis & Development ?", "Wer entwickelte Werke entwickelt von Nintendo Entertainment Analysis & Development ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Nintendo_Entertainment_Analysis_&_Development>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Nippon Ichi Software ?", "Welche Agenten entwickelten Werke entwickelt von Nippon Ichi Software ?", "Welcher Agent entwickelt Werke entwickelt von Nippon Ichi Software ?", "Welcher Agent entwickelte Werke entwickelt von Nippon Ichi Software ?", "Wer entwickelt Werke entwickelt von Nippon Ichi Software ?", "Wer entwickelte Werke entwickelt von Nippon Ichi Software ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Nippon_Ichi_Software>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Nokia ?", "Welche Agenten entwickelten Werke entwickelt von Nokia ?", "Welcher Agent entwickelt Werke entwickelt von Nokia ?", "Welcher Agent entwickelte Werke entwickelt von Nokia ?", "Wer entwickelt Werke entwickelt von Nokia ?", "Wer entwickelte Werke entwickelt von Nokia ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Nokia>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Novell ?", "Welche Agenten entwickelten Werke entwickelt von Novell ?", "Welcher Agent entwickelt Werke entwickelt von Novell ?", "Welcher Agent entwickelte Werke entwickelt von Novell ?", "Wer entwickelt Werke entwickelt von Novell ?", "Wer entwickelte Werke entwickelt von Novell ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Novell>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Oak Ridge National Laboratory ?", "Welche Agenten entwickelten Werke entwickelt von Oak Ridge National Laboratory ?", "Welcher Agent entwickelt Werke entwickelt von Oak Ridge National Laboratory ?", "Welcher Agent entwickelte Werke entwickelt von Oak Ridge National Laboratory ?", "Wer entwickelt Werke entwickelt von Oak Ridge National Laboratory ?", "Wer entwickelte Werke entwickelt von Oak Ridge National Laboratory ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Oak_Ridge_National_Laboratory>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Ocean Software ?", "Welche Agenten entwickelten Werke entwickelt von Ocean Software ?", "Welcher Agent entwickelt Werke entwickelt von Ocean Software ?", "Welcher Agent entwickelte Werke entwickelt von Ocean Software ?", "Wer entwickelt Werke entwickelt von Ocean Software ?", "Wer entwickelte Werke entwickelt von Ocean Software ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Ocean_Software>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von GNU-Projekt ?", "Welche Agenten entwickelten Werke entwickelt von GNU-Projekt ?", "Welcher Agent entwickelt Werke entwickelt von GNU-Projekt ?", "Welcher Agent entwickelte Werke entwickelt von GNU-Projekt ?", "Wer entwickelt Werke entwickelt von GNU-Projekt ?", "Wer entwickelte Werke entwickelt von GNU-Projekt ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/GNU_Project>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Bandai ?", "Welche Agenten entwickelten Werke entwickelt von Bandai ?", "Welcher Agent entwickelt Werke entwickelt von Bandai ?", "Welcher Agent entwickelte Werke entwickelt von Bandai ?", "Wer entwickelt Werke entwickelt von Bandai ?", "Wer entwickelte Werke entwickelt von Bandai ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Bandai>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Capcom ?", "Welche Agenten entwickelten Werke entwickelt von Capcom ?", "Welcher Agent entwickelt Werke entwickelt von Capcom ?", "Welcher Agent entwickelte Werke entwickelt von Capcom ?", "Wer entwickelt Werke entwickelt von Capcom ?", "Wer entwickelte Werke entwickelt von Capcom ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Capcom>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Adam Cadre ?", "Welche Agenten entwickelten Werke entwickelt von Adam Cadre ?", "Welcher Agent entwickelt Werke entwickelt von Adam Cadre ?", "Welcher Agent entwickelte Werke entwickelt von Adam Cadre ?", "Wer entwickelt Werke entwickelt von Adam Cadre ?", "Wer entwickelte Werke entwickelt von Adam Cadre ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Adam_Cadre>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von City University of New York ?", "Welche Agenten entwickelten Werke entwickelt von City University of New York ?", "Welcher Agent entwickelt Werke entwickelt von City University of New York ?", "Welcher Agent entwickelte Werke entwickelt von City University of New York ?", "Wer entwickelt Werke entwickelt von City University of New York ?", "Wer entwickelte Werke entwickelt von City University of New York ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/City_University_of_New_York>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Codemasters ?", "Welche Agenten entwickelten Werke entwickelt von Codemasters ?", "Welcher Agent entwickelt Werke entwickelt von Codemasters ?", "Welcher Agent entwickelte Werke entwickelt von Codemasters ?", "Wer entwickelt Werke entwickelt von Codemasters ?", "Wer entwickelte Werke entwickelt von Codemasters ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Codemasters>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Game Arts ?", "Welche Agenten entwickelten Werke entwickelt von Game Arts ?", "Welcher Agent entwickelt Werke entwickelt von Game Arts ?", "Welcher Agent entwickelte Werke entwickelt von Game Arts ?", "Wer entwickelt Werke entwickelt von Game Arts ?", "Wer entwickelte Werke entwickelt von Game Arts ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Game_Arts>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Gameloft ?", "Welche Agenten entwickelten Werke entwickelt von Gameloft ?", "Welcher Agent entwickelt Werke entwickelt von Gameloft ?", "Welcher Agent entwickelte Werke entwickelt von Gameloft ?", "Wer entwickelt Werke entwickelt von Gameloft ?", "Wer entwickelte Werke entwickelt von Gameloft ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Gameloft>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Gary Kildall ?", "Welche Agenten entwickelten Werke entwickelt von Gary Kildall ?", "Welcher Agent entwickelt Werke entwickelt von Gary Kildall ?", "Welcher Agent entwickelte Werke entwickelt von Gary Kildall ?", "Wer entwickelt Werke entwickelt von Gary Kildall ?", "Wer entwickelte Werke entwickelt von Gary Kildall ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Gary_Kildall>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Gene Reynolds ?", "Welche Agenten entwickelten Werke entwickelt von Gene Reynolds ?", "Welcher Agent entwickelt Werke entwickelt von Gene Reynolds ?", "Welcher Agent entwickelte Werke entwickelt von Gene Reynolds ?", "Wer entwickelt Werke entwickelt von Gene Reynolds ?", "Wer entwickelte Werke entwickelt von Gene Reynolds ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Gene_Reynolds>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Genki ?", "Welche Agenten entwickelten Werke entwickelt von Genki ?", "Welcher Agent entwickelt Werke entwickelt von Genki ?", "Welcher Agent entwickelte Werke entwickelt von Genki ?", "Wer entwickelt Werke entwickelt von Genki ?", "Wer entwickelte Werke entwickelt von Genki ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Genki_(company)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Beenox ?", "Welche Agenten entwickelten Werke entwickelt von Beenox ?", "Welcher Agent entwickelt Werke entwickelt von Beenox ?", "Welcher Agent entwickelte Werke entwickelt von Beenox ?", "Wer entwickelt Werke entwickelt von Beenox ?", "Wer entwickelte Werke entwickelt von Beenox ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Beenox>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Bell Laboratories ?", "Welche Agenten entwickelten Werke entwickelt von Bell Laboratories ?", "Welcher Agent entwickelt Werke entwickelt von Bell Laboratories ?", "Welcher Agent entwickelte Werke entwickelt von Bell Laboratories ?", "Wer entwickelt Werke entwickelt von Bell Laboratories ?", "Wer entwickelte Werke entwickelt von Bell Laboratories ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Bell_Labs>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Big Huge Games ?", "Welche Agenten entwickelten Werke entwickelt von Big Huge Games ?", "Welcher Agent entwickelt Werke entwickelt von Big Huge Games ?", "Welcher Agent entwickelte Werke entwickelt von Big Huge Games ?", "Wer entwickelt Werke entwickelt von Big Huge Games ?", "Wer entwickelte Werke entwickelt von Big Huge Games ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Big_Huge_Games>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Linux Foundation ?", "Welche Agenten entwickelten Werke entwickelt von Linux Foundation ?", "Welcher Agent entwickelt Werke entwickelt von Linux Foundation ?", "Welcher Agent entwickelte Werke entwickelt von Linux Foundation ?", "Wer entwickelt Werke entwickelt von Linux Foundation ?", "Wer entwickelte Werke entwickelt von Linux Foundation ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Linux_Foundation>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Zilog ?", "Welche Agenten entwickelten Werke entwickelt von Zilog ?", "Welcher Agent entwickelt Werke entwickelt von Zilog ?", "Welcher Agent entwickelte Werke entwickelt von Zilog ?", "Wer entwickelt Werke entwickelt von Zilog ?", "Wer entwickelte Werke entwickelt von Zilog ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Zilog>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Zipper Interactive ?", "Welche Agenten entwickelten Werke entwickelt von Zipper Interactive ?", "Welcher Agent entwickelt Werke entwickelt von Zipper Interactive ?", "Welcher Agent entwickelte Werke entwickelt von Zipper Interactive ?", "Wer entwickelt Werke entwickelt von Zipper Interactive ?", "Wer entwickelte Werke entwickelt von Zipper Interactive ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Zipper_Interactive>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Stainless Games ?", "Welche Agenten entwickelten Werke entwickelt von Stainless Games ?", "Welcher Agent entwickelt Werke entwickelt von Stainless Games ?", "Welcher Agent entwickelte Werke entwickelt von Stainless Games ?", "Wer entwickelt Werke entwickelt von Stainless Games ?", "Wer entwickelte Werke entwickelt von Stainless Games ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Stainless_Games>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Microchip Technology ?", "Welche Agenten entwickelten Werke entwickelt von Microchip Technology ?", "Welcher Agent entwickelt Werke entwickelt von Microchip Technology ?", "Welcher Agent entwickelte Werke entwickelt von Microchip Technology ?", "Wer entwickelt Werke entwickelt von Microchip Technology ?", "Wer entwickelte Werke entwickelt von Microchip Technology ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Microchip_Technology>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Microsoft ?", "Welche Agenten entwickelten Werke entwickelt von Microsoft ?", "Welcher Agent entwickelt Werke entwickelt von Microsoft ?", "Welcher Agent entwickelte Werke entwickelt von Microsoft ?", "Wer entwickelt Werke entwickelt von Microsoft ?", "Wer entwickelte Werke entwickelt von Microsoft ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Microsoft>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Microware Software ?", "Welche Agenten entwickelten Werke entwickelt von Microware Software ?", "Welcher Agent entwickelt Werke entwickelt von Microware Software ?", "Welcher Agent entwickelte Werke entwickelt von Microware Software ?", "Wer entwickelt Werke entwickelt von Microware Software ?", "Wer entwickelte Werke entwickelt von Microware Software ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Microware>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Midway Games ?", "Welche Agenten entwickelten Werke entwickelt von Midway Games ?", "Welcher Agent entwickelt Werke entwickelt von Midway Games ?", "Welcher Agent entwickelte Werke entwickelt von Midway Games ?", "Wer entwickelt Werke entwickelt von Midway Games ?", "Wer entwickelte Werke entwickelt von Midway Games ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Midway_Games>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Mike Oldfield ?", "Welche Agenten entwickelten Werke entwickelt von Mike Oldfield ?", "Welcher Agent entwickelt Werke entwickelt von Mike Oldfield ?", "Welcher Agent entwickelte Werke entwickelt von Mike Oldfield ?", "Wer entwickelt Werke entwickelt von Mike Oldfield ?", "Wer entwickelte Werke entwickelt von Mike Oldfield ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Mike_Oldfield>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Mitchell (Unternehmen) ?", "Welche Agenten entwickelten Werke entwickelt von Mitchell (Unternehmen) ?", "Welcher Agent entwickelt Werke entwickelt von Mitchell (Unternehmen) ?", "Welcher Agent entwickelte Werke entwickelt von Mitchell (Unternehmen) ?", "Wer entwickelt Werke entwickelt von Mitchell (Unternehmen) ?", "Wer entwickelte Werke entwickelt von Mitchell (Unternehmen) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Mitchell_Corporation>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Monash University ?", "Welche Agenten entwickelten Werke entwickelt von Monash University ?", "Welcher Agent entwickelt Werke entwickelt von Monash University ?", "Welcher Agent entwickelte Werke entwickelt von Monash University ?", "Wer entwickelt Werke entwickelt von Monash University ?", "Wer entwickelte Werke entwickelt von Monash University ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Monash_University>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Tom Kapinos ?", "Welche Agenten entwickelten Werke entwickelt von Tom Kapinos ?", "Welcher Agent entwickelt Werke entwickelt von Tom Kapinos ?", "Welcher Agent entwickelte Werke entwickelt von Tom Kapinos ?", "Wer entwickelt Werke entwickelt von Tom Kapinos ?", "Wer entwickelte Werke entwickelt von Tom Kapinos ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Tom_Kapinos>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von 2K Czech ?", "Welche Agenten entwickelten Werke entwickelt von 2K Czech ?", "Welcher Agent entwickelt Werke entwickelt von 2K Czech ?", "Welcher Agent entwickelte Werke entwickelt von 2K Czech ?", "Wer entwickelt Werke entwickelt von 2K Czech ?", "Wer entwickelte Werke entwickelt von 2K Czech ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/2K_Czech>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Sony Interactive Entertainment ?", "Welche Agenten entwickelten Werke entwickelt von Sony Interactive Entertainment ?", "Welcher Agent entwickelt Werke entwickelt von Sony Interactive Entertainment ?", "Welcher Agent entwickelte Werke entwickelt von Sony Interactive Entertainment ?", "Wer entwickelt Werke entwickelt von Sony Interactive Entertainment ?", "Wer entwickelte Werke entwickelt von Sony Interactive Entertainment ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Sony_Interactive_Entertainment>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Square (Zahlungsunternehmen) ?", "Welche Agenten entwickelten Werke entwickelt von Square (Zahlungsunternehmen) ?", "Welcher Agent entwickelt Werke entwickelt von Square (Zahlungsunternehmen) ?", "Welcher Agent entwickelte Werke entwickelt von Square (Zahlungsunternehmen) ?", "Wer entwickelt Werke entwickelt von Square (Zahlungsunternehmen) ?", "Wer entwickelte Werke entwickelt von Square (Zahlungsunternehmen) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Square,_Inc.>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Square Enix ?", "Welche Agenten entwickelten Werke entwickelt von Square Enix ?", "Welcher Agent entwickelt Werke entwickelt von Square Enix ?", "Welcher Agent entwickelte Werke entwickelt von Square Enix ?", "Wer entwickelt Werke entwickelt von Square Enix ?", "Wer entwickelte Werke entwickelt von Square Enix ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Square_Enix>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von MetaComCo ?", "Welche Agenten entwickelten Werke entwickelt von MetaComCo ?", "Welcher Agent entwickelt Werke entwickelt von MetaComCo ?", "Welcher Agent entwickelte Werke entwickelt von MetaComCo ?", "Wer entwickelt Werke entwickelt von MetaComCo ?", "Wer entwickelte Werke entwickelt von MetaComCo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/MetaComCo>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Dropbox ?", "Welche Agenten entwickelten Werke entwickelt von Dropbox ?", "Welcher Agent entwickelt Werke entwickelt von Dropbox ?", "Welcher Agent entwickelte Werke entwickelt von Dropbox ?", "Wer entwickelt Werke entwickelt von Dropbox ?", "Wer entwickelte Werke entwickelt von Dropbox ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Dropbox_(service)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von EA Sports ?", "Welche Agenten entwickelten Werke entwickelt von EA Sports ?", "Welcher Agent entwickelt Werke entwickelt von EA Sports ?", "Welcher Agent entwickelte Werke entwickelt von EA Sports ?", "Wer entwickelt Werke entwickelt von EA Sports ?", "Wer entwickelte Werke entwickelt von EA Sports ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/EA_Sports>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von EA Tiburon ?", "Welche Agenten entwickelten Werke entwickelt von EA Tiburon ?", "Welcher Agent entwickelt Werke entwickelt von EA Tiburon ?", "Welcher Agent entwickelte Werke entwickelt von EA Tiburon ?", "Wer entwickelt Werke entwickelt von EA Tiburon ?", "Wer entwickelte Werke entwickelt von EA Tiburon ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/EA_Tiburon>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Amanita Design ?", "Welche Agenten entwickelten Werke entwickelt von Amanita Design ?", "Welcher Agent entwickelt Werke entwickelt von Amanita Design ?", "Welcher Agent entwickelte Werke entwickelt von Amanita Design ?", "Wer entwickelt Werke entwickelt von Amanita Design ?", "Wer entwickelte Werke entwickelt von Amanita Design ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Amanita_Design>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Fujitsu ?", "Welche Agenten entwickelten Werke entwickelt von Fujitsu ?", "Welcher Agent entwickelt Werke entwickelt von Fujitsu ?", "Welcher Agent entwickelte Werke entwickelt von Fujitsu ?", "Wer entwickelt Werke entwickelt von Fujitsu ?", "Wer entwickelte Werke entwickelt von Fujitsu ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Fujitsu>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Hangar 13 ?", "Welche Agenten entwickelten Werke entwickelt von Hangar 13 ?", "Welcher Agent entwickelt Werke entwickelt von Hangar 13 ?", "Welcher Agent entwickelte Werke entwickelt von Hangar 13 ?", "Wer entwickelt Werke entwickelt von Hangar 13 ?", "Wer entwickelte Werke entwickelt von Hangar 13 ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Hangar_13_(company)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von IBM ?", "Welche Agenten entwickelten Werke entwickelt von IBM ?", "Welcher Agent entwickelt Werke entwickelt von IBM ?", "Welcher Agent entwickelte Werke entwickelt von IBM ?", "Wer entwickelt Werke entwickelt von IBM ?", "Wer entwickelte Werke entwickelt von IBM ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/IBM>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Idaho National Laboratory ?", "Welche Agenten entwickelten Werke entwickelt von Idaho National Laboratory ?", "Welcher Agent entwickelt Werke entwickelt von Idaho National Laboratory ?", "Welcher Agent entwickelte Werke entwickelt von Idaho National Laboratory ?", "Wer entwickelt Werke entwickelt von Idaho National Laboratory ?", "Wer entwickelte Werke entwickelt von Idaho National Laboratory ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Idaho_National_Laboratory>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Intel ?", "Welche Agenten entwickelten Werke entwickelt von Intel ?", "Welcher Agent entwickelt Werke entwickelt von Intel ?", "Welcher Agent entwickelte Werke entwickelt von Intel ?", "Wer entwickelt Werke entwickelt von Intel ?", "Wer entwickelte Werke entwickelt von Intel ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Intel>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Jagex ?", "Welche Agenten entwickelten Werke entwickelt von Jagex ?", "Welcher Agent entwickelt Werke entwickelt von Jagex ?", "Welcher Agent entwickelte Werke entwickelt von Jagex ?", "Wer entwickelt Werke entwickelt von Jagex ?", "Wer entwickelte Werke entwickelt von Jagex ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Jagex>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Sega ?", "Welche Agenten entwickelten Werke entwickelt von Sega ?", "Welcher Agent entwickelt Werke entwickelt von Sega ?", "Welcher Agent entwickelte Werke entwickelt von Sega ?", "Wer entwickelt Werke entwickelt von Sega ?", "Wer entwickelte Werke entwickelt von Sega ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Sega>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Nihon Bussan ?", "Welche Agenten entwickelten Werke entwickelt von Nihon Bussan ?", "Welcher Agent entwickelt Werke entwickelt von Nihon Bussan ?", "Welcher Agent entwickelte Werke entwickelt von Nihon Bussan ?", "Wer entwickelt Werke entwickelt von Nihon Bussan ?", "Wer entwickelte Werke entwickelt von Nihon Bussan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Nihon_Bussan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Amiga ?", "Welche Agenten entwickelten Werke entwickelt von Amiga ?", "Welcher Agent entwickelt Werke entwickelt von Amiga ?", "Welcher Agent entwickelte Werke entwickelt von Amiga ?", "Wer entwickelt Werke entwickelt von Amiga ?", "Wer entwickelte Werke entwickelt von Amiga ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Amiga>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Andrew S. Tanenbaum ?", "Welche Agenten entwickelten Werke entwickelt von Andrew S. Tanenbaum ?", "Welcher Agent entwickelt Werke entwickelt von Andrew S. Tanenbaum ?", "Welcher Agent entwickelte Werke entwickelt von Andrew S. Tanenbaum ?", "Wer entwickelt Werke entwickelt von Andrew S. Tanenbaum ?", "Wer entwickelte Werke entwickelt von Andrew S. Tanenbaum ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Andrew_S._Tanenbaum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Apple ?", "Welche Agenten entwickelten Werke entwickelt von Apple ?", "Welcher Agent entwickelt Werke entwickelt von Apple ?", "Welcher Agent entwickelte Werke entwickelt von Apple ?", "Wer entwickelt Werke entwickelt von Apple ?", "Wer entwickelte Werke entwickelt von Apple ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Apple_Inc.>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Argonne National Laboratory ?", "Welche Agenten entwickelten Werke entwickelt von Argonne National Laboratory ?", "Welcher Agent entwickelt Werke entwickelt von Argonne National Laboratory ?", "Welcher Agent entwickelte Werke entwickelt von Argonne National Laboratory ?", "Wer entwickelt Werke entwickelt von Argonne National Laboratory ?", "Wer entwickelte Werke entwickelt von Argonne National Laboratory ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Argonne_National_Laboratory>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Atari, Inc. (1972) ?", "Welche Agenten entwickelten Werke entwickelt von Atari, Inc. (1972) ?", "Welcher Agent entwickelt Werke entwickelt von Atari, Inc. (1972) ?", "Welcher Agent entwickelte Werke entwickelt von Atari, Inc. (1972) ?", "Wer entwickelt Werke entwickelt von Atari, Inc. (1972) ?", "Wer entwickelte Werke entwickelt von Atari, Inc. (1972) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Atari,_Inc.>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Atari Games ?", "Welche Agenten entwickelten Werke entwickelt von Atari Games ?", "Welcher Agent entwickelt Werke entwickelt von Atari Games ?", "Welcher Agent entwickelte Werke entwickelt von Atari Games ?", "Wer entwickelt Werke entwickelt von Atari Games ?", "Wer entwickelte Werke entwickelt von Atari Games ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Atari_Games>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Atlus ?", "Welche Agenten entwickelten Werke entwickelt von Atlus ?", "Welcher Agent entwickelt Werke entwickelt von Atlus ?", "Welcher Agent entwickelte Werke entwickelt von Atlus ?", "Wer entwickelt Werke entwickelt von Atlus ?", "Wer entwickelte Werke entwickelt von Atlus ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Atlus>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Optimized Systems Software ?", "Welche Agenten entwickelten Werke entwickelt von Optimized Systems Software ?", "Welcher Agent entwickelt Werke entwickelt von Optimized Systems Software ?", "Welcher Agent entwickelte Werke entwickelt von Optimized Systems Software ?", "Wer entwickelt Werke entwickelt von Optimized Systems Software ?", "Wer entwickelte Werke entwickelt von Optimized Systems Software ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Optimized_Systems_Software>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Cdv Software Entertainment ?", "Welche Agenten entwickelten Werke entwickelt von Cdv Software Entertainment ?", "Welcher Agent entwickelt Werke entwickelt von Cdv Software Entertainment ?", "Welcher Agent entwickelte Werke entwickelt von Cdv Software Entertainment ?", "Wer entwickelt Werke entwickelt von Cdv Software Entertainment ?", "Wer entwickelte Werke entwickelt von Cdv Software Entertainment ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/CDV_Software>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Thalion Software ?", "Welche Agenten entwickelten Werke entwickelt von Thalion Software ?", "Welcher Agent entwickelt Werke entwickelt von Thalion Software ?", "Welcher Agent entwickelte Werke entwickelt von Thalion Software ?", "Wer entwickelt Werke entwickelt von Thalion Software ?", "Wer entwickelte Werke entwickelt von Thalion Software ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Thalion_Software>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von ABS-CBN Corporation ?", "Welche Agenten entwickelten Werke entwickelt von ABS-CBN Corporation ?", "Welcher Agent entwickelt Werke entwickelt von ABS-CBN Corporation ?", "Welcher Agent entwickelte Werke entwickelt von ABS-CBN Corporation ?", "Wer entwickelt Werke entwickelt von ABS-CBN Corporation ?", "Wer entwickelte Werke entwickelt von ABS-CBN Corporation ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/ABS-CBN>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von AOL ?", "Welche Agenten entwickelten Werke entwickelt von AOL ?", "Welcher Agent entwickelt Werke entwickelt von AOL ?", "Welcher Agent entwickelte Werke entwickelt von AOL ?", "Wer entwickelt Werke entwickelt von AOL ?", "Wer entwickelte Werke entwickelt von AOL ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/AOL>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Acorn ?", "Welche Agenten entwickelten Werke entwickelt von Acorn ?", "Welcher Agent entwickelt Werke entwickelt von Acorn ?", "Welcher Agent entwickelte Werke entwickelt von Acorn ?", "Wer entwickelt Werke entwickelt von Acorn ?", "Wer entwickelte Werke entwickelt von Acorn ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Acorn_Computers>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von AMD ?", "Welche Agenten entwickelten Werke entwickelt von AMD ?", "Welcher Agent entwickelt Werke entwickelt von AMD ?", "Welcher Agent entwickelte Werke entwickelt von AMD ?", "Wer entwickelt Werke entwickelt von AMD ?", "Wer entwickelte Werke entwickelt von AMD ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Advanced_Micro_Devices>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Toshiba ?", "Welche Agenten entwickelten Werke entwickelt von Toshiba ?", "Welcher Agent entwickelt Werke entwickelt von Toshiba ?", "Welcher Agent entwickelte Werke entwickelt von Toshiba ?", "Wer entwickelt Werke entwickelt von Toshiba ?", "Wer entwickelte Werke entwickelt von Toshiba ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Toshiba>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Tishman Speyer Properties ?", "Welche Agenten entwickelten Werke entwickelt von Tishman Speyer Properties ?", "Welcher Agent entwickelt Werke entwickelt von Tishman Speyer Properties ?", "Welcher Agent entwickelte Werke entwickelt von Tishman Speyer Properties ?", "Wer entwickelt Werke entwickelt von Tishman Speyer Properties ?", "Wer entwickelte Werke entwickelt von Tishman Speyer Properties ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Tishman_Speyer>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Brenda Hampton ?", "Welche Agenten entwickelten Werke entwickelt von Brenda Hampton ?", "Welcher Agent entwickelt Werke entwickelt von Brenda Hampton ?", "Welcher Agent entwickelte Werke entwickelt von Brenda Hampton ?", "Wer entwickelt Werke entwickelt von Brenda Hampton ?", "Wer entwickelte Werke entwickelt von Brenda Hampton ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Brenda_Hampton>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Bullfrog Productions ?", "Welche Agenten entwickelten Werke entwickelt von Bullfrog Productions ?", "Welcher Agent entwickelt Werke entwickelt von Bullfrog Productions ?", "Welcher Agent entwickelte Werke entwickelt von Bullfrog Productions ?", "Wer entwickelt Werke entwickelt von Bullfrog Productions ?", "Wer entwickelte Werke entwickelt von Bullfrog Productions ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Bullfrog_Productions>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Autonome Gemeinschaft Madrid ?", "Welche Agenten entwickelten Werke entwickelt von Autonome Gemeinschaft Madrid ?", "Welcher Agent entwickelt Werke entwickelt von Autonome Gemeinschaft Madrid ?", "Welcher Agent entwickelte Werke entwickelt von Autonome Gemeinschaft Madrid ?", "Wer entwickelt Werke entwickelt von Autonome Gemeinschaft Madrid ?", "Wer entwickelte Werke entwickelt von Autonome Gemeinschaft Madrid ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Community_of_Madrid>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Connectix ?", "Welche Agenten entwickelten Werke entwickelt von Connectix ?", "Welcher Agent entwickelt Werke entwickelt von Connectix ?", "Welcher Agent entwickelte Werke entwickelt von Connectix ?", "Wer entwickelt Werke entwickelt von Connectix ?", "Wer entwickelte Werke entwickelt von Connectix ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Connectix>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Conrad Hotels ?", "Welche Agenten entwickelten Werke entwickelt von Conrad Hotels ?", "Welcher Agent entwickelt Werke entwickelt von Conrad Hotels ?", "Welcher Agent entwickelte Werke entwickelt von Conrad Hotels ?", "Wer entwickelt Werke entwickelt von Conrad Hotels ?", "Wer entwickelte Werke entwickelt von Conrad Hotels ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Conrad_Hotels>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Criterion Games ?", "Welche Agenten entwickelten Werke entwickelt von Criterion Games ?", "Welcher Agent entwickelt Werke entwickelt von Criterion Games ?", "Welcher Agent entwickelte Werke entwickelt von Criterion Games ?", "Wer entwickelt Werke entwickelt von Criterion Games ?", "Wer entwickelte Werke entwickelt von Criterion Games ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Criterion_Games>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Crystal Dynamics ?", "Welche Agenten entwickelten Werke entwickelt von Crystal Dynamics ?", "Welcher Agent entwickelt Werke entwickelt von Crystal Dynamics ?", "Welcher Agent entwickelte Werke entwickelt von Crystal Dynamics ?", "Wer entwickelt Werke entwickelt von Crystal Dynamics ?", "Wer entwickelte Werke entwickelt von Crystal Dynamics ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Crystal_Dynamics>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Kuju Entertainment ?", "Welche Agenten entwickelten Werke entwickelt von Kuju Entertainment ?", "Welcher Agent entwickelt Werke entwickelt von Kuju Entertainment ?", "Welcher Agent entwickelte Werke entwickelt von Kuju Entertainment ?", "Wer entwickelt Werke entwickelt von Kuju Entertainment ?", "Wer entwickelte Werke entwickelt von Kuju Entertainment ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Kuju_(company)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Griptonite Games ?", "Welche Agenten entwickelten Werke entwickelt von Griptonite Games ?", "Welcher Agent entwickelt Werke entwickelt von Griptonite Games ?", "Welcher Agent entwickelte Werke entwickelt von Griptonite Games ?", "Wer entwickelt Werke entwickelt von Griptonite Games ?", "Wer entwickelte Werke entwickelt von Griptonite Games ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Griptonite_Games>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von D-Wave Systems ?", "Welche Agenten entwickelten Werke entwickelt von D-Wave Systems ?", "Welcher Agent entwickelt Werke entwickelt von D-Wave Systems ?", "Welcher Agent entwickelte Werke entwickelt von D-Wave Systems ?", "Wer entwickelt Werke entwickelt von D-Wave Systems ?", "Wer entwickelte Werke entwickelt von D-Wave Systems ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/D-Wave_Systems>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "15",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Agenten entwickeln Werke entwickelt von Dassault Systèmes ?", "Welche Agenten entwickelten Werke entwickelt von Dassault Systèmes ?", "Welcher Agent entwickelt Werke entwickelt von Dassault Systèmes ?", "Welcher Agent entwickelte Werke entwickelt von Dassault Systèmes ?", "Wer entwickelt Werke entwickelt von Dassault Systèmes ?", "Wer entwickelte Werke entwickelt von Dassault Systèmes ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Dassault_Systèmes>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Madelaine Petsch ?", "Welche Person spielte fiktive Charaktere gespielt von Madelaine Petsch ?", "Welche Personen spielen fiktive Charaktere gespielt von Madelaine Petsch ?", "Welche Personen spielten fiktive Charaktere gespielt von Madelaine Petsch ?", "Wer spielt fiktive Charaktere gespielt von Madelaine Petsch ?", "Wer spielte fiktive Charaktere gespielt von Madelaine Petsch ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Madelaine_Petsch>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Maggie Q ?", "Welche Person spielte fiktive Charaktere gespielt von Maggie Q ?", "Welche Personen spielen fiktive Charaktere gespielt von Maggie Q ?", "Welche Personen spielten fiktive Charaktere gespielt von Maggie Q ?", "Wer spielt fiktive Charaktere gespielt von Maggie Q ?", "Wer spielte fiktive Charaktere gespielt von Maggie Q ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maggie_Q>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Maleficent – Die dunkle Fee ?", "Welche Person spielte fiktive Charaktere gespielt von Maleficent – Die dunkle Fee ?", "Welche Personen spielen fiktive Charaktere gespielt von Maleficent – Die dunkle Fee ?", "Welche Personen spielten fiktive Charaktere gespielt von Maleficent – Die dunkle Fee ?", "Wer spielt fiktive Charaktere gespielt von Maleficent – Die dunkle Fee ?", "Wer spielte fiktive Charaktere gespielt von Maleficent – Die dunkle Fee ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maleficent_(film)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Welche Person spielte fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Welche Personen spielen fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Welche Personen spielten fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Wer spielt fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?", "Wer spielte fiktive Charaktere gespielt von Lana Hutton Bowen-Judd ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sara_Woods>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Descendants – Die Nachkommen ?", "Welche Person spielte fiktive Charaktere gespielt von Descendants – Die Nachkommen ?", "Welche Personen spielen fiktive Charaktere gespielt von Descendants – Die Nachkommen ?", "Welche Personen spielten fiktive Charaktere gespielt von Descendants – Die Nachkommen ?", "Wer spielt fiktive Charaktere gespielt von Descendants – Die Nachkommen ?", "Wer spielte fiktive Charaktere gespielt von Descendants – Die Nachkommen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Descendants_(2015_film)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Diane Neal ?", "Welche Person spielte fiktive Charaktere gespielt von Diane Neal ?", "Welche Personen spielen fiktive Charaktere gespielt von Diane Neal ?", "Welche Personen spielten fiktive Charaktere gespielt von Diane Neal ?", "Wer spielt fiktive Charaktere gespielt von Diane Neal ?", "Wer spielte fiktive Charaktere gespielt von Diane Neal ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Diane_Neal>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Diego Luna ?", "Welche Person spielte fiktive Charaktere gespielt von Diego Luna ?", "Welche Personen spielen fiktive Charaktere gespielt von Diego Luna ?", "Welche Personen spielten fiktive Charaktere gespielt von Diego Luna ?", "Wer spielt fiktive Charaktere gespielt von Diego Luna ?", "Wer spielte fiktive Charaktere gespielt von Diego Luna ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Diego_Luna>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Goran Višnjić ?", "Welche Person spielte fiktive Charaktere gespielt von Goran Višnjić ?", "Welche Personen spielen fiktive Charaktere gespielt von Goran Višnjić ?", "Welche Personen spielten fiktive Charaktere gespielt von Goran Višnjić ?", "Wer spielt fiktive Charaktere gespielt von Goran Višnjić ?", "Wer spielte fiktive Charaktere gespielt von Goran Višnjić ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Goran_Višnjić>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Greg Vaughan ?", "Welche Person spielte fiktive Charaktere gespielt von Greg Vaughan ?", "Welche Personen spielen fiktive Charaktere gespielt von Greg Vaughan ?", "Welche Personen spielten fiktive Charaktere gespielt von Greg Vaughan ?", "Wer spielt fiktive Charaktere gespielt von Greg Vaughan ?", "Wer spielte fiktive Charaktere gespielt von Greg Vaughan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Greg_Vaughan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Kristen Bell ?", "Welche Person spielte fiktive Charaktere gespielt von Kristen Bell ?", "Welche Personen spielen fiktive Charaktere gespielt von Kristen Bell ?", "Welche Personen spielten fiktive Charaktere gespielt von Kristen Bell ?", "Wer spielt fiktive Charaktere gespielt von Kristen Bell ?", "Wer spielte fiktive Charaktere gespielt von Kristen Bell ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kristen_Bell>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Kristin Chenoweth ?", "Welche Person spielte fiktive Charaktere gespielt von Kristin Chenoweth ?", "Welche Personen spielen fiktive Charaktere gespielt von Kristin Chenoweth ?", "Welche Personen spielten fiktive Charaktere gespielt von Kristin Chenoweth ?", "Wer spielt fiktive Charaktere gespielt von Kristin Chenoweth ?", "Wer spielte fiktive Charaktere gespielt von Kristin Chenoweth ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kristin_Chenoweth>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Kristine Sutherland ?", "Welche Person spielte fiktive Charaktere gespielt von Kristine Sutherland ?", "Welche Personen spielen fiktive Charaktere gespielt von Kristine Sutherland ?", "Welche Personen spielten fiktive Charaktere gespielt von Kristine Sutherland ?", "Wer spielt fiktive Charaktere gespielt von Kristine Sutherland ?", "Wer spielte fiktive Charaktere gespielt von Kristine Sutherland ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kristine_Sutherland>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Queen Latifah ?", "Welche Person spielte fiktive Charaktere gespielt von Queen Latifah ?", "Welche Personen spielen fiktive Charaktere gespielt von Queen Latifah ?", "Welche Personen spielten fiktive Charaktere gespielt von Queen Latifah ?", "Wer spielt fiktive Charaktere gespielt von Queen Latifah ?", "Wer spielte fiktive Charaktere gespielt von Queen Latifah ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Queen_Latifah>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Ralph Fiennes ?", "Welche Person spielte fiktive Charaktere gespielt von Ralph Fiennes ?", "Welche Personen spielen fiktive Charaktere gespielt von Ralph Fiennes ?", "Welche Personen spielten fiktive Charaktere gespielt von Ralph Fiennes ?", "Wer spielt fiktive Charaktere gespielt von Ralph Fiennes ?", "Wer spielte fiktive Charaktere gespielt von Ralph Fiennes ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ralph_Fiennes>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Alexandra Chando ?", "Welche Person spielte fiktive Charaktere gespielt von Alexandra Chando ?", "Welche Personen spielen fiktive Charaktere gespielt von Alexandra Chando ?", "Welche Personen spielten fiktive Charaktere gespielt von Alexandra Chando ?", "Wer spielt fiktive Charaktere gespielt von Alexandra Chando ?", "Wer spielte fiktive Charaktere gespielt von Alexandra Chando ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Alexandra_Chando>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Catherine Bach ?", "Welche Person spielte fiktive Charaktere gespielt von Catherine Bach ?", "Welche Personen spielen fiktive Charaktere gespielt von Catherine Bach ?", "Welche Personen spielten fiktive Charaktere gespielt von Catherine Bach ?", "Wer spielt fiktive Charaktere gespielt von Catherine Bach ?", "Wer spielte fiktive Charaktere gespielt von Catherine Bach ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Catherine_Bach>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Chad Michael Murray ?", "Welche Person spielte fiktive Charaktere gespielt von Chad Michael Murray ?", "Welche Personen spielen fiktive Charaktere gespielt von Chad Michael Murray ?", "Welche Personen spielten fiktive Charaktere gespielt von Chad Michael Murray ?", "Wer spielt fiktive Charaktere gespielt von Chad Michael Murray ?", "Wer spielte fiktive Charaktere gespielt von Chad Michael Murray ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Chad_Michael_Murray>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Charisma Carpenter ?", "Welche Person spielte fiktive Charaktere gespielt von Charisma Carpenter ?", "Welche Personen spielen fiktive Charaktere gespielt von Charisma Carpenter ?", "Welche Personen spielten fiktive Charaktere gespielt von Charisma Carpenter ?", "Wer spielt fiktive Charaktere gespielt von Charisma Carpenter ?", "Wer spielte fiktive Charaktere gespielt von Charisma Carpenter ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Charisma_Carpenter>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Charles Gray ?", "Welche Person spielte fiktive Charaktere gespielt von Charles Gray ?", "Welche Personen spielen fiktive Charaktere gespielt von Charles Gray ?", "Welche Personen spielten fiktive Charaktere gespielt von Charles Gray ?", "Wer spielt fiktive Charaktere gespielt von Charles Gray ?", "Wer spielte fiktive Charaktere gespielt von Charles Gray ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Charles_Gray_(actor)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Noah Hathaway ?", "Welche Person spielte fiktive Charaktere gespielt von Noah Hathaway ?", "Welche Personen spielen fiktive Charaktere gespielt von Noah Hathaway ?", "Welche Personen spielten fiktive Charaktere gespielt von Noah Hathaway ?", "Wer spielt fiktive Charaktere gespielt von Noah Hathaway ?", "Wer spielte fiktive Charaktere gespielt von Noah Hathaway ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Noah_Hathaway>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Azura Skye ?", "Welche Person spielte fiktive Charaktere gespielt von Azura Skye ?", "Welche Personen spielen fiktive Charaktere gespielt von Azura Skye ?", "Welche Personen spielten fiktive Charaktere gespielt von Azura Skye ?", "Wer spielt fiktive Charaktere gespielt von Azura Skye ?", "Wer spielte fiktive Charaktere gespielt von Azura Skye ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Azura_Skye>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Lois Wilson ?", "Welche Person spielte fiktive Charaktere gespielt von Lois Wilson ?", "Welche Personen spielen fiktive Charaktere gespielt von Lois Wilson ?", "Welche Personen spielten fiktive Charaktere gespielt von Lois Wilson ?", "Wer spielt fiktive Charaktere gespielt von Lois Wilson ?", "Wer spielte fiktive Charaktere gespielt von Lois Wilson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lois_Wilson_(actress)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Camila Mendes ?", "Welche Person spielte fiktive Charaktere gespielt von Camila Mendes ?", "Welche Personen spielen fiktive Charaktere gespielt von Camila Mendes ?", "Welche Personen spielten fiktive Charaktere gespielt von Camila Mendes ?", "Wer spielt fiktive Charaktere gespielt von Camila Mendes ?", "Wer spielte fiktive Charaktere gespielt von Camila Mendes ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Camila_Mendes>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Carel Struycken ?", "Welche Person spielte fiktive Charaktere gespielt von Carel Struycken ?", "Welche Personen spielen fiktive Charaktere gespielt von Carel Struycken ?", "Welche Personen spielten fiktive Charaktere gespielt von Carel Struycken ?", "Wer spielt fiktive Charaktere gespielt von Carel Struycken ?", "Wer spielte fiktive Charaktere gespielt von Carel Struycken ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Carel_Struycken>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Carey Mulligan ?", "Welche Person spielte fiktive Charaktere gespielt von Carey Mulligan ?", "Welche Personen spielen fiktive Charaktere gespielt von Carey Mulligan ?", "Welche Personen spielten fiktive Charaktere gespielt von Carey Mulligan ?", "Wer spielt fiktive Charaktere gespielt von Carey Mulligan ?", "Wer spielte fiktive Charaktere gespielt von Carey Mulligan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Carey_Mulligan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Chloë Grace Moretz ?", "Welche Person spielte fiktive Charaktere gespielt von Chloë Grace Moretz ?", "Welche Personen spielen fiktive Charaktere gespielt von Chloë Grace Moretz ?", "Welche Personen spielten fiktive Charaktere gespielt von Chloë Grace Moretz ?", "Wer spielt fiktive Charaktere gespielt von Chloë Grace Moretz ?", "Wer spielte fiktive Charaktere gespielt von Chloë Grace Moretz ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Chloë_Grace_Moretz>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Christoph Waltz ?", "Welche Person spielte fiktive Charaktere gespielt von Christoph Waltz ?", "Welche Personen spielen fiktive Charaktere gespielt von Christoph Waltz ?", "Welche Personen spielten fiktive Charaktere gespielt von Christoph Waltz ?", "Wer spielt fiktive Charaktere gespielt von Christoph Waltz ?", "Wer spielte fiktive Charaktere gespielt von Christoph Waltz ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Christoph_Waltz>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Clare Kramer ?", "Welche Person spielte fiktive Charaktere gespielt von Clare Kramer ?", "Welche Personen spielen fiktive Charaktere gespielt von Clare Kramer ?", "Welche Personen spielten fiktive Charaktere gespielt von Clare Kramer ?", "Wer spielt fiktive Charaktere gespielt von Clare Kramer ?", "Wer spielte fiktive Charaktere gespielt von Clare Kramer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Clare_Kramer>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von George Hertzberg ?", "Welche Person spielte fiktive Charaktere gespielt von George Hertzberg ?", "Welche Personen spielen fiktive Charaktere gespielt von George Hertzberg ?", "Welche Personen spielten fiktive Charaktere gespielt von George Hertzberg ?", "Wer spielt fiktive Charaktere gespielt von George Hertzberg ?", "Wer spielte fiktive Charaktere gespielt von George Hertzberg ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/George_Hertzberg>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von George Kennedy ?", "Welche Person spielte fiktive Charaktere gespielt von George Kennedy ?", "Welche Personen spielen fiktive Charaktere gespielt von George Kennedy ?", "Welche Personen spielten fiktive Charaktere gespielt von George Kennedy ?", "Wer spielt fiktive Charaktere gespielt von George Kennedy ?", "Wer spielte fiktive Charaktere gespielt von George Kennedy ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/George_Kennedy>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Jean-Claude Van Damme ?", "Welche Person spielte fiktive Charaktere gespielt von Jean-Claude Van Damme ?", "Welche Personen spielen fiktive Charaktere gespielt von Jean-Claude Van Damme ?", "Welche Personen spielten fiktive Charaktere gespielt von Jean-Claude Van Damme ?", "Wer spielt fiktive Charaktere gespielt von Jean-Claude Van Damme ?", "Wer spielte fiktive Charaktere gespielt von Jean-Claude Van Damme ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jean-Claude_Van_Damme>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Jeffrey DeMunn ?", "Welche Person spielte fiktive Charaktere gespielt von Jeffrey DeMunn ?", "Welche Personen spielen fiktive Charaktere gespielt von Jeffrey DeMunn ?", "Welche Personen spielten fiktive Charaktere gespielt von Jeffrey DeMunn ?", "Wer spielt fiktive Charaktere gespielt von Jeffrey DeMunn ?", "Wer spielte fiktive Charaktere gespielt von Jeffrey DeMunn ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jeffrey_DeMunn>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Jeremy Sisto ?", "Welche Person spielte fiktive Charaktere gespielt von Jeremy Sisto ?", "Welche Personen spielen fiktive Charaktere gespielt von Jeremy Sisto ?", "Welche Personen spielten fiktive Charaktere gespielt von Jeremy Sisto ?", "Wer spielt fiktive Charaktere gespielt von Jeremy Sisto ?", "Wer spielte fiktive Charaktere gespielt von Jeremy Sisto ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jeremy_Sisto>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Jessica Simpson ?", "Welche Person spielte fiktive Charaktere gespielt von Jessica Simpson ?", "Welche Personen spielen fiktive Charaktere gespielt von Jessica Simpson ?", "Welche Personen spielten fiktive Charaktere gespielt von Jessica Simpson ?", "Wer spielt fiktive Charaktere gespielt von Jessica Simpson ?", "Wer spielte fiktive Charaktere gespielt von Jessica Simpson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jessica_Simpson>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Jodelle Ferland ?", "Welche Person spielte fiktive Charaktere gespielt von Jodelle Ferland ?", "Welche Personen spielen fiktive Charaktere gespielt von Jodelle Ferland ?", "Welche Personen spielten fiktive Charaktere gespielt von Jodelle Ferland ?", "Wer spielt fiktive Charaktere gespielt von Jodelle Ferland ?", "Wer spielte fiktive Charaktere gespielt von Jodelle Ferland ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jodelle_Ferland>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Joey Luthman ?", "Welche Person spielte fiktive Charaktere gespielt von Joey Luthman ?", "Welche Personen spielen fiktive Charaktere gespielt von Joey Luthman ?", "Welche Personen spielten fiktive Charaktere gespielt von Joey Luthman ?", "Wer spielt fiktive Charaktere gespielt von Joey Luthman ?", "Wer spielte fiktive Charaktere gespielt von Joey Luthman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Joey_Luthman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von John DeSantis ?", "Welche Person spielte fiktive Charaktere gespielt von John DeSantis ?", "Welche Personen spielen fiktive Charaktere gespielt von John DeSantis ?", "Welche Personen spielten fiktive Charaktere gespielt von John DeSantis ?", "Wer spielt fiktive Charaktere gespielt von John DeSantis ?", "Wer spielte fiktive Charaktere gespielt von John DeSantis ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/John_DeSantis>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von John Goodman ?", "Welche Person spielte fiktive Charaktere gespielt von John Goodman ?", "Welche Personen spielen fiktive Charaktere gespielt von John Goodman ?", "Welche Personen spielten fiktive Charaktere gespielt von John Goodman ?", "Wer spielt fiktive Charaktere gespielt von John Goodman ?", "Wer spielte fiktive Charaktere gespielt von John Goodman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/John_Goodman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von John Hollis ?", "Welche Person spielte fiktive Charaktere gespielt von John Hollis ?", "Welche Personen spielen fiktive Charaktere gespielt von John Hollis ?", "Welche Personen spielten fiktive Charaktere gespielt von John Hollis ?", "Wer spielt fiktive Charaktere gespielt von John Hollis ?", "Wer spielte fiktive Charaktere gespielt von John Hollis ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/John_Hollis>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von John Huston ?", "Welche Person spielte fiktive Charaktere gespielt von John Huston ?", "Welche Personen spielen fiktive Charaktere gespielt von John Huston ?", "Welche Personen spielten fiktive Charaktere gespielt von John Huston ?", "Wer spielt fiktive Charaktere gespielt von John Huston ?", "Wer spielte fiktive Charaktere gespielt von John Huston ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/John_Huston>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von John Leguizamo ?", "Welche Person spielte fiktive Charaktere gespielt von John Leguizamo ?", "Welche Personen spielen fiktive Charaktere gespielt von John Leguizamo ?", "Welche Personen spielten fiktive Charaktere gespielt von John Leguizamo ?", "Wer spielt fiktive Charaktere gespielt von John Leguizamo ?", "Wer spielte fiktive Charaktere gespielt von John Leguizamo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/John_Leguizamo>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Bernard Lee ?", "Welche Person spielte fiktive Charaktere gespielt von Bernard Lee ?", "Welche Personen spielen fiktive Charaktere gespielt von Bernard Lee ?", "Welche Personen spielten fiktive Charaktere gespielt von Bernard Lee ?", "Wer spielt fiktive Charaktere gespielt von Bernard Lee ?", "Wer spielte fiktive Charaktere gespielt von Bernard Lee ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Bernard_Lee>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Betty Field ?", "Welche Person spielte fiktive Charaktere gespielt von Betty Field ?", "Welche Personen spielen fiktive Charaktere gespielt von Betty Field ?", "Welche Personen spielten fiktive Charaktere gespielt von Betty Field ?", "Wer spielt fiktive Charaktere gespielt von Betty Field ?", "Wer spielte fiktive Charaktere gespielt von Betty Field ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Betty_Field>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Karen Kopins ?", "Welche Person spielte fiktive Charaktere gespielt von Karen Kopins ?", "Welche Personen spielen fiktive Charaktere gespielt von Karen Kopins ?", "Welche Personen spielten fiktive Charaktere gespielt von Karen Kopins ?", "Wer spielt fiktive Charaktere gespielt von Karen Kopins ?", "Wer spielte fiktive Charaktere gespielt von Karen Kopins ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Karen_Kopins>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Kent McCord ?", "Welche Person spielte fiktive Charaktere gespielt von Kent McCord ?", "Welche Personen spielen fiktive Charaktere gespielt von Kent McCord ?", "Welche Personen spielten fiktive Charaktere gespielt von Kent McCord ?", "Wer spielt fiktive Charaktere gespielt von Kent McCord ?", "Wer spielte fiktive Charaktere gespielt von Kent McCord ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kent_McCord>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Lincoln Younes ?", "Welche Person spielte fiktive Charaktere gespielt von Lincoln Younes ?", "Welche Personen spielen fiktive Charaktere gespielt von Lincoln Younes ?", "Welche Personen spielten fiktive Charaktere gespielt von Lincoln Younes ?", "Wer spielt fiktive Charaktere gespielt von Lincoln Younes ?", "Wer spielte fiktive Charaktere gespielt von Lincoln Younes ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lincoln_Younes>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Linzi Hateley ?", "Welche Person spielte fiktive Charaktere gespielt von Linzi Hateley ?", "Welche Personen spielen fiktive Charaktere gespielt von Linzi Hateley ?", "Welche Personen spielten fiktive Charaktere gespielt von Linzi Hateley ?", "Wer spielt fiktive Charaktere gespielt von Linzi Hateley ?", "Wer spielte fiktive Charaktere gespielt von Linzi Hateley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Linzi_Hateley>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Lisa McCune ?", "Welche Person spielte fiktive Charaktere gespielt von Lisa McCune ?", "Welche Personen spielen fiktive Charaktere gespielt von Lisa McCune ?", "Welche Personen spielten fiktive Charaktere gespielt von Lisa McCune ?", "Wer spielt fiktive Charaktere gespielt von Lisa McCune ?", "Wer spielte fiktive Charaktere gespielt von Lisa McCune ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lisa_McCune>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Yvonne Zima ?", "Welche Person spielte fiktive Charaktere gespielt von Yvonne Zima ?", "Welche Personen spielen fiktive Charaktere gespielt von Yvonne Zima ?", "Welche Personen spielten fiktive Charaktere gespielt von Yvonne Zima ?", "Wer spielt fiktive Charaktere gespielt von Yvonne Zima ?", "Wer spielte fiktive Charaktere gespielt von Yvonne Zima ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Yvonne_Zima>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Michiel Huisman ?", "Welche Person spielte fiktive Charaktere gespielt von Michiel Huisman ?", "Welche Personen spielen fiktive Charaktere gespielt von Michiel Huisman ?", "Welche Personen spielten fiktive Charaktere gespielt von Michiel Huisman ?", "Wer spielt fiktive Charaktere gespielt von Michiel Huisman ?", "Wer spielte fiktive Charaktere gespielt von Michiel Huisman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michiel_Huisman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Mira Sorvino ?", "Welche Person spielte fiktive Charaktere gespielt von Mira Sorvino ?", "Welche Personen spielen fiktive Charaktere gespielt von Mira Sorvino ?", "Welche Personen spielten fiktive Charaktere gespielt von Mira Sorvino ?", "Wer spielt fiktive Charaktere gespielt von Mira Sorvino ?", "Wer spielte fiktive Charaktere gespielt von Mira Sorvino ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mira_Sorvino>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Misha Collins ?", "Welche Person spielte fiktive Charaktere gespielt von Misha Collins ?", "Welche Personen spielen fiktive Charaktere gespielt von Misha Collins ?", "Welche Personen spielten fiktive Charaktere gespielt von Misha Collins ?", "Wer spielt fiktive Charaktere gespielt von Misha Collins ?", "Wer spielte fiktive Charaktere gespielt von Misha Collins ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Misha_Collins>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Ryan Carnes ?", "Welche Person spielte fiktive Charaktere gespielt von Ryan Carnes ?", "Welche Personen spielen fiktive Charaktere gespielt von Ryan Carnes ?", "Welche Personen spielten fiktive Charaktere gespielt von Ryan Carnes ?", "Wer spielt fiktive Charaktere gespielt von Ryan Carnes ?", "Wer spielte fiktive Charaktere gespielt von Ryan Carnes ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ryan_Carnes>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Sam Neill ?", "Welche Person spielte fiktive Charaktere gespielt von Sam Neill ?", "Welche Personen spielen fiktive Charaktere gespielt von Sam Neill ?", "Welche Personen spielten fiktive Charaktere gespielt von Sam Neill ?", "Wer spielt fiktive Charaktere gespielt von Sam Neill ?", "Wer spielte fiktive Charaktere gespielt von Sam Neill ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sam_Neill>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Rachel Kimsey ?", "Welche Person spielte fiktive Charaktere gespielt von Rachel Kimsey ?", "Welche Personen spielen fiktive Charaktere gespielt von Rachel Kimsey ?", "Welche Personen spielten fiktive Charaktere gespielt von Rachel Kimsey ?", "Wer spielt fiktive Charaktere gespielt von Rachel Kimsey ?", "Wer spielte fiktive Charaktere gespielt von Rachel Kimsey ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Rachel_Kimsey>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Donald Pleasence ?", "Welche Person spielte fiktive Charaktere gespielt von Donald Pleasence ?", "Welche Personen spielen fiktive Charaktere gespielt von Donald Pleasence ?", "Welche Personen spielten fiktive Charaktere gespielt von Donald Pleasence ?", "Wer spielt fiktive Charaktere gespielt von Donald Pleasence ?", "Wer spielte fiktive Charaktere gespielt von Donald Pleasence ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Donald_Pleasence>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Donovan Scott ?", "Welche Person spielte fiktive Charaktere gespielt von Donovan Scott ?", "Welche Personen spielen fiktive Charaktere gespielt von Donovan Scott ?", "Welche Personen spielten fiktive Charaktere gespielt von Donovan Scott ?", "Wer spielt fiktive Charaktere gespielt von Donovan Scott ?", "Wer spielte fiktive Charaktere gespielt von Donovan Scott ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Donovan_Scott>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Ed Skrein ?", "Welche Person spielte fiktive Charaktere gespielt von Ed Skrein ?", "Welche Personen spielen fiktive Charaktere gespielt von Ed Skrein ?", "Welche Personen spielten fiktive Charaktere gespielt von Ed Skrein ?", "Wer spielt fiktive Charaktere gespielt von Ed Skrein ?", "Wer spielte fiktive Charaktere gespielt von Ed Skrein ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ed_Skrein>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Edward Fox ?", "Welche Person spielte fiktive Charaktere gespielt von Edward Fox ?", "Welche Personen spielen fiktive Charaktere gespielt von Edward Fox ?", "Welche Personen spielten fiktive Charaktere gespielt von Edward Fox ?", "Wer spielt fiktive Charaktere gespielt von Edward Fox ?", "Wer spielte fiktive Charaktere gespielt von Edward Fox ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Edward_Fox_(actor)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Frank Bank ?", "Welche Person spielte fiktive Charaktere gespielt von Frank Bank ?", "Welche Personen spielen fiktive Charaktere gespielt von Frank Bank ?", "Welche Personen spielten fiktive Charaktere gespielt von Frank Bank ?", "Wer spielt fiktive Charaktere gespielt von Frank Bank ?", "Wer spielte fiktive Charaktere gespielt von Frank Bank ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Frank_Bank>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Frank Oz ?", "Welche Person spielte fiktive Charaktere gespielt von Frank Oz ?", "Welche Personen spielen fiktive Charaktere gespielt von Frank Oz ?", "Welche Personen spielten fiktive Charaktere gespielt von Frank Oz ?", "Wer spielt fiktive Charaktere gespielt von Frank Oz ?", "Wer spielte fiktive Charaktere gespielt von Frank Oz ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Frank_Oz>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Hannah Murray ?", "Welche Person spielte fiktive Charaktere gespielt von Hannah Murray ?", "Welche Personen spielen fiktive Charaktere gespielt von Hannah Murray ?", "Welche Personen spielten fiktive Charaktere gespielt von Hannah Murray ?", "Wer spielt fiktive Charaktere gespielt von Hannah Murray ?", "Wer spielte fiktive Charaktere gespielt von Hannah Murray ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Hannah_Murray>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Harry Groener ?", "Welche Person spielte fiktive Charaktere gespielt von Harry Groener ?", "Welche Personen spielen fiktive Charaktere gespielt von Harry Groener ?", "Welche Personen spielten fiktive Charaktere gespielt von Harry Groener ?", "Wer spielt fiktive Charaktere gespielt von Harry Groener ?", "Wer spielte fiktive Charaktere gespielt von Harry Groener ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Harry_Groener>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Haruo Nakajima ?", "Welche Person spielte fiktive Charaktere gespielt von Haruo Nakajima ?", "Welche Personen spielen fiktive Charaktere gespielt von Haruo Nakajima ?", "Welche Personen spielten fiktive Charaktere gespielt von Haruo Nakajima ?", "Wer spielt fiktive Charaktere gespielt von Haruo Nakajima ?", "Wer spielte fiktive Charaktere gespielt von Haruo Nakajima ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Haruo_Nakajima>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Holliday Grainger ?", "Welche Person spielte fiktive Charaktere gespielt von Holliday Grainger ?", "Welche Personen spielen fiktive Charaktere gespielt von Holliday Grainger ?", "Welche Personen spielten fiktive Charaktere gespielt von Holliday Grainger ?", "Wer spielt fiktive Charaktere gespielt von Holliday Grainger ?", "Wer spielte fiktive Charaktere gespielt von Holliday Grainger ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Holliday_Grainger>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Ian Somerhalder ?", "Welche Person spielte fiktive Charaktere gespielt von Ian Somerhalder ?", "Welche Personen spielen fiktive Charaktere gespielt von Ian Somerhalder ?", "Welche Personen spielten fiktive Charaktere gespielt von Ian Somerhalder ?", "Wer spielt fiktive Charaktere gespielt von Ian Somerhalder ?", "Wer spielte fiktive Charaktere gespielt von Ian Somerhalder ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ian_Somerhalder>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von James Marsters ?", "Welche Person spielte fiktive Charaktere gespielt von James Marsters ?", "Welche Personen spielen fiktive Charaktere gespielt von James Marsters ?", "Welche Personen spielten fiktive Charaktere gespielt von James Marsters ?", "Wer spielt fiktive Charaktere gespielt von James Marsters ?", "Wer spielte fiktive Charaktere gespielt von James Marsters ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/James_Marsters>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von James Patrick Stuart ?", "Welche Person spielte fiktive Charaktere gespielt von James Patrick Stuart ?", "Welche Personen spielen fiktive Charaktere gespielt von James Patrick Stuart ?", "Welche Personen spielten fiktive Charaktere gespielt von James Patrick Stuart ?", "Wer spielt fiktive Charaktere gespielt von James Patrick Stuart ?", "Wer spielte fiktive Charaktere gespielt von James Patrick Stuart ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/James_Patrick_Stuart>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Jason Anthony Miller ?", "Welche Person spielte fiktive Charaktere gespielt von Jason Anthony Miller ?", "Welche Personen spielen fiktive Charaktere gespielt von Jason Anthony Miller ?", "Welche Personen spielten fiktive Charaktere gespielt von Jason Anthony Miller ?", "Wer spielt fiktive Charaktere gespielt von Jason Anthony Miller ?", "Wer spielte fiktive Charaktere gespielt von Jason Anthony Miller ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jason_Miller_(playwright)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Samuel L. Jackson ?", "Welche Person spielte fiktive Charaktere gespielt von Samuel L. Jackson ?", "Welche Personen spielen fiktive Charaktere gespielt von Samuel L. Jackson ?", "Welche Personen spielten fiktive Charaktere gespielt von Samuel L. Jackson ?", "Wer spielt fiktive Charaktere gespielt von Samuel L. Jackson ?", "Wer spielte fiktive Charaktere gespielt von Samuel L. Jackson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Samuel_L._Jackson>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Welche Person spielte fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Welche Personen spielen fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Welche Personen spielten fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Wer spielt fiktive Charaktere gespielt von Sarah Jessica Parker ?", "Wer spielte fiktive Charaktere gespielt von Sarah Jessica Parker ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sarah_Jessica_Parker>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Sarah Lancashire ?", "Welche Person spielte fiktive Charaktere gespielt von Sarah Lancashire ?", "Welche Personen spielen fiktive Charaktere gespielt von Sarah Lancashire ?", "Welche Personen spielten fiktive Charaktere gespielt von Sarah Lancashire ?", "Wer spielt fiktive Charaktere gespielt von Sarah Lancashire ?", "Wer spielte fiktive Charaktere gespielt von Sarah Lancashire ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sarah_Lancashire>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Sarah Michelle Gellar ?", "Welche Person spielte fiktive Charaktere gespielt von Sarah Michelle Gellar ?", "Welche Personen spielen fiktive Charaktere gespielt von Sarah Michelle Gellar ?", "Welche Personen spielten fiktive Charaktere gespielt von Sarah Michelle Gellar ?", "Wer spielt fiktive Charaktere gespielt von Sarah Michelle Gellar ?", "Wer spielte fiktive Charaktere gespielt von Sarah Michelle Gellar ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sarah_Michelle_Gellar>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Seamus Davey-Fitzpatrick ?", "Welche Person spielte fiktive Charaktere gespielt von Seamus Davey-Fitzpatrick ?", "Welche Personen spielen fiktive Charaktere gespielt von Seamus Davey-Fitzpatrick ?", "Welche Personen spielten fiktive Charaktere gespielt von Seamus Davey-Fitzpatrick ?", "Wer spielt fiktive Charaktere gespielt von Seamus Davey-Fitzpatrick ?", "Wer spielte fiktive Charaktere gespielt von Seamus Davey-Fitzpatrick ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Seamus_Davey-Fitzpatrick>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Angela Bassett ?", "Welche Person spielte fiktive Charaktere gespielt von Angela Bassett ?", "Welche Personen spielen fiktive Charaktere gespielt von Angela Bassett ?", "Welche Personen spielten fiktive Charaktere gespielt von Angela Bassett ?", "Wer spielt fiktive Charaktere gespielt von Angela Bassett ?", "Wer spielte fiktive Charaktere gespielt von Angela Bassett ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Angela_Bassett>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Angela Bettis ?", "Welche Person spielte fiktive Charaktere gespielt von Angela Bettis ?", "Welche Personen spielen fiktive Charaktere gespielt von Angela Bettis ?", "Welche Personen spielten fiktive Charaktere gespielt von Angela Bettis ?", "Wer spielt fiktive Charaktere gespielt von Angela Bettis ?", "Wer spielte fiktive Charaktere gespielt von Angela Bettis ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Angela_Bettis>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Angelina Jolie ?", "Welche Person spielte fiktive Charaktere gespielt von Angelina Jolie ?", "Welche Personen spielen fiktive Charaktere gespielt von Angelina Jolie ?", "Welche Personen spielten fiktive Charaktere gespielt von Angelina Jolie ?", "Wer spielt fiktive Charaktere gespielt von Angelina Jolie ?", "Wer spielte fiktive Charaktere gespielt von Angelina Jolie ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Angelina_Jolie>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von AnnaSophia Robb ?", "Welche Person spielte fiktive Charaktere gespielt von AnnaSophia Robb ?", "Welche Personen spielen fiktive Charaktere gespielt von AnnaSophia Robb ?", "Welche Personen spielten fiktive Charaktere gespielt von AnnaSophia Robb ?", "Wer spielt fiktive Charaktere gespielt von AnnaSophia Robb ?", "Wer spielte fiktive Charaktere gespielt von AnnaSophia Robb ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/AnnaSophia_Robb>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Anna Maxwell Martin ?", "Welche Person spielte fiktive Charaktere gespielt von Anna Maxwell Martin ?", "Welche Personen spielen fiktive Charaktere gespielt von Anna Maxwell Martin ?", "Welche Personen spielten fiktive Charaktere gespielt von Anna Maxwell Martin ?", "Wer spielt fiktive Charaktere gespielt von Anna Maxwell Martin ?", "Wer spielte fiktive Charaktere gespielt von Anna Maxwell Martin ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anna_Maxwell_Martin>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Anthony Dawson ?", "Welche Person spielte fiktive Charaktere gespielt von Anthony Dawson ?", "Welche Personen spielen fiktive Charaktere gespielt von Anthony Dawson ?", "Welche Personen spielten fiktive Charaktere gespielt von Anthony Dawson ?", "Wer spielt fiktive Charaktere gespielt von Anthony Dawson ?", "Wer spielte fiktive Charaktere gespielt von Anthony Dawson ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anthony_Dawson>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Anthony Geary ?", "Welche Person spielte fiktive Charaktere gespielt von Anthony Geary ?", "Welche Personen spielen fiktive Charaktere gespielt von Anthony Geary ?", "Welche Personen spielten fiktive Charaktere gespielt von Anthony Geary ?", "Wer spielt fiktive Charaktere gespielt von Anthony Geary ?", "Wer spielte fiktive Charaktere gespielt von Anthony Geary ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anthony_Geary>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von April Scott ?", "Welche Person spielte fiktive Charaktere gespielt von April Scott ?", "Welche Personen spielen fiktive Charaktere gespielt von April Scott ?", "Welche Personen spielten fiktive Charaktere gespielt von April Scott ?", "Wer spielt fiktive Charaktere gespielt von April Scott ?", "Wer spielte fiktive Charaktere gespielt von April Scott ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/April_Scott>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Barbara’s Baby – Omen III ?", "Welche Person spielte fiktive Charaktere gespielt von Barbara’s Baby – Omen III ?", "Welche Personen spielen fiktive Charaktere gespielt von Barbara’s Baby – Omen III ?", "Welche Personen spielten fiktive Charaktere gespielt von Barbara’s Baby – Omen III ?", "Wer spielt fiktive Charaktere gespielt von Barbara’s Baby – Omen III ?", "Wer spielte fiktive Charaktere gespielt von Barbara’s Baby – Omen III ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Omen_III:_The_Final_Conflict>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Rebecca Grant (Schauspielerin, 1982) ?", "Welche Person spielte fiktive Charaktere gespielt von Rebecca Grant (Schauspielerin, 1982) ?", "Welche Personen spielen fiktive Charaktere gespielt von Rebecca Grant (Schauspielerin, 1982) ?", "Welche Personen spielten fiktive Charaktere gespielt von Rebecca Grant (Schauspielerin, 1982) ?", "Wer spielt fiktive Charaktere gespielt von Rebecca Grant (Schauspielerin, 1982) ?", "Wer spielte fiktive Charaktere gespielt von Rebecca Grant (Schauspielerin, 1982) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Rebecca_Grant_(British_actress)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Rhys Wakefield ?", "Welche Person spielte fiktive Charaktere gespielt von Rhys Wakefield ?", "Welche Personen spielen fiktive Charaktere gespielt von Rhys Wakefield ?", "Welche Personen spielten fiktive Charaktere gespielt von Rhys Wakefield ?", "Wer spielt fiktive Charaktere gespielt von Rhys Wakefield ?", "Wer spielte fiktive Charaktere gespielt von Rhys Wakefield ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Rhys_Wakefield>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Tessa Allen ?", "Welche Person spielte fiktive Charaktere gespielt von Tessa Allen ?", "Welche Personen spielen fiktive Charaktere gespielt von Tessa Allen ?", "Welche Personen spielten fiktive Charaktere gespielt von Tessa Allen ?", "Wer spielt fiktive Charaktere gespielt von Tessa Allen ?", "Wer spielte fiktive Charaktere gespielt von Tessa Allen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Tessa_Allen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Welche Person spielte fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Welche Personen spielen fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Welche Personen spielten fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Wer spielt fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?", "Wer spielte fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/The_Carrie_Diaries_(TV_series)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Adam Busch ?", "Welche Person spielte fiktive Charaktere gespielt von Adam Busch ?", "Welche Personen spielen fiktive Charaktere gespielt von Adam Busch ?", "Welche Personen spielten fiktive Charaktere gespielt von Adam Busch ?", "Wer spielt fiktive Charaktere gespielt von Adam Busch ?", "Wer spielte fiktive Charaktere gespielt von Adam Busch ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Adam_Busch>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Adam Garcia ?", "Welche Person spielte fiktive Charaktere gespielt von Adam Garcia ?", "Welche Personen spielen fiktive Charaktere gespielt von Adam Garcia ?", "Welche Personen spielten fiktive Charaktere gespielt von Adam Garcia ?", "Wer spielt fiktive Charaktere gespielt von Adam Garcia ?", "Wer spielte fiktive Charaktere gespielt von Adam Garcia ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Adam_Garcia>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von The Little Mermaid (Musical) ?", "Welche Person spielte fiktive Charaktere gespielt von The Little Mermaid (Musical) ?", "Welche Personen spielen fiktive Charaktere gespielt von The Little Mermaid (Musical) ?", "Welche Personen spielten fiktive Charaktere gespielt von The Little Mermaid (Musical) ?", "Wer spielt fiktive Charaktere gespielt von The Little Mermaid (Musical) ?", "Wer spielte fiktive Charaktere gespielt von The Little Mermaid (Musical) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/The_Little_Mermaid_(musical)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Bruno Campos ?", "Welche Person spielte fiktive Charaktere gespielt von Bruno Campos ?", "Welche Personen spielen fiktive Charaktere gespielt von Bruno Campos ?", "Welche Personen spielten fiktive Charaktere gespielt von Bruno Campos ?", "Wer spielt fiktive Charaktere gespielt von Bruno Campos ?", "Wer spielte fiktive Charaktere gespielt von Bruno Campos ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Bruno_Campos>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Connor Trinneer ?", "Welche Person spielte fiktive Charaktere gespielt von Connor Trinneer ?", "Welche Personen spielen fiktive Charaktere gespielt von Connor Trinneer ?", "Welche Personen spielten fiktive Charaktere gespielt von Connor Trinneer ?", "Wer spielt fiktive Charaktere gespielt von Connor Trinneer ?", "Wer spielte fiktive Charaktere gespielt von Connor Trinneer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Connor_Trinneer>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Kyle MacLachlan ?", "Welche Person spielte fiktive Charaktere gespielt von Kyle MacLachlan ?", "Welche Personen spielen fiktive Charaktere gespielt von Kyle MacLachlan ?", "Welche Personen spielten fiktive Charaktere gespielt von Kyle MacLachlan ?", "Wer spielt fiktive Charaktere gespielt von Kyle MacLachlan ?", "Wer spielte fiktive Charaktere gespielt von Kyle MacLachlan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kyle_MacLachlan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Lalaine Vergara-Paras ?", "Welche Person spielte fiktive Charaktere gespielt von Lalaine Vergara-Paras ?", "Welche Personen spielen fiktive Charaktere gespielt von Lalaine Vergara-Paras ?", "Welche Personen spielten fiktive Charaktere gespielt von Lalaine Vergara-Paras ?", "Wer spielt fiktive Charaktere gespielt von Lalaine Vergara-Paras ?", "Wer spielte fiktive Charaktere gespielt von Lalaine Vergara-Paras ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lalaine>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Leah Remini ?", "Welche Person spielte fiktive Charaktere gespielt von Leah Remini ?", "Welche Personen spielen fiktive Charaktere gespielt von Leah Remini ?", "Welche Personen spielten fiktive Charaktere gespielt von Leah Remini ?", "Wer spielt fiktive Charaktere gespielt von Leah Remini ?", "Wer spielte fiktive Charaktere gespielt von Leah Remini ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Leah_Remini>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Bradley James ?", "Welche Person spielte fiktive Charaktere gespielt von Bradley James ?", "Welche Personen spielen fiktive Charaktere gespielt von Bradley James ?", "Welche Personen spielten fiktive Charaktere gespielt von Bradley James ?", "Wer spielt fiktive Charaktere gespielt von Bradley James ?", "Wer spielte fiktive Charaktere gespielt von Bradley James ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Bradley_James>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Dafne Keen ?", "Welche Person spielte fiktive Charaktere gespielt von Dafne Keen ?", "Welche Personen spielen fiktive Charaktere gespielt von Dafne Keen ?", "Welche Personen spielten fiktive Charaktere gespielt von Dafne Keen ?", "Wer spielt fiktive Charaktere gespielt von Dafne Keen ?", "Wer spielte fiktive Charaktere gespielt von Dafne Keen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Dafne_Keen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Daigo (Sänger) ?", "Welche Person spielte fiktive Charaktere gespielt von Daigo (Sänger) ?", "Welche Personen spielen fiktive Charaktere gespielt von Daigo (Sänger) ?", "Welche Personen spielten fiktive Charaktere gespielt von Daigo (Sänger) ?", "Wer spielt fiktive Charaktere gespielt von Daigo (Sänger) ?", "Wer spielte fiktive Charaktere gespielt von Daigo (Sänger) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Daigo_(musician)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Dakota Blue Richards ?", "Welche Person spielte fiktive Charaktere gespielt von Dakota Blue Richards ?", "Welche Personen spielen fiktive Charaktere gespielt von Dakota Blue Richards ?", "Welche Personen spielten fiktive Charaktere gespielt von Dakota Blue Richards ?", "Wer spielt fiktive Charaktere gespielt von Dakota Blue Richards ?", "Wer spielte fiktive Charaktere gespielt von Dakota Blue Richards ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Dakota_Blue_Richards>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "17",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt fiktive Charaktere gespielt von Damien (Fernsehserie) ?", "Welche Person spielte fiktive Charaktere gespielt von Damien (Fernsehserie) ?", "Welche Personen spielen fiktive Charaktere gespielt von Damien (Fernsehserie) ?", "Welche Personen spielten fiktive Charaktere gespielt von Damien (Fernsehserie) ?", "Wer spielt fiktive Charaktere gespielt von Damien (Fernsehserie) ?", "Wer spielte fiktive Charaktere gespielt von Damien (Fernsehserie) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Damien_(TV_series)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von Mara Jade ?", "Welche Person spielte Personen geheiratet von Mara Jade ?", "Welche Personen spielen Personen geheiratet von Mara Jade ?", "Welche Personen spielten Personen geheiratet von Mara Jade ?", "Wer spielt Personen geheiratet von Mara Jade ?", "Wer spielte Personen geheiratet von Mara Jade ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mara_Jade> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von Saul Goodman ?", "Welche Person spielte Personen geheiratet von Saul Goodman ?", "Welche Personen spielen Personen geheiratet von Saul Goodman ?", "Welche Personen spielten Personen geheiratet von Saul Goodman ?", "Wer spielt Personen geheiratet von Saul Goodman ?", "Wer spielte Personen geheiratet von Saul Goodman ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Saul_Goodman> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von Sweeney Todd ?", "Welche Person spielte Personen geheiratet von Sweeney Todd ?", "Welche Personen spielen Personen geheiratet von Sweeney Todd ?", "Welche Personen spielten Personen geheiratet von Sweeney Todd ?", "Wer spielt Personen geheiratet von Sweeney Todd ?", "Wer spielte Personen geheiratet von Sweeney Todd ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sweeney_Todd> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(2010s) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(2010s) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(2010s) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(2010s) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(2010s) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(2010s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/List_of_General_Hospital_characters_(2010s)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Peyton_Sawyer ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Peyton_Sawyer ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Peyton_Sawyer ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Peyton_Sawyer ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Peyton_Sawyer ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Peyton_Sawyer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Peyton_Sawyer> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Brian_Wheatley ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Brian_Wheatley ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Brian_Wheatley ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Brian_Wheatley ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Brian_Wheatley ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Brian_Wheatley ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Brian_Wheatley> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/James_Stenbeck ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/James_Stenbeck ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/James_Stenbeck ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/James_Stenbeck ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/James_Stenbeck ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/James_Stenbeck ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/James_Stenbeck> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Alan_Quartermaine_(General_Hospital) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Alan_Quartermaine_(General_Hospital) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Alan_Quartermaine_(General_Hospital) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Alan_Quartermaine_(General_Hospital) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Alan_Quartermaine_(General_Hospital) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Alan_Quartermaine_(General_Hospital) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alan_Quartermaine_(General_Hospital)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1990s) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1990s) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1990s) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1990s) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1990s) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1990s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/List_of_General_Hospital_characters_(1990s)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Scott_Baldwin ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Scott_Baldwin ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Scott_Baldwin ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Scott_Baldwin ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Scott_Baldwin ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Scott_Baldwin ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Scott_Baldwin> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Abby_Lockhart ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Abby_Lockhart ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Abby_Lockhart ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Abby_Lockhart ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Abby_Lockhart ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Abby_Lockhart ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Abby_Lockhart> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Tracy_Quartermaine ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Tracy_Quartermaine ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Tracy_Quartermaine ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Tracy_Quartermaine ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Tracy_Quartermaine ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Tracy_Quartermaine ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Tracy_Quartermaine> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Laura_Spencer_(General_Hospital) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Laura_Spencer_(General_Hospital) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Laura_Spencer_(General_Hospital) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Laura_Spencer_(General_Hospital) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Laura_Spencer_(General_Hospital) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Laura_Spencer_(General_Hospital) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Laura_Spencer_(General_Hospital)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1980s) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1980s) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1980s) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1980s) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1980s) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/List_of_General_Hospital_characters_(1980s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/List_of_General_Hospital_characters_(1980s)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Dante_Falconeri ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Dante_Falconeri ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Dante_Falconeri ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Dante_Falconeri ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Dante_Falconeri ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Dante_Falconeri ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Dante_Falconeri> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/J._T._Hellstrom ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/J._T._Hellstrom ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/J._T._Hellstrom ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/J._T._Hellstrom ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/J._T._Hellstrom ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/J._T._Hellstrom ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/J._T._Hellstrom> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Victor_Kiriakis ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Victor_Kiriakis ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Victor_Kiriakis ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Victor_Kiriakis ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Victor_Kiriakis ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Victor_Kiriakis ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Victor_Kiriakis> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Mr._Big_(Sex_and_the_City) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Mr._Big_(Sex_and_the_City) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Mr._Big_(Sex_and_the_City) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Mr._Big_(Sex_and_the_City) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Mr._Big_(Sex_and_the_City) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Mr._Big_(Sex_and_the_City) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mr._Big_(Sex_and_the_City)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Doug_Heffernan ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Doug_Heffernan ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Doug_Heffernan ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Doug_Heffernan ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Doug_Heffernan ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Doug_Heffernan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Doug_Heffernan> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Ned_Stark ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Ned_Stark ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Ned_Stark ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Ned_Stark ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Ned_Stark ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Ned_Stark ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ned_Stark> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Phoebe_Halliwell ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Phoebe_Halliwell ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Phoebe_Halliwell ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Phoebe_Halliwell ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Phoebe_Halliwell ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Phoebe_Halliwell ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Phoebe_Halliwell> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Charlotte_King ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Charlotte_King ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Charlotte_King ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Charlotte_King ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Charlotte_King ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Charlotte_King ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charlotte_King> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Michael_Bourne ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Michael_Bourne ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Michael_Bourne ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Michael_Bourne ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Michael_Bourne ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Michael_Bourne ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Michael_Bourne> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Khal_Drogo ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Khal_Drogo ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Khal_Drogo ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Khal_Drogo ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Khal_Drogo ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Khal_Drogo ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Khal_Drogo> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Elena_Gilbert ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Elena_Gilbert ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Elena_Gilbert ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Elena_Gilbert ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Elena_Gilbert ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Elena_Gilbert ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Elena_Gilbert> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Roseanne_Conner ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Roseanne_Conner ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Roseanne_Conner ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Roseanne_Conner ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Roseanne_Conner ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Roseanne_Conner ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Roseanne_Conner> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/James_Bellamy_(Upstairs,_Downstairs) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/James_Bellamy_(Upstairs,_Downstairs) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/James_Bellamy_(Upstairs,_Downstairs) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/James_Bellamy_(Upstairs,_Downstairs) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/James_Bellamy_(Upstairs,_Downstairs) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/James_Bellamy_(Upstairs,_Downstairs) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/James_Bellamy_(Upstairs,_Downstairs)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Steve_Austin_(character) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Steve_Austin_(character) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Steve_Austin_(character) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Steve_Austin_(character) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Steve_Austin_(character) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Steve_Austin_(character) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Steve_Austin_(character)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Katja_Brandner ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Katja_Brandner ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Katja_Brandner ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Katja_Brandner ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Katja_Brandner ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Katja_Brandner ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Katja_Brandner> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Nathalie_Brandner ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Nathalie_Brandner ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Nathalie_Brandner ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Nathalie_Brandner ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Nathalie_Brandner ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Nathalie_Brandner ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Nathalie_Brandner> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Natasha_Rostova ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Natasha_Rostova ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Natasha_Rostova ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Natasha_Rostova ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Natasha_Rostova ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Natasha_Rostova ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Natasha_Rostova> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Hélène_Kuragina ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Hélène_Kuragina ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Hélène_Kuragina ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Hélène_Kuragina ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Hélène_Kuragina ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Hélène_Kuragina ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Hélène_Kuragina> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Temperance_%22Bones%22_Brennan ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Temperance_%22Bones%22_Brennan ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Temperance_%22Bones%22_Brennan ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Temperance_%22Bones%22_Brennan ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Temperance_%22Bones%22_Brennan ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Temperance_%22Bones%22_Brennan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Temperance_%22Bones%22_Brennan> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Michael_Vaughn ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Michael_Vaughn ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Michael_Vaughn ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Michael_Vaughn ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Michael_Vaughn ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Michael_Vaughn ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Michael_Vaughn> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Seeley_Booth ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Seeley_Booth ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Seeley_Booth ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Seeley_Booth ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Seeley_Booth ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Seeley_Booth ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Seeley_Booth> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Sara_Tancredi ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Sara_Tancredi ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Sara_Tancredi ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Sara_Tancredi ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Sara_Tancredi ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Sara_Tancredi ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sara_Tancredi> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Lucas_Scott ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Lucas_Scott ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Lucas_Scott ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Lucas_Scott ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Lucas_Scott ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Lucas_Scott ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucas_Scott> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Amy_Pond ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Amy_Pond ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Amy_Pond ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Amy_Pond ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Amy_Pond ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Amy_Pond ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Amy_Pond> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Jack_McFarland ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Jack_McFarland ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Jack_McFarland ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Jack_McFarland ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Jack_McFarland ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Jack_McFarland ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jack_McFarland> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Eugene_Porter ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Eugene_Porter ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Eugene_Porter ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Eugene_Porter ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Eugene_Porter ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Eugene_Porter ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Eugene_Porter> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Naomi_Bennett ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Naomi_Bennett ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Naomi_Bennett ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Naomi_Bennett ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Naomi_Bennett ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Naomi_Bennett ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Naomi_Bennett> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Brittany_Pierce ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Brittany_Pierce ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Brittany_Pierce ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Brittany_Pierce ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Brittany_Pierce ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Brittany_Pierce ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Brittany_Pierce> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Chuck_Bartowski ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Chuck_Bartowski ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Chuck_Bartowski ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Chuck_Bartowski ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Chuck_Bartowski ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Chuck_Bartowski ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chuck_Bartowski> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Kevin_Walker_(Brothers_&_Sisters) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Kevin_Walker_(Brothers_&_Sisters) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Kevin_Walker_(Brothers_&_Sisters) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Kevin_Walker_(Brothers_&_Sisters) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Kevin_Walker_(Brothers_&_Sisters) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Kevin_Walker_(Brothers_&_Sisters) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kevin_Walker_(Brothers_&_Sisters)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Terri_Schuester ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Terri_Schuester ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Terri_Schuester ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Terri_Schuester ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Terri_Schuester ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Terri_Schuester ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Terri_Schuester> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Emma_Pillsbury ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Emma_Pillsbury ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Emma_Pillsbury ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Emma_Pillsbury ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Emma_Pillsbury ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Emma_Pillsbury ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Emma_Pillsbury> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Callie_Torres ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Callie_Torres ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Callie_Torres ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Callie_Torres ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Callie_Torres ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Callie_Torres ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Callie_Torres> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Josette_du_Pres ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Josette_du_Pres ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Josette_du_Pres ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Josette_du_Pres ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Josette_du_Pres ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Josette_du_Pres ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Josette_du_Pres> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Susan_Mayer ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Susan_Mayer ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Susan_Mayer ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Susan_Mayer ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Susan_Mayer ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Susan_Mayer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Susan_Mayer> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Michael_Britten ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Michael_Britten ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Michael_Britten ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Michael_Britten ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Michael_Britten ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Michael_Britten ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Michael_Britten> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Pete_Wilder ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Pete_Wilder ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Pete_Wilder ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Pete_Wilder ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Pete_Wilder ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Pete_Wilder ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Pete_Wilder> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Max_Evans_(Roswell) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Max_Evans_(Roswell) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Max_Evans_(Roswell) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Max_Evans_(Roswell) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Max_Evans_(Roswell) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Max_Evans_(Roswell) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Max_Evans_(Roswell)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Harriet_Vane ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Harriet_Vane ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Harriet_Vane ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Harriet_Vane ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Harriet_Vane ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Harriet_Vane ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Harriet_Vane> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Gomez_Addams ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Gomez_Addams ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Gomez_Addams ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Gomez_Addams ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Gomez_Addams ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Gomez_Addams ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gomez_Addams> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Paul_Atreides ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Paul_Atreides ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Paul_Atreides ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Paul_Atreides ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Paul_Atreides ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Paul_Atreides ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Paul_Atreides> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Basil_Fawlty ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Basil_Fawlty ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Basil_Fawlty ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Basil_Fawlty ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Basil_Fawlty ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Basil_Fawlty ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Basil_Fawlty> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Bill_Buchanan ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Bill_Buchanan ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Bill_Buchanan ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Bill_Buchanan ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Bill_Buchanan ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Bill_Buchanan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bill_Buchanan> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Liz_Parker ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Liz_Parker ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Liz_Parker ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Liz_Parker ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Liz_Parker ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Liz_Parker ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Liz_Parker> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Karl_Mayer ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Karl_Mayer ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Karl_Mayer ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Karl_Mayer ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Karl_Mayer ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Karl_Mayer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Karl_Mayer> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Mike_Delfino ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Mike_Delfino ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Mike_Delfino ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Mike_Delfino ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Mike_Delfino ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Mike_Delfino ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mike_Delfino> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Phillip_Spaulding ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Phillip_Spaulding ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Phillip_Spaulding ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Phillip_Spaulding ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Phillip_Spaulding ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Phillip_Spaulding ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Phillip_Spaulding> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Dexter_Morgan ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Dexter_Morgan ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Dexter_Morgan ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Dexter_Morgan ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Dexter_Morgan ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Dexter_Morgan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Dexter_Morgan> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Johnny_Rose ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Johnny_Rose ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Johnny_Rose ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Johnny_Rose ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Johnny_Rose ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Johnny_Rose ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Johnny_Rose> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Bo_Brady ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Bo_Brady ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Bo_Brady ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Bo_Brady ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Bo_Brady ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Bo_Brady ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bo_Brady> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2000s) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2000s) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2000s) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2000s) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2000s) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2000s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2000s)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2010s) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2010s) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2010s) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2010s) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2010s) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2010s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(2010s)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/John_McBain_(character) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/John_McBain_(character) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/John_McBain_(character) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/John_McBain_(character) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/John_McBain_(character) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/John_McBain_(character) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_McBain_(character)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Asa_Buchanan ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Asa_Buchanan ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Asa_Buchanan ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Asa_Buchanan ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Asa_Buchanan ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Asa_Buchanan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Asa_Buchanan> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Todd_Manning ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Todd_Manning ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Todd_Manning ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Todd_Manning ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Todd_Manning ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Todd_Manning ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Todd_Manning> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Nora_Hanen ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Nora_Hanen ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Nora_Hanen ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Nora_Hanen ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Nora_Hanen ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Nora_Hanen ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Nora_Hanen> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1980s) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1980s) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1980s) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1980s) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1980s) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1980s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1980s)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Kim_Sullivan_Hughes ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Kim_Sullivan_Hughes ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Kim_Sullivan_Hughes ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Kim_Sullivan_Hughes ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Kim_Sullivan_Hughes ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Kim_Sullivan_Hughes ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kim_Sullivan_Hughes> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Lisa_Grimaldi ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Lisa_Grimaldi ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Lisa_Grimaldi ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Lisa_Grimaldi ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Lisa_Grimaldi ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Lisa_Grimaldi ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lisa_Grimaldi> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/April_Stevens_Ewing ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/April_Stevens_Ewing ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/April_Stevens_Ewing ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/April_Stevens_Ewing ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/April_Stevens_Ewing ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/April_Stevens_Ewing ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/April_Stevens_Ewing> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Cassandra_Rawlins ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Cassandra_Rawlins ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Cassandra_Rawlins ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Cassandra_Rawlins ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Cassandra_Rawlins ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Cassandra_Rawlins ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Cassandra_Rawlins> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Ashley_Abbott ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Ashley_Abbott ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Ashley_Abbott ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Ashley_Abbott ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Ashley_Abbott ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Ashley_Abbott ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ashley_Abbott> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Traci_Abbott ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Traci_Abbott ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Traci_Abbott ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Traci_Abbott ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Traci_Abbott ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Traci_Abbott ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Traci_Abbott> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Chloe_Lane ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Chloe_Lane ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Chloe_Lane ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Chloe_Lane ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Chloe_Lane ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Chloe_Lane ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chloe_Lane> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Theresa_Donovan ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Theresa_Donovan ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Theresa_Donovan ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Theresa_Donovan ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Theresa_Donovan ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Theresa_Donovan ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Theresa_Donovan> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Sami_Brady ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Sami_Brady ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Sami_Brady ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Sami_Brady ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Sami_Brady ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Sami_Brady ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sami_Brady> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Rex_Van_de_Kamp ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Rex_Van_de_Kamp ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Rex_Van_de_Kamp ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Rex_Van_de_Kamp ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Rex_Van_de_Kamp ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Rex_Van_de_Kamp ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rex_Van_de_Kamp> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Orson_Hodge ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Orson_Hodge ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Orson_Hodge ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Orson_Hodge ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Orson_Hodge ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Orson_Hodge ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Orson_Hodge> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Katara_(Avatar:_The_Last_Airbender) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Katara_(Avatar:_The_Last_Airbender) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Katara_(Avatar:_The_Last_Airbender) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Katara_(Avatar:_The_Last_Airbender) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Katara_(Avatar:_The_Last_Airbender) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Katara_(Avatar:_The_Last_Airbender) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Katara_(Avatar:_The_Last_Airbender)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Beth_Clemmons ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Beth_Clemmons ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Beth_Clemmons ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Beth_Clemmons ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Beth_Clemmons ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Beth_Clemmons ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Beth_Clemmons> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Othello_(character) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Othello_(character) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Othello_(character) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Othello_(character) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Othello_(character) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Othello_(character) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Othello_(character)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Hilary_Curtis ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Hilary_Curtis ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Hilary_Curtis ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Hilary_Curtis ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Hilary_Curtis ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Hilary_Curtis ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Hilary_Curtis> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Alexis_Colby ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Alexis_Colby ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Alexis_Colby ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Alexis_Colby ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Alexis_Colby ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Alexis_Colby ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alexis_Colby> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Alex_Marick ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Alex_Marick ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Alex_Marick ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Alex_Marick ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Alex_Marick ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Alex_Marick ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alex_Marick> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Erica_Kane ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Erica_Kane ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Erica_Kane ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Erica_Kane ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Erica_Kane ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Erica_Kane ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Erica_Kane> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Marlena_Evans ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Marlena_Evans ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Marlena_Evans ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Marlena_Evans ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Marlena_Evans ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Marlena_Evans ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Marlena_Evans> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Aleksandra_Billewiczówna ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Aleksandra_Billewiczówna ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Aleksandra_Billewiczówna ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Aleksandra_Billewiczówna ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Aleksandra_Billewiczówna ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Aleksandra_Billewiczówna ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Aleksandra_Billewiczówna> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/April_Ludgate ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/April_Ludgate ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/April_Ludgate ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/April_Ludgate ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/April_Ludgate ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/April_Ludgate ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/April_Ludgate> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Helen_Crump ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Helen_Crump ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Helen_Crump ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Helen_Crump ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Helen_Crump ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Helen_Crump ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Helen_Crump> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Dwight_Schrute ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Dwight_Schrute ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Dwight_Schrute ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Dwight_Schrute ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Dwight_Schrute ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Dwight_Schrute ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Dwight_Schrute> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Jack_Hodgins_(Bones) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Jack_Hodgins_(Bones) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Jack_Hodgins_(Bones) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Jack_Hodgins_(Bones) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Jack_Hodgins_(Bones) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Jack_Hodgins_(Bones) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jack_Hodgins_(Bones)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Barnabas_Collins ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Barnabas_Collins ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Barnabas_Collins ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Barnabas_Collins ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Barnabas_Collins ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Barnabas_Collins ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Barnabas_Collins> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/List_of_The_Young_and_the_Restless_characters_(2000s) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/List_of_The_Young_and_the_Restless_characters_(2000s) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/List_of_The_Young_and_the_Restless_characters_(2000s) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/List_of_The_Young_and_the_Restless_characters_(2000s) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/List_of_The_Young_and_the_Restless_characters_(2000s) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/List_of_The_Young_and_the_Restless_characters_(2000s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/List_of_The_Young_and_the_Restless_characters_(2000s)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Chi-Chi_(Dragon_Ball) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Chi-Chi_(Dragon_Ball) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Chi-Chi_(Dragon_Ball) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Chi-Chi_(Dragon_Ball) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Chi-Chi_(Dragon_Ball) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Chi-Chi_(Dragon_Ball) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chi-Chi_(Dragon_Ball)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/Kelly_Cramer ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/Kelly_Cramer ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/Kelly_Cramer ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/Kelly_Cramer ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/Kelly_Cramer ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/Kelly_Cramer ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kelly_Cramer> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "18",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "Welche Person spielt Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1990s) ?", "Welche Person spielte Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1990s) ?", "Welche Personen spielen Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1990s) ?", "Welche Personen spielten Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1990s) ?", "Wer spielt Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1990s) ?", "Wer spielte Personen geheiratet von http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1990s) ?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/List_of_One_Life_to_Live_characters_(1990s)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Madrid aus?", "Was stellte Kunstwerke ausgestellt von Madrid aus?", "Welche Museen stellen Kunstwerke ausgestellt von Madrid aus?", "Welche Museen stellten Kunstwerke ausgestellt von Madrid aus?", "Welches Museum stellt Kunstwerke ausgestellt von Madrid aus?", "Welches Museum stellte Kunstwerke ausgestellt von Madrid aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Madrid>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von San Domenico (Fiesole) aus?", "Was stellte Kunstwerke ausgestellt von San Domenico (Fiesole) aus?", "Welche Museen stellen Kunstwerke ausgestellt von San Domenico (Fiesole) aus?", "Welche Museen stellten Kunstwerke ausgestellt von San Domenico (Fiesole) aus?", "Welches Museum stellt Kunstwerke ausgestellt von San Domenico (Fiesole) aus?", "Welches Museum stellte Kunstwerke ausgestellt von San Domenico (Fiesole) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Convent_of_San_Domenico,_Fiesole>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Uffizien aus?", "Was stellte Kunstwerke ausgestellt von Uffizien aus?", "Welche Museen stellen Kunstwerke ausgestellt von Uffizien aus?", "Welche Museen stellten Kunstwerke ausgestellt von Uffizien aus?", "Welches Museum stellt Kunstwerke ausgestellt von Uffizien aus?", "Welches Museum stellte Kunstwerke ausgestellt von Uffizien aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Uffizi>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Generalversammlung der Vereinten Nationen aus?", "Was stellte Kunstwerke ausgestellt von Generalversammlung der Vereinten Nationen aus?", "Welche Museen stellen Kunstwerke ausgestellt von Generalversammlung der Vereinten Nationen aus?", "Welche Museen stellten Kunstwerke ausgestellt von Generalversammlung der Vereinten Nationen aus?", "Welches Museum stellt Kunstwerke ausgestellt von Generalversammlung der Vereinten Nationen aus?", "Welches Museum stellte Kunstwerke ausgestellt von Generalversammlung der Vereinten Nationen aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/United_Nations_General_Assembly>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Kapitol (Washington) aus?", "Was stellte Kunstwerke ausgestellt von Kapitol (Washington) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Kapitol (Washington) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Kapitol (Washington) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Kapitol (Washington) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Kapitol (Washington) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/United_States_Capitol>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Valletta aus?", "Was stellte Kunstwerke ausgestellt von Valletta aus?", "Welche Museen stellen Kunstwerke ausgestellt von Valletta aus?", "Welche Museen stellten Kunstwerke ausgestellt von Valletta aus?", "Welches Museum stellt Kunstwerke ausgestellt von Valletta aus?", "Welches Museum stellte Kunstwerke ausgestellt von Valletta aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Valletta>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Van Gogh Museum aus?", "Was stellte Kunstwerke ausgestellt von Van Gogh Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Van Gogh Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Van Gogh Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Van Gogh Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Van Gogh Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Van_Gogh_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Vatikanische Museen aus?", "Was stellte Kunstwerke ausgestellt von Vatikanische Museen aus?", "Welche Museen stellen Kunstwerke ausgestellt von Vatikanische Museen aus?", "Welche Museen stellten Kunstwerke ausgestellt von Vatikanische Museen aus?", "Welches Museum stellt Kunstwerke ausgestellt von Vatikanische Museen aus?", "Welches Museum stellte Kunstwerke ausgestellt von Vatikanische Museen aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Vatican_Museums>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Dallas Museum of Art aus?", "Was stellte Kunstwerke ausgestellt von Dallas Museum of Art aus?", "Welche Museen stellen Kunstwerke ausgestellt von Dallas Museum of Art aus?", "Welche Museen stellten Kunstwerke ausgestellt von Dallas Museum of Art aus?", "Welches Museum stellt Kunstwerke ausgestellt von Dallas Museum of Art aus?", "Welches Museum stellte Kunstwerke ausgestellt von Dallas Museum of Art aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Dallas_Museum_of_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Statens Museum for Kunst aus?", "Was stellte Kunstwerke ausgestellt von Statens Museum for Kunst aus?", "Welche Museen stellen Kunstwerke ausgestellt von Statens Museum for Kunst aus?", "Welche Museen stellten Kunstwerke ausgestellt von Statens Museum for Kunst aus?", "Welches Museum stellt Kunstwerke ausgestellt von Statens Museum for Kunst aus?", "Welches Museum stellte Kunstwerke ausgestellt von Statens Museum for Kunst aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/National_Gallery_of_Denmark>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Biblioteca Reale aus?", "Was stellte Kunstwerke ausgestellt von Biblioteca Reale aus?", "Welche Museen stellen Kunstwerke ausgestellt von Biblioteca Reale aus?", "Welche Museen stellten Kunstwerke ausgestellt von Biblioteca Reale aus?", "Welches Museum stellt Kunstwerke ausgestellt von Biblioteca Reale aus?", "Welches Museum stellte Kunstwerke ausgestellt von Biblioteca Reale aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Royal_Library_of_Turin>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Scuola di San Giorgio degli Schiavoni aus?", "Was stellte Kunstwerke ausgestellt von Scuola di San Giorgio degli Schiavoni aus?", "Welche Museen stellen Kunstwerke ausgestellt von Scuola di San Giorgio degli Schiavoni aus?", "Welche Museen stellten Kunstwerke ausgestellt von Scuola di San Giorgio degli Schiavoni aus?", "Welches Museum stellt Kunstwerke ausgestellt von Scuola di San Giorgio degli Schiavoni aus?", "Welches Museum stellte Kunstwerke ausgestellt von Scuola di San Giorgio degli Schiavoni aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Scuola_di_San_Giorgio_degli_Schiavoni>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Slowakische Nationalgalerie aus?", "Was stellte Kunstwerke ausgestellt von Slowakische Nationalgalerie aus?", "Welche Museen stellen Kunstwerke ausgestellt von Slowakische Nationalgalerie aus?", "Welche Museen stellten Kunstwerke ausgestellt von Slowakische Nationalgalerie aus?", "Welches Museum stellt Kunstwerke ausgestellt von Slowakische Nationalgalerie aus?", "Welches Museum stellte Kunstwerke ausgestellt von Slowakische Nationalgalerie aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Slovak_National_Gallery>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Menil Collection aus?", "Was stellte Kunstwerke ausgestellt von Menil Collection aus?", "Welche Museen stellen Kunstwerke ausgestellt von Menil Collection aus?", "Welche Museen stellten Kunstwerke ausgestellt von Menil Collection aus?", "Welches Museum stellt Kunstwerke ausgestellt von Menil Collection aus?", "Welches Museum stellte Kunstwerke ausgestellt von Menil Collection aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Menil_Collection>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Bletchley Park aus?", "Was stellte Kunstwerke ausgestellt von Bletchley Park aus?", "Welche Museen stellen Kunstwerke ausgestellt von Bletchley Park aus?", "Welche Museen stellten Kunstwerke ausgestellt von Bletchley Park aus?", "Welches Museum stellt Kunstwerke ausgestellt von Bletchley Park aus?", "Welches Museum stellte Kunstwerke ausgestellt von Bletchley Park aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Bletchley_Park>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Delaware Art Museum aus?", "Was stellte Kunstwerke ausgestellt von Delaware Art Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Delaware Art Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Delaware Art Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Delaware Art Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Delaware Art Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Delaware_Art_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Derby Museum and Art Gallery aus?", "Was stellte Kunstwerke ausgestellt von Derby Museum and Art Gallery aus?", "Welche Museen stellen Kunstwerke ausgestellt von Derby Museum and Art Gallery aus?", "Welche Museen stellten Kunstwerke ausgestellt von Derby Museum and Art Gallery aus?", "Welches Museum stellt Kunstwerke ausgestellt von Derby Museum and Art Gallery aus?", "Welches Museum stellte Kunstwerke ausgestellt von Derby Museum and Art Gallery aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Derby_Museum_and_Art_Gallery>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Detroit Institute of Arts aus?", "Was stellte Kunstwerke ausgestellt von Detroit Institute of Arts aus?", "Welche Museen stellen Kunstwerke ausgestellt von Detroit Institute of Arts aus?", "Welche Museen stellten Kunstwerke ausgestellt von Detroit Institute of Arts aus?", "Welches Museum stellt Kunstwerke ausgestellt von Detroit Institute of Arts aus?", "Welches Museum stellte Kunstwerke ausgestellt von Detroit Institute of Arts aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Detroit_Institute_of_Arts>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Golden Gate Park aus?", "Was stellte Kunstwerke ausgestellt von Golden Gate Park aus?", "Welche Museen stellen Kunstwerke ausgestellt von Golden Gate Park aus?", "Welche Museen stellten Kunstwerke ausgestellt von Golden Gate Park aus?", "Welches Museum stellt Kunstwerke ausgestellt von Golden Gate Park aus?", "Welches Museum stellte Kunstwerke ausgestellt von Golden Gate Park aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Golden_Gate_Park>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Kröller-Müller Museum aus?", "Was stellte Kunstwerke ausgestellt von Kröller-Müller Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Kröller-Müller Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Kröller-Müller Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Kröller-Müller Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Kröller-Müller Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kröller-Müller_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Kunstmuseum Basel aus?", "Was stellte Kunstwerke ausgestellt von Kunstmuseum Basel aus?", "Welche Museen stellen Kunstwerke ausgestellt von Kunstmuseum Basel aus?", "Welche Museen stellten Kunstwerke ausgestellt von Kunstmuseum Basel aus?", "Welches Museum stellt Kunstwerke ausgestellt von Kunstmuseum Basel aus?", "Welches Museum stellte Kunstwerke ausgestellt von Kunstmuseum Basel aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kunstmuseum_Basel>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Kunsthaus Zürich aus?", "Was stellte Kunstwerke ausgestellt von Kunsthaus Zürich aus?", "Welche Museen stellen Kunstwerke ausgestellt von Kunsthaus Zürich aus?", "Welche Museen stellten Kunstwerke ausgestellt von Kunsthaus Zürich aus?", "Welches Museum stellt Kunstwerke ausgestellt von Kunsthaus Zürich aus?", "Welches Museum stellte Kunstwerke ausgestellt von Kunsthaus Zürich aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kunstmuseum_Basel>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Palazzo Pitti aus?", "Was stellte Kunstwerke ausgestellt von Palazzo Pitti aus?", "Welche Museen stellen Kunstwerke ausgestellt von Palazzo Pitti aus?", "Welche Museen stellten Kunstwerke ausgestellt von Palazzo Pitti aus?", "Welches Museum stellt Kunstwerke ausgestellt von Palazzo Pitti aus?", "Welches Museum stellte Kunstwerke ausgestellt von Palazzo Pitti aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Palazzo_Pitti>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Albertina (Wien) aus?", "Was stellte Kunstwerke ausgestellt von Albertina (Wien) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Albertina (Wien) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Albertina (Wien) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Albertina (Wien) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Albertina (Wien) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Albertina>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Albright-Knox Art Gallery aus?", "Was stellte Kunstwerke ausgestellt von Albright-Knox Art Gallery aus?", "Welche Museen stellen Kunstwerke ausgestellt von Albright-Knox Art Gallery aus?", "Welche Museen stellten Kunstwerke ausgestellt von Albright-Knox Art Gallery aus?", "Welches Museum stellt Kunstwerke ausgestellt von Albright-Knox Art Gallery aus?", "Welches Museum stellte Kunstwerke ausgestellt von Albright-Knox Art Gallery aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Albright–Knox_Art_Gallery>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Alnwick Castle aus?", "Was stellte Kunstwerke ausgestellt von Alnwick Castle aus?", "Welche Museen stellen Kunstwerke ausgestellt von Alnwick Castle aus?", "Welche Museen stellten Kunstwerke ausgestellt von Alnwick Castle aus?", "Welches Museum stellt Kunstwerke ausgestellt von Alnwick Castle aus?", "Welches Museum stellte Kunstwerke ausgestellt von Alnwick Castle aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Alnwick_Castle>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Alte Nationalgalerie aus?", "Was stellte Kunstwerke ausgestellt von Alte Nationalgalerie aus?", "Welche Museen stellen Kunstwerke ausgestellt von Alte Nationalgalerie aus?", "Welche Museen stellten Kunstwerke ausgestellt von Alte Nationalgalerie aus?", "Welches Museum stellt Kunstwerke ausgestellt von Alte Nationalgalerie aus?", "Welches Museum stellte Kunstwerke ausgestellt von Alte Nationalgalerie aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Alte_Nationalgalerie>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Alte Pinakothek aus?", "Was stellte Kunstwerke ausgestellt von Alte Pinakothek aus?", "Welche Museen stellen Kunstwerke ausgestellt von Alte Pinakothek aus?", "Welche Museen stellten Kunstwerke ausgestellt von Alte Pinakothek aus?", "Welches Museum stellt Kunstwerke ausgestellt von Alte Pinakothek aus?", "Welches Museum stellte Kunstwerke ausgestellt von Alte Pinakothek aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Alte_Pinakothek>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Chatsworth House aus?", "Was stellte Kunstwerke ausgestellt von Chatsworth House aus?", "Welche Museen stellen Kunstwerke ausgestellt von Chatsworth House aus?", "Welche Museen stellten Kunstwerke ausgestellt von Chatsworth House aus?", "Welches Museum stellt Kunstwerke ausgestellt von Chatsworth House aus?", "Welches Museum stellte Kunstwerke ausgestellt von Chatsworth House aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Chatsworth_House>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Fitzwilliam-Museum aus?", "Was stellte Kunstwerke ausgestellt von Fitzwilliam-Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Fitzwilliam-Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Fitzwilliam-Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Fitzwilliam-Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Fitzwilliam-Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Fitzwilliam_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Florenz aus?", "Was stellte Kunstwerke ausgestellt von Florenz aus?", "Welche Museen stellen Kunstwerke ausgestellt von Florenz aus?", "Welche Museen stellten Kunstwerke ausgestellt von Florenz aus?", "Welches Museum stellt Kunstwerke ausgestellt von Florenz aus?", "Welches Museum stellte Kunstwerke ausgestellt von Florenz aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Florence>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Folger Shakespeare Library aus?", "Was stellte Kunstwerke ausgestellt von Folger Shakespeare Library aus?", "Welche Museen stellen Kunstwerke ausgestellt von Folger Shakespeare Library aus?", "Welche Museen stellten Kunstwerke ausgestellt von Folger Shakespeare Library aus?", "Welches Museum stellt Kunstwerke ausgestellt von Folger Shakespeare Library aus?", "Welches Museum stellte Kunstwerke ausgestellt von Folger Shakespeare Library aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Folger_Shakespeare_Library>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Amon Carter Museum aus?", "Was stellte Kunstwerke ausgestellt von Amon Carter Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Amon Carter Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Amon Carter Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Amon Carter Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Amon Carter Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Amon_Carter_Museum_of_American_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Norton Simon Museum aus?", "Was stellte Kunstwerke ausgestellt von Norton Simon Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Norton Simon Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Norton Simon Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Norton Simon Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Norton Simon Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Norton_Simon_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Norwich Castle aus?", "Was stellte Kunstwerke ausgestellt von Norwich Castle aus?", "Welche Museen stellen Kunstwerke ausgestellt von Norwich Castle aus?", "Welche Museen stellten Kunstwerke ausgestellt von Norwich Castle aus?", "Welches Museum stellt Kunstwerke ausgestellt von Norwich Castle aus?", "Welches Museum stellte Kunstwerke ausgestellt von Norwich Castle aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Norwich_Castle>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Olana aus?", "Was stellte Kunstwerke ausgestellt von Olana aus?", "Welche Museen stellen Kunstwerke ausgestellt von Olana aus?", "Welche Museen stellten Kunstwerke ausgestellt von Olana aus?", "Welches Museum stellt Kunstwerke ausgestellt von Olana aus?", "Welches Museum stellte Kunstwerke ausgestellt von Olana aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Olana_State_Historic_Site>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Gemäldegalerie (Berlin) aus?", "Was stellte Kunstwerke ausgestellt von Gemäldegalerie (Berlin) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Gemäldegalerie (Berlin) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Gemäldegalerie (Berlin) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Gemäldegalerie (Berlin) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Gemäldegalerie (Berlin) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Gemäldegalerie,_Berlin>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Gemäldegalerie Alte Meister aus?", "Was stellte Kunstwerke ausgestellt von Gemäldegalerie Alte Meister aus?", "Welche Museen stellen Kunstwerke ausgestellt von Gemäldegalerie Alte Meister aus?", "Welche Museen stellten Kunstwerke ausgestellt von Gemäldegalerie Alte Meister aus?", "Welches Museum stellt Kunstwerke ausgestellt von Gemäldegalerie Alte Meister aus?", "Welches Museum stellte Kunstwerke ausgestellt von Gemäldegalerie Alte Meister aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Gemäldegalerie_Alte_Meister>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Museo dell’Opera del Duomo (Florenz) aus?", "Was stellte Kunstwerke ausgestellt von Museo dell’Opera del Duomo (Florenz) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Museo dell’Opera del Duomo (Florenz) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Museo dell’Opera del Duomo (Florenz) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Museo dell’Opera del Duomo (Florenz) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Museo dell’Opera del Duomo (Florenz) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Museo_dell'Opera_del_Duomo_(Florence)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von National Museums Liverpool aus?", "Was stellte Kunstwerke ausgestellt von National Museums Liverpool aus?", "Welche Museen stellen Kunstwerke ausgestellt von National Museums Liverpool aus?", "Welche Museen stellten Kunstwerke ausgestellt von National Museums Liverpool aus?", "Welches Museum stellt Kunstwerke ausgestellt von National Museums Liverpool aus?", "Welches Museum stellte Kunstwerke ausgestellt von National Museums Liverpool aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/National_Museums_Liverpool>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Königliches Museum der Schönen Künste (Antwerpen) aus?", "Was stellte Kunstwerke ausgestellt von Königliches Museum der Schönen Künste (Antwerpen) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Königliches Museum der Schönen Künste (Antwerpen) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Königliches Museum der Schönen Künste (Antwerpen) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Königliches Museum der Schönen Künste (Antwerpen) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Königliches Museum der Schönen Künste (Antwerpen) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Royal_Museum_of_Fine_Arts_Antwerp>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Fundació Joan Miró aus?", "Was stellte Kunstwerke ausgestellt von Fundació Joan Miró aus?", "Welche Museen stellen Kunstwerke ausgestellt von Fundació Joan Miró aus?", "Welche Museen stellten Kunstwerke ausgestellt von Fundació Joan Miró aus?", "Welches Museum stellt Kunstwerke ausgestellt von Fundació Joan Miró aus?", "Welches Museum stellte Kunstwerke ausgestellt von Fundació Joan Miró aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Fundació_Joan_Miró>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Russisches Museum aus?", "Was stellte Kunstwerke ausgestellt von Russisches Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Russisches Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Russisches Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Russisches Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Russisches Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Russian_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Scuola Grande di San Rocco aus?", "Was stellte Kunstwerke ausgestellt von Scuola Grande di San Rocco aus?", "Welche Museen stellen Kunstwerke ausgestellt von Scuola Grande di San Rocco aus?", "Welche Museen stellten Kunstwerke ausgestellt von Scuola Grande di San Rocco aus?", "Welches Museum stellt Kunstwerke ausgestellt von Scuola Grande di San Rocco aus?", "Welches Museum stellte Kunstwerke ausgestellt von Scuola Grande di San Rocco aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Scuola_Grande_di_San_Rocco>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Australian Centre for Contemporary Art aus?", "Was stellte Kunstwerke ausgestellt von Australian Centre for Contemporary Art aus?", "Welche Museen stellen Kunstwerke ausgestellt von Australian Centre for Contemporary Art aus?", "Welche Museen stellten Kunstwerke ausgestellt von Australian Centre for Contemporary Art aus?", "Welches Museum stellt Kunstwerke ausgestellt von Australian Centre for Contemporary Art aus?", "Welches Museum stellte Kunstwerke ausgestellt von Australian Centre for Contemporary Art aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Australian_Centre_for_Contemporary_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Baltimore Museum of Art aus?", "Was stellte Kunstwerke ausgestellt von Baltimore Museum of Art aus?", "Welche Museen stellen Kunstwerke ausgestellt von Baltimore Museum of Art aus?", "Welche Museen stellten Kunstwerke ausgestellt von Baltimore Museum of Art aus?", "Welches Museum stellt Kunstwerke ausgestellt von Baltimore Museum of Art aus?", "Welches Museum stellte Kunstwerke ausgestellt von Baltimore Museum of Art aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Baltimore_Museum_of_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Barnes Foundation aus?", "Was stellte Kunstwerke ausgestellt von Barnes Foundation aus?", "Welche Museen stellen Kunstwerke ausgestellt von Barnes Foundation aus?", "Welche Museen stellten Kunstwerke ausgestellt von Barnes Foundation aus?", "Welches Museum stellt Kunstwerke ausgestellt von Barnes Foundation aus?", "Welches Museum stellte Kunstwerke ausgestellt von Barnes Foundation aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Barnes_Foundation>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Kanton Basel-Stadt aus?", "Was stellte Kunstwerke ausgestellt von Kanton Basel-Stadt aus?", "Welche Museen stellen Kunstwerke ausgestellt von Kanton Basel-Stadt aus?", "Welche Museen stellten Kunstwerke ausgestellt von Kanton Basel-Stadt aus?", "Welches Museum stellt Kunstwerke ausgestellt von Kanton Basel-Stadt aus?", "Welches Museum stellte Kunstwerke ausgestellt von Kanton Basel-Stadt aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Basel>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Basel aus?", "Was stellte Kunstwerke ausgestellt von Basel aus?", "Welche Museen stellen Kunstwerke ausgestellt von Basel aus?", "Welche Museen stellten Kunstwerke ausgestellt von Basel aus?", "Welches Museum stellt Kunstwerke ausgestellt von Basel aus?", "Welches Museum stellte Kunstwerke ausgestellt von Basel aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Basel>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Art Gallery of South Australia aus?", "Was stellte Kunstwerke ausgestellt von Art Gallery of South Australia aus?", "Welche Museen stellen Kunstwerke ausgestellt von Art Gallery of South Australia aus?", "Welche Museen stellten Kunstwerke ausgestellt von Art Gallery of South Australia aus?", "Welches Museum stellt Kunstwerke ausgestellt von Art Gallery of South Australia aus?", "Welches Museum stellte Kunstwerke ausgestellt von Art Gallery of South Australia aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Art_Gallery_of_South_Australia>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Litauisches Kunstmuseum aus?", "Was stellte Kunstwerke ausgestellt von Litauisches Kunstmuseum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Litauisches Kunstmuseum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Litauisches Kunstmuseum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Litauisches Kunstmuseum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Litauisches Kunstmuseum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Lithuanian_Art_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Greater London aus?", "Was stellte Kunstwerke ausgestellt von Greater London aus?", "Welche Museen stellen Kunstwerke ausgestellt von Greater London aus?", "Welche Museen stellten Kunstwerke ausgestellt von Greater London aus?", "Welches Museum stellt Kunstwerke ausgestellt von Greater London aus?", "Welches Museum stellte Kunstwerke ausgestellt von Greater London aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/London>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von London aus?", "Was stellte Kunstwerke ausgestellt von London aus?", "Welche Museen stellen Kunstwerke ausgestellt von London aus?", "Welche Museen stellten Kunstwerke ausgestellt von London aus?", "Welches Museum stellt Kunstwerke ausgestellt von London aus?", "Welches Museum stellte Kunstwerke ausgestellt von London aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/London>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Los Angeles County Museum of Art aus?", "Was stellte Kunstwerke ausgestellt von Los Angeles County Museum of Art aus?", "Welche Museen stellen Kunstwerke ausgestellt von Los Angeles County Museum of Art aus?", "Welche Museen stellten Kunstwerke ausgestellt von Los Angeles County Museum of Art aus?", "Welches Museum stellt Kunstwerke ausgestellt von Los Angeles County Museum of Art aus?", "Welches Museum stellte Kunstwerke ausgestellt von Los Angeles County Museum of Art aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Los_Angeles_County_Museum_of_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Louvre aus?", "Was stellte Kunstwerke ausgestellt von Louvre aus?", "Welche Museen stellen Kunstwerke ausgestellt von Louvre aus?", "Welche Museen stellten Kunstwerke ausgestellt von Louvre aus?", "Welches Museum stellt Kunstwerke ausgestellt von Louvre aus?", "Welches Museum stellte Kunstwerke ausgestellt von Louvre aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Louvre>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Louvre-Lens aus?", "Was stellte Kunstwerke ausgestellt von Louvre-Lens aus?", "Welche Museen stellen Kunstwerke ausgestellt von Louvre-Lens aus?", "Welche Museen stellten Kunstwerke ausgestellt von Louvre-Lens aus?", "Welches Museum stellt Kunstwerke ausgestellt von Louvre-Lens aus?", "Welches Museum stellte Kunstwerke ausgestellt von Louvre-Lens aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Louvre>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Munch-Museum Oslo aus?", "Was stellte Kunstwerke ausgestellt von Munch-Museum Oslo aus?", "Welche Museen stellen Kunstwerke ausgestellt von Munch-Museum Oslo aus?", "Welche Museen stellten Kunstwerke ausgestellt von Munch-Museum Oslo aus?", "Welches Museum stellt Kunstwerke ausgestellt von Munch-Museum Oslo aus?", "Welches Museum stellte Kunstwerke ausgestellt von Munch-Museum Oslo aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Munch_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von North Carolina Museum of Art aus?", "Was stellte Kunstwerke ausgestellt von North Carolina Museum of Art aus?", "Welche Museen stellen Kunstwerke ausgestellt von North Carolina Museum of Art aus?", "Welche Museen stellten Kunstwerke ausgestellt von North Carolina Museum of Art aus?", "Welches Museum stellt Kunstwerke ausgestellt von North Carolina Museum of Art aus?", "Welches Museum stellte Kunstwerke ausgestellt von North Carolina Museum of Art aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/North_Carolina_Museum_of_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Carcassonne aus?", "Was stellte Kunstwerke ausgestellt von Carcassonne aus?", "Welche Museen stellen Kunstwerke ausgestellt von Carcassonne aus?", "Welche Museen stellten Kunstwerke ausgestellt von Carcassonne aus?", "Welches Museum stellt Kunstwerke ausgestellt von Carcassonne aus?", "Welches Museum stellte Kunstwerke ausgestellt von Carcassonne aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Carcassonne>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Carnegie Museum of Natural History aus?", "Was stellte Kunstwerke ausgestellt von Carnegie Museum of Natural History aus?", "Welche Museen stellen Kunstwerke ausgestellt von Carnegie Museum of Natural History aus?", "Welche Museen stellten Kunstwerke ausgestellt von Carnegie Museum of Natural History aus?", "Welches Museum stellt Kunstwerke ausgestellt von Carnegie Museum of Natural History aus?", "Welches Museum stellte Kunstwerke ausgestellt von Carnegie Museum of Natural History aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Carnegie_Museum_of_Natural_History>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Liebfrauenkirche (Brügge) aus?", "Was stellte Kunstwerke ausgestellt von Liebfrauenkirche (Brügge) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Liebfrauenkirche (Brügge) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Liebfrauenkirche (Brügge) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Liebfrauenkirche (Brügge) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Liebfrauenkirche (Brügge) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Church_of_Our_Lady,_Bruges>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Schloss Montsoreau – Museum für zeitgenössische Kunst aus?", "Was stellte Kunstwerke ausgestellt von Schloss Montsoreau – Museum für zeitgenössische Kunst aus?", "Welche Museen stellen Kunstwerke ausgestellt von Schloss Montsoreau – Museum für zeitgenössische Kunst aus?", "Welche Museen stellten Kunstwerke ausgestellt von Schloss Montsoreau – Museum für zeitgenössische Kunst aus?", "Welches Museum stellt Kunstwerke ausgestellt von Schloss Montsoreau – Museum für zeitgenössische Kunst aus?", "Welches Museum stellte Kunstwerke ausgestellt von Schloss Montsoreau – Museum für zeitgenössische Kunst aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Château_de_Montsoreau-Museum_of_Contemporary_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Cincinnati Art Museum aus?", "Was stellte Kunstwerke ausgestellt von Cincinnati Art Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Cincinnati Art Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Cincinnati Art Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Cincinnati Art Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Cincinnati Art Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Cincinnati_Art_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Sterling and Francine Clark Art Institute aus?", "Was stellte Kunstwerke ausgestellt von Sterling and Francine Clark Art Institute aus?", "Welche Museen stellen Kunstwerke ausgestellt von Sterling and Francine Clark Art Institute aus?", "Welche Museen stellten Kunstwerke ausgestellt von Sterling and Francine Clark Art Institute aus?", "Welches Museum stellt Kunstwerke ausgestellt von Sterling and Francine Clark Art Institute aus?", "Welches Museum stellte Kunstwerke ausgestellt von Sterling and Francine Clark Art Institute aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Clark_Art_Institute>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Cleveland Museum of Art aus?", "Was stellte Kunstwerke ausgestellt von Cleveland Museum of Art aus?", "Welche Museen stellen Kunstwerke ausgestellt von Cleveland Museum of Art aus?", "Welche Museen stellten Kunstwerke ausgestellt von Cleveland Museum of Art aus?", "Welches Museum stellt Kunstwerke ausgestellt von Cleveland Museum of Art aus?", "Welches Museum stellte Kunstwerke ausgestellt von Cleveland Museum of Art aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Cleveland_Museum_of_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Colgate University aus?", "Was stellte Kunstwerke ausgestellt von Colgate University aus?", "Welche Museen stellen Kunstwerke ausgestellt von Colgate University aus?", "Welche Museen stellten Kunstwerke ausgestellt von Colgate University aus?", "Welches Museum stellt Kunstwerke ausgestellt von Colgate University aus?", "Welches Museum stellte Kunstwerke ausgestellt von Colgate University aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Colgate_University>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Provinzmuseum Gansu aus?", "Was stellte Kunstwerke ausgestellt von Provinzmuseum Gansu aus?", "Welche Museen stellen Kunstwerke ausgestellt von Provinzmuseum Gansu aus?", "Welche Museen stellten Kunstwerke ausgestellt von Provinzmuseum Gansu aus?", "Welches Museum stellt Kunstwerke ausgestellt von Provinzmuseum Gansu aus?", "Welches Museum stellte Kunstwerke ausgestellt von Provinzmuseum Gansu aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Gansu_Provincial_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Getty Center aus?", "Was stellte Kunstwerke ausgestellt von Getty Center aus?", "Welche Museen stellen Kunstwerke ausgestellt von Getty Center aus?", "Welche Museen stellten Kunstwerke ausgestellt von Getty Center aus?", "Welches Museum stellt Kunstwerke ausgestellt von Getty Center aus?", "Welches Museum stellte Kunstwerke ausgestellt von Getty Center aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Getty_Center>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Gettysburg National Military Park aus?", "Was stellte Kunstwerke ausgestellt von Gettysburg National Military Park aus?", "Welche Museen stellen Kunstwerke ausgestellt von Gettysburg National Military Park aus?", "Welche Museen stellten Kunstwerke ausgestellt von Gettysburg National Military Park aus?", "Welches Museum stellt Kunstwerke ausgestellt von Gettysburg National Military Park aus?", "Welches Museum stellte Kunstwerke ausgestellt von Gettysburg National Military Park aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Gettysburg_National_Military_Park>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Städtische Galerie im Lenbachhaus aus?", "Was stellte Kunstwerke ausgestellt von Städtische Galerie im Lenbachhaus aus?", "Welche Museen stellen Kunstwerke ausgestellt von Städtische Galerie im Lenbachhaus aus?", "Welche Museen stellten Kunstwerke ausgestellt von Städtische Galerie im Lenbachhaus aus?", "Welches Museum stellt Kunstwerke ausgestellt von Städtische Galerie im Lenbachhaus aus?", "Welches Museum stellte Kunstwerke ausgestellt von Städtische Galerie im Lenbachhaus aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Lenbachhaus>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Tartu Kunstimuuseum aus?", "Was stellte Kunstwerke ausgestellt von Tartu Kunstimuuseum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Tartu Kunstimuuseum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Tartu Kunstimuuseum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Tartu Kunstimuuseum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Tartu Kunstimuuseum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Tartu_Art_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Nationalgalerie Oslo aus?", "Was stellte Kunstwerke ausgestellt von Nationalgalerie Oslo aus?", "Welche Museen stellen Kunstwerke ausgestellt von Nationalgalerie Oslo aus?", "Welche Museen stellten Kunstwerke ausgestellt von Nationalgalerie Oslo aus?", "Welches Museum stellt Kunstwerke ausgestellt von Nationalgalerie Oslo aus?", "Welches Museum stellte Kunstwerke ausgestellt von Nationalgalerie Oslo aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/National_Gallery_(Norway)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Museo Correr aus?", "Was stellte Kunstwerke ausgestellt von Museo Correr aus?", "Welche Museen stellen Kunstwerke ausgestellt von Museo Correr aus?", "Welche Museen stellten Kunstwerke ausgestellt von Museo Correr aus?", "Welches Museum stellt Kunstwerke ausgestellt von Museo Correr aus?", "Welches Museum stellte Kunstwerke ausgestellt von Museo Correr aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Museo_Correr>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Biblioteca Nacional de Portugal aus?", "Was stellte Kunstwerke ausgestellt von Biblioteca Nacional de Portugal aus?", "Welche Museen stellen Kunstwerke ausgestellt von Biblioteca Nacional de Portugal aus?", "Welche Museen stellten Kunstwerke ausgestellt von Biblioteca Nacional de Portugal aus?", "Welches Museum stellt Kunstwerke ausgestellt von Biblioteca Nacional de Portugal aus?", "Welches Museum stellte Kunstwerke ausgestellt von Biblioteca Nacional de Portugal aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Biblioteca_Nacional_de_Portugal>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Museo de Bellas Artes de Bilbao aus?", "Was stellte Kunstwerke ausgestellt von Museo de Bellas Artes de Bilbao aus?", "Welche Museen stellen Kunstwerke ausgestellt von Museo de Bellas Artes de Bilbao aus?", "Welche Museen stellten Kunstwerke ausgestellt von Museo de Bellas Artes de Bilbao aus?", "Welches Museum stellt Kunstwerke ausgestellt von Museo de Bellas Artes de Bilbao aus?", "Welches Museum stellte Kunstwerke ausgestellt von Museo de Bellas Artes de Bilbao aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Bilbao_Fine_Arts_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Kenneth C. Griffin aus?", "Was stellte Kunstwerke ausgestellt von Kenneth C. Griffin aus?", "Welche Museen stellen Kunstwerke ausgestellt von Kenneth C. Griffin aus?", "Welche Museen stellten Kunstwerke ausgestellt von Kenneth C. Griffin aus?", "Welches Museum stellt Kunstwerke ausgestellt von Kenneth C. Griffin aus?", "Welches Museum stellte Kunstwerke ausgestellt von Kenneth C. Griffin aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Kenneth_C._Griffin>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Provinzmuseum Liaoning aus?", "Was stellte Kunstwerke ausgestellt von Provinzmuseum Liaoning aus?", "Welche Museen stellen Kunstwerke ausgestellt von Provinzmuseum Liaoning aus?", "Welche Museen stellten Kunstwerke ausgestellt von Provinzmuseum Liaoning aus?", "Welches Museum stellt Kunstwerke ausgestellt von Provinzmuseum Liaoning aus?", "Welches Museum stellte Kunstwerke ausgestellt von Provinzmuseum Liaoning aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Liaoning_Provincial_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Lincoln Memorial aus?", "Was stellte Kunstwerke ausgestellt von Lincoln Memorial aus?", "Welche Museen stellen Kunstwerke ausgestellt von Lincoln Memorial aus?", "Welche Museen stellten Kunstwerke ausgestellt von Lincoln Memorial aus?", "Welches Museum stellt Kunstwerke ausgestellt von Lincoln Memorial aus?", "Welches Museum stellte Kunstwerke ausgestellt von Lincoln Memorial aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Lincoln_Memorial>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Kathedrale von Zadar aus?", "Was stellte Kunstwerke ausgestellt von Kathedrale von Zadar aus?", "Welche Museen stellen Kunstwerke ausgestellt von Kathedrale von Zadar aus?", "Welche Museen stellten Kunstwerke ausgestellt von Kathedrale von Zadar aus?", "Welches Museum stellt Kunstwerke ausgestellt von Kathedrale von Zadar aus?", "Welches Museum stellte Kunstwerke ausgestellt von Kathedrale von Zadar aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Zadar_Cathedral>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Mailand aus?", "Was stellte Kunstwerke ausgestellt von Mailand aus?", "Welche Museen stellen Kunstwerke ausgestellt von Mailand aus?", "Welche Museen stellten Kunstwerke ausgestellt von Mailand aus?", "Welches Museum stellt Kunstwerke ausgestellt von Mailand aus?", "Welches Museum stellte Kunstwerke ausgestellt von Mailand aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Milan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Mailänder Dom aus?", "Was stellte Kunstwerke ausgestellt von Mailänder Dom aus?", "Welche Museen stellen Kunstwerke ausgestellt von Mailänder Dom aus?", "Welche Museen stellten Kunstwerke ausgestellt von Mailänder Dom aus?", "Welches Museum stellt Kunstwerke ausgestellt von Mailänder Dom aus?", "Welches Museum stellte Kunstwerke ausgestellt von Mailänder Dom aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Milan_Cathedral>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Moderna Museet aus?", "Was stellte Kunstwerke ausgestellt von Moderna Museet aus?", "Welche Museen stellen Kunstwerke ausgestellt von Moderna Museet aus?", "Welche Museen stellten Kunstwerke ausgestellt von Moderna Museet aus?", "Welches Museum stellt Kunstwerke ausgestellt von Moderna Museet aus?", "Welches Museum stellte Kunstwerke ausgestellt von Moderna Museet aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Moderna_Museet>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Sankt Petersburg aus?", "Was stellte Kunstwerke ausgestellt von Sankt Petersburg aus?", "Welche Museen stellen Kunstwerke ausgestellt von Sankt Petersburg aus?", "Welche Museen stellten Kunstwerke ausgestellt von Sankt Petersburg aus?", "Welches Museum stellt Kunstwerke ausgestellt von Sankt Petersburg aus?", "Welches Museum stellte Kunstwerke ausgestellt von Sankt Petersburg aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Saint_Petersburg>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Leningrad (Band) aus?", "Was stellte Kunstwerke ausgestellt von Leningrad (Band) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Leningrad (Band) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Leningrad (Band) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Leningrad (Band) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Leningrad (Band) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Saint_Petersburg>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Dalí Museum (St. Petersburg) aus?", "Was stellte Kunstwerke ausgestellt von Dalí Museum (St. Petersburg) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Dalí Museum (St. Petersburg) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Dalí Museum (St. Petersburg) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Dalí Museum (St. Petersburg) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Dalí Museum (St. Petersburg) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Salvador_Dalí_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Musée du quai Branly aus?", "Was stellte Kunstwerke ausgestellt von Musée du quai Branly aus?", "Welche Museen stellen Kunstwerke ausgestellt von Musée du quai Branly aus?", "Welche Museen stellten Kunstwerke ausgestellt von Musée du quai Branly aus?", "Welches Museum stellt Kunstwerke ausgestellt von Musée du quai Branly aus?", "Welches Museum stellte Kunstwerke ausgestellt von Musée du quai Branly aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Musée_du_quai_Branly_–_Jacques_Chirac>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Manege (Moskau) aus?", "Was stellte Kunstwerke ausgestellt von Manege (Moskau) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Manege (Moskau) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Manege (Moskau) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Manege (Moskau) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Manege (Moskau) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Moscow_Manege>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Stiftung Sammlung E. G. Bührle aus?", "Was stellte Kunstwerke ausgestellt von Stiftung Sammlung E. G. Bührle aus?", "Welche Museen stellen Kunstwerke ausgestellt von Stiftung Sammlung E. G. Bührle aus?", "Welche Museen stellten Kunstwerke ausgestellt von Stiftung Sammlung E. G. Bührle aus?", "Welches Museum stellt Kunstwerke ausgestellt von Stiftung Sammlung E. G. Bührle aus?", "Welches Museum stellte Kunstwerke ausgestellt von Stiftung Sammlung E. G. Bührle aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Foundation_E.G._Bührle>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Galleria nazionale di Parma aus?", "Was stellte Kunstwerke ausgestellt von Galleria nazionale di Parma aus?", "Welche Museen stellen Kunstwerke ausgestellt von Galleria nazionale di Parma aus?", "Welche Museen stellten Kunstwerke ausgestellt von Galleria nazionale di Parma aus?", "Welches Museum stellt Kunstwerke ausgestellt von Galleria nazionale di Parma aus?", "Welches Museum stellte Kunstwerke ausgestellt von Galleria nazionale di Parma aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Galleria_nazionale_di_Parma>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Smithsonian American Art Museum aus?", "Was stellte Kunstwerke ausgestellt von Smithsonian American Art Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Smithsonian American Art Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Smithsonian American Art Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Smithsonian American Art Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Smithsonian American Art Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Smithsonian_American_Art_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Sofia aus?", "Was stellte Kunstwerke ausgestellt von Sofia aus?", "Welche Museen stellen Kunstwerke ausgestellt von Sofia aus?", "Welche Museen stellten Kunstwerke ausgestellt von Sofia aus?", "Welches Museum stellt Kunstwerke ausgestellt von Sofia aus?", "Welches Museum stellte Kunstwerke ausgestellt von Sofia aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Sofia>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Solomon R. Guggenheim Museum aus?", "Was stellte Kunstwerke ausgestellt von Solomon R. Guggenheim Museum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Solomon R. Guggenheim Museum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Solomon R. Guggenheim Museum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Solomon R. Guggenheim Museum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Solomon R. Guggenheim Museum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Solomon_R._Guggenheim_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Petersdom aus?", "Was stellte Kunstwerke ausgestellt von Petersdom aus?", "Welche Museen stellen Kunstwerke ausgestellt von Petersdom aus?", "Welche Museen stellten Kunstwerke ausgestellt von Petersdom aus?", "Welches Museum stellt Kunstwerke ausgestellt von Petersdom aus?", "Welches Museum stellte Kunstwerke ausgestellt von Petersdom aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/St._Peter's_Basilica>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Nationalmuseum Nara aus?", "Was stellte Kunstwerke ausgestellt von Nationalmuseum Nara aus?", "Welche Museen stellen Kunstwerke ausgestellt von Nationalmuseum Nara aus?", "Welche Museen stellten Kunstwerke ausgestellt von Nationalmuseum Nara aus?", "Welches Museum stellt Kunstwerke ausgestellt von Nationalmuseum Nara aus?", "Welches Museum stellte Kunstwerke ausgestellt von Nationalmuseum Nara aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Nara_National_Museum>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Lettisches Nationales Kunstmuseum aus?", "Was stellte Kunstwerke ausgestellt von Lettisches Nationales Kunstmuseum aus?", "Welche Museen stellen Kunstwerke ausgestellt von Lettisches Nationales Kunstmuseum aus?", "Welche Museen stellten Kunstwerke ausgestellt von Lettisches Nationales Kunstmuseum aus?", "Welches Museum stellt Kunstwerke ausgestellt von Lettisches Nationales Kunstmuseum aus?", "Welches Museum stellte Kunstwerke ausgestellt von Lettisches Nationales Kunstmuseum aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Latvian_National_Museum_of_Art>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Museu Nacional de Belas Artes aus?", "Was stellte Kunstwerke ausgestellt von Museu Nacional de Belas Artes aus?", "Welche Museen stellen Kunstwerke ausgestellt von Museu Nacional de Belas Artes aus?", "Welche Museen stellten Kunstwerke ausgestellt von Museu Nacional de Belas Artes aus?", "Welches Museum stellt Kunstwerke ausgestellt von Museu Nacional de Belas Artes aus?", "Welches Museum stellte Kunstwerke ausgestellt von Museu Nacional de Belas Artes aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Museu_Nacional_de_Belas_Artes>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Frick Collection aus?", "Was stellte Kunstwerke ausgestellt von Frick Collection aus?", "Welche Museen stellen Kunstwerke ausgestellt von Frick Collection aus?", "Welche Museen stellten Kunstwerke ausgestellt von Frick Collection aus?", "Welches Museum stellt Kunstwerke ausgestellt von Frick Collection aus?", "Welches Museum stellte Kunstwerke ausgestellt von Frick Collection aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Frick_Collection>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Accademia (Venedig) aus?", "Was stellte Kunstwerke ausgestellt von Accademia (Venedig) aus?", "Welche Museen stellen Kunstwerke ausgestellt von Accademia (Venedig) aus?", "Welche Museen stellten Kunstwerke ausgestellt von Accademia (Venedig) aus?", "Welches Museum stellt Kunstwerke ausgestellt von Accademia (Venedig) aus?", "Welches Museum stellte Kunstwerke ausgestellt von Accademia (Venedig) aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Gallerie_dell'Accademia>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Accademia di belle arti di Venezia aus?", "Was stellte Kunstwerke ausgestellt von Accademia di belle arti di Venezia aus?", "Welche Museen stellen Kunstwerke ausgestellt von Accademia di belle arti di Venezia aus?", "Welche Museen stellten Kunstwerke ausgestellt von Accademia di belle arti di Venezia aus?", "Welches Museum stellt Kunstwerke ausgestellt von Accademia di belle arti di Venezia aus?", "Welches Museum stellte Kunstwerke ausgestellt von Accademia di belle arti di Venezia aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Gallerie_dell'Accademia>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "20",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "MUSEUM",
    "returnType" : "MUSEUM",
    "frameType" : "VP",
    "sentences" : [ "Was stellt Kunstwerke ausgestellt von Harvard Art Museums aus?", "Was stellte Kunstwerke ausgestellt von Harvard Art Museums aus?", "Welche Museen stellen Kunstwerke ausgestellt von Harvard Art Museums aus?", "Welche Museen stellten Kunstwerke ausgestellt von Harvard Art Museums aus?", "Welches Museum stellt Kunstwerke ausgestellt von Harvard Art Museums aus?", "Welches Museum stellte Kunstwerke ausgestellt von Harvard Art Museums aus?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/museum> <http://dbpedia.org/resource/Harvard_Art_Museums>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Letícia_Persiles entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Letícia_Persiles entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Letícia_Persiles entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Letícia_Persiles entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Letícia_Persiles entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Letícia_Persiles entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Letícia_Persiles> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Tereza_Seiblitz entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Tereza_Seiblitz entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Tereza_Seiblitz entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Tereza_Seiblitz entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Tereza_Seiblitz entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Tereza_Seiblitz entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Tereza_Seiblitz> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Patrick_Sean_Smith entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Patrick_Sean_Smith entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Patrick_Sean_Smith entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Patrick_Sean_Smith entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Patrick_Sean_Smith entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Patrick_Sean_Smith entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Patrick_Sean_Smith> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Mabel_Cook_Cole entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Mabel_Cook_Cole entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Mabel_Cook_Cole entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Mabel_Cook_Cole entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Mabel_Cook_Cole entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Mabel_Cook_Cole entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mabel_Cook_Cole> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Lamontagne entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Lamontagne entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Lamontagne entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Lamontagne entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Lamontagne entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Lamontagne entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Cynthia_Lamontagne> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Kristen Cloke entwickelt?", "Was wurde von Personen geheiratet von Kristen Cloke entwickelt?", "Welche Werke werden von Personen geheiratet von Kristen Cloke entwickelt?", "Welche Werke wurden von Personen geheiratet von Kristen Cloke entwickelt?", "Welches Werk wird von Personen geheiratet von Kristen Cloke entwickelt?", "Welches Werk wurde von Personen geheiratet von Kristen Cloke entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kristen_Cloke> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Jennifer Schwalbach Smith entwickelt?", "Was wurde von Personen geheiratet von Jennifer Schwalbach Smith entwickelt?", "Welche Werke werden von Personen geheiratet von Jennifer Schwalbach Smith entwickelt?", "Welche Werke wurden von Personen geheiratet von Jennifer Schwalbach Smith entwickelt?", "Welches Werk wird von Personen geheiratet von Jennifer Schwalbach Smith entwickelt?", "Welches Werk wurde von Personen geheiratet von Jennifer Schwalbach Smith entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jennifer_Schwalbach_Smith> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Annie Potts entwickelt?", "Was wurde von Personen geheiratet von Annie Potts entwickelt?", "Welche Werke werden von Personen geheiratet von Annie Potts entwickelt?", "Welche Werke wurden von Personen geheiratet von Annie Potts entwickelt?", "Welches Werk wird von Personen geheiratet von Annie Potts entwickelt?", "Welches Werk wurde von Personen geheiratet von Annie Potts entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Annie_Potts> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Rose Leslie entwickelt?", "Was wurde von Personen geheiratet von Rose Leslie entwickelt?", "Welche Werke werden von Personen geheiratet von Rose Leslie entwickelt?", "Welche Werke wurden von Personen geheiratet von Rose Leslie entwickelt?", "Welches Werk wird von Personen geheiratet von Rose Leslie entwickelt?", "Welches Werk wurde von Personen geheiratet von Rose Leslie entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rose_Leslie> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Jill_Latiano entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Jill_Latiano entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Jill_Latiano entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Jill_Latiano entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Jill_Latiano entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Jill_Latiano entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jill_Latiano> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Emily_Short entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Emily_Short entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Emily_Short entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Emily_Short entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Emily_Short entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Emily_Short entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Emily_Short> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Susanne_Daniels entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Susanne_Daniels entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Susanne_Daniels entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Susanne_Daniels entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Susanne_Daniels entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Susanne_Daniels entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Susanne_Daniels> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Julie_Wilson_Nimmo entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Julie_Wilson_Nimmo entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Julie_Wilson_Nimmo entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Julie_Wilson_Nimmo entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Julie_Wilson_Nimmo entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Julie_Wilson_Nimmo entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Julie_Wilson_Nimmo> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Rachel_Ramras entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Rachel_Ramras entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Rachel_Ramras entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Rachel_Ramras entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Rachel_Ramras entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Rachel_Ramras entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rachel_Ramras> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Lita Grey entwickelt?", "Was wurde von Personen geheiratet von Lita Grey entwickelt?", "Welche Werke werden von Personen geheiratet von Lita Grey entwickelt?", "Welche Werke wurden von Personen geheiratet von Lita Grey entwickelt?", "Welches Werk wird von Personen geheiratet von Lita Grey entwickelt?", "Welches Werk wurde von Personen geheiratet von Lita Grey entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lita_Grey> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Oona O’Neill entwickelt?", "Was wurde von Personen geheiratet von Oona O’Neill entwickelt?", "Welche Werke werden von Personen geheiratet von Oona O’Neill entwickelt?", "Welche Werke wurden von Personen geheiratet von Oona O’Neill entwickelt?", "Welches Werk wird von Personen geheiratet von Oona O’Neill entwickelt?", "Welches Werk wurde von Personen geheiratet von Oona O’Neill entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Oona_O'Neill> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Paulette Goddard entwickelt?", "Was wurde von Personen geheiratet von Paulette Goddard entwickelt?", "Welche Werke werden von Personen geheiratet von Paulette Goddard entwickelt?", "Welche Werke wurden von Personen geheiratet von Paulette Goddard entwickelt?", "Welches Werk wird von Personen geheiratet von Paulette Goddard entwickelt?", "Welches Werk wurde von Personen geheiratet von Paulette Goddard entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Paulette_Goddard> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Bonnie_MacBird entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Bonnie_MacBird entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Bonnie_MacBird entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Bonnie_MacBird entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Bonnie_MacBird entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Bonnie_MacBird entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bonnie_MacBird> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Mildred_Harris entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Mildred_Harris entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Mildred_Harris entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Mildred_Harris entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Mildred_Harris entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Mildred_Harris entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mildred_Harris> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Bonnie_Lythgoe entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Bonnie_Lythgoe entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Bonnie_Lythgoe entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Bonnie_Lythgoe entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Bonnie_Lythgoe entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Bonnie_Lythgoe entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bonnie_Lythgoe> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Gowri_Pandit entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Gowri_Pandit entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Gowri_Pandit entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Gowri_Pandit entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Gowri_Pandit entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Gowri_Pandit entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gowri_Pandit> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Molly_Ostertag entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Molly_Ostertag entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Molly_Ostertag entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Molly_Ostertag entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Molly_Ostertag entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Molly_Ostertag entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Molly_Ostertag> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Frances_Lear entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Frances_Lear entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Frances_Lear entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Frances_Lear entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Frances_Lear entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Frances_Lear entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Frances_Lear> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Terry_Amburgey entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Terry_Amburgey entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Terry_Amburgey entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Terry_Amburgey entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Terry_Amburgey entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Terry_Amburgey entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Terry_Amburgey> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Maurice_de_Rothschild entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Maurice_de_Rothschild entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Maurice_de_Rothschild entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Maurice_de_Rothschild entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Maurice_de_Rothschild entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Maurice_de_Rothschild entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Maurice_de_Rothschild> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Valerie Curtin entwickelt?", "Was wurde von Personen geheiratet von Valerie Curtin entwickelt?", "Welche Werke werden von Personen geheiratet von Valerie Curtin entwickelt?", "Welche Werke wurden von Personen geheiratet von Valerie Curtin entwickelt?", "Welches Werk wird von Personen geheiratet von Valerie Curtin entwickelt?", "Welches Werk wurde von Personen geheiratet von Valerie Curtin entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Valerie_Curtin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Lisa Howard entwickelt?", "Was wurde von Personen geheiratet von Lisa Howard entwickelt?", "Welche Werke werden von Personen geheiratet von Lisa Howard entwickelt?", "Welche Werke wurden von Personen geheiratet von Lisa Howard entwickelt?", "Welches Werk wird von Personen geheiratet von Lisa Howard entwickelt?", "Welches Werk wurde von Personen geheiratet von Lisa Howard entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lisa_Howard_(Canadian_actress)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Zumbi entwickelt?", "Was wurde von Personen geheiratet von Zumbi entwickelt?", "Welche Werke werden von Personen geheiratet von Zumbi entwickelt?", "Welche Werke wurden von Personen geheiratet von Zumbi entwickelt?", "Welches Werk wird von Personen geheiratet von Zumbi entwickelt?", "Welches Werk wurde von Personen geheiratet von Zumbi entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Zumbi> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Noura_Ghazi entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Noura_Ghazi entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Noura_Ghazi entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Noura_Ghazi entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Noura_Ghazi entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Noura_Ghazi entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Noura_Ghazi> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Rosie_Shuster entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Rosie_Shuster entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Rosie_Shuster entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Rosie_Shuster entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Rosie_Shuster entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Rosie_Shuster entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rosie_Shuster> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Laura_Marks entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Laura_Marks entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Laura_Marks entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Laura_Marks entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Laura_Marks entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Laura_Marks entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Laura_Marks> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Carlene_Watkins entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Carlene_Watkins entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Carlene_Watkins entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Carlene_Watkins entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Carlene_Watkins entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Carlene_Watkins entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carlene_Watkins> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Kim_Myers entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Kim_Myers entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Kim_Myers entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Kim_Myers entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Kim_Myers entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Kim_Myers entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kim_Myers> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Carlos_Lacámara entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Carlos_Lacámara entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Carlos_Lacámara entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Carlos_Lacámara entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Carlos_Lacámara entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Carlos_Lacámara entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carlos_Lacámara> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Karen_Witter entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Karen_Witter entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Karen_Witter entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Karen_Witter entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Karen_Witter entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Karen_Witter entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Karen_Witter> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Madeleine Astor entwickelt?", "Was wurde von Personen geheiratet von Madeleine Astor entwickelt?", "Welche Werke werden von Personen geheiratet von Madeleine Astor entwickelt?", "Welche Werke wurden von Personen geheiratet von Madeleine Astor entwickelt?", "Welches Werk wird von Personen geheiratet von Madeleine Astor entwickelt?", "Welches Werk wurde von Personen geheiratet von Madeleine Astor entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Madeleine_Astor> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Alison Snowden entwickelt?", "Was wurde von Personen geheiratet von Alison Snowden entwickelt?", "Welche Werke werden von Personen geheiratet von Alison Snowden entwickelt?", "Welche Werke wurden von Personen geheiratet von Alison Snowden entwickelt?", "Welches Werk wird von Personen geheiratet von Alison Snowden entwickelt?", "Welches Werk wurde von Personen geheiratet von Alison Snowden entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alison_Snowden> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Ava Willing Astor entwickelt?", "Was wurde von Personen geheiratet von Ava Willing Astor entwickelt?", "Welche Werke werden von Personen geheiratet von Ava Willing Astor entwickelt?", "Welche Werke wurden von Personen geheiratet von Ava Willing Astor entwickelt?", "Welches Werk wird von Personen geheiratet von Ava Willing Astor entwickelt?", "Welches Werk wurde von Personen geheiratet von Ava Willing Astor entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ava_Lowle_Willing> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Abby Aldrich Rockefeller entwickelt?", "Was wurde von Personen geheiratet von Abby Aldrich Rockefeller entwickelt?", "Welche Werke werden von Personen geheiratet von Abby Aldrich Rockefeller entwickelt?", "Welche Werke wurden von Personen geheiratet von Abby Aldrich Rockefeller entwickelt?", "Welches Werk wird von Personen geheiratet von Abby Aldrich Rockefeller entwickelt?", "Welches Werk wurde von Personen geheiratet von Abby Aldrich Rockefeller entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Abby_Aldrich_Rockefeller> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Talia Balsam entwickelt?", "Was wurde von Personen geheiratet von Talia Balsam entwickelt?", "Welche Werke werden von Personen geheiratet von Talia Balsam entwickelt?", "Welche Werke wurden von Personen geheiratet von Talia Balsam entwickelt?", "Welches Werk wird von Personen geheiratet von Talia Balsam entwickelt?", "Welches Werk wurde von Personen geheiratet von Talia Balsam entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Talia_Balsam> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Ellen Bry entwickelt?", "Was wurde von Personen geheiratet von Ellen Bry entwickelt?", "Welche Werke werden von Personen geheiratet von Ellen Bry entwickelt?", "Welche Werke wurden von Personen geheiratet von Ellen Bry entwickelt?", "Welches Werk wird von Personen geheiratet von Ellen Bry entwickelt?", "Welches Werk wurde von Personen geheiratet von Ellen Bry entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ellen_Bry> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Joyce_Burditt entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Joyce_Burditt entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Joyce_Burditt entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Joyce_Burditt entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Joyce_Burditt entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Joyce_Burditt entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Joyce_Burditt> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Amal_Clooney entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Amal_Clooney entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Amal_Clooney entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Amal_Clooney entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Amal_Clooney entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Amal_Clooney entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Amal_Clooney> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Mellody_Hobson entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Mellody_Hobson entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Mellody_Hobson entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Mellody_Hobson entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Mellody_Hobson entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Mellody_Hobson entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mellody_Hobson> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Marcia_Lucas entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Marcia_Lucas entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Marcia_Lucas entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Marcia_Lucas entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Marcia_Lucas entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Marcia_Lucas entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Marcia_Lucas> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Wishnutama entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Wishnutama entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Wishnutama entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Wishnutama entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Wishnutama entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Wishnutama entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Wishnutama> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Nancy_Juvonen entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Nancy_Juvonen entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Nancy_Juvonen entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Nancy_Juvonen entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Nancy_Juvonen entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Nancy_Juvonen entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Nancy_Juvonen> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Martha_Baird_Rockefeller entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Martha_Baird_Rockefeller entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Martha_Baird_Rockefeller entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Martha_Baird_Rockefeller entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Martha_Baird_Rockefeller entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Martha_Baird_Rockefeller entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Martha_Baird_Rockefeller> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Graham_Nelson entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Graham_Nelson entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Graham_Nelson entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Graham_Nelson entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Graham_Nelson entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Graham_Nelson entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Graham_Nelson> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Elise_Doganieri entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Elise_Doganieri entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Elise_Doganieri entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Elise_Doganieri entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Elise_Doganieri entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Elise_Doganieri entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Elise_Doganieri> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Christa Miller entwickelt?", "Was wurde von Personen geheiratet von Christa Miller entwickelt?", "Welche Werke werden von Personen geheiratet von Christa Miller entwickelt?", "Welche Werke wurden von Personen geheiratet von Christa Miller entwickelt?", "Welches Werk wird von Personen geheiratet von Christa Miller entwickelt?", "Welches Werk wurde von Personen geheiratet von Christa Miller entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christa_Miller> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Pippa Scott entwickelt?", "Was wurde von Personen geheiratet von Pippa Scott entwickelt?", "Welche Werke werden von Personen geheiratet von Pippa Scott entwickelt?", "Welche Werke wurden von Personen geheiratet von Pippa Scott entwickelt?", "Welches Werk wird von Personen geheiratet von Pippa Scott entwickelt?", "Welches Werk wurde von Personen geheiratet von Pippa Scott entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Pippa_Scott> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Megyn Price entwickelt?", "Was wurde von Personen geheiratet von Megyn Price entwickelt?", "Welche Werke werden von Personen geheiratet von Megyn Price entwickelt?", "Welche Werke wurden von Personen geheiratet von Megyn Price entwickelt?", "Welches Werk wird von Personen geheiratet von Megyn Price entwickelt?", "Welches Werk wurde von Personen geheiratet von Megyn Price entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Megyn_Price> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Melinda Gates entwickelt?", "Was wurde von Personen geheiratet von Melinda Gates entwickelt?", "Welche Werke werden von Personen geheiratet von Melinda Gates entwickelt?", "Welche Werke wurden von Personen geheiratet von Melinda Gates entwickelt?", "Welches Werk wird von Personen geheiratet von Melinda Gates entwickelt?", "Welches Werk wurde von Personen geheiratet von Melinda Gates entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Melinda_Gates> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Meredith_L._Patterson entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Meredith_L._Patterson entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Meredith_L._Patterson entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Meredith_L._Patterson entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Meredith_L._Patterson entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Meredith_L._Patterson entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Meredith_L._Patterson> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Vivien_Alcock entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Vivien_Alcock entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Vivien_Alcock entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Vivien_Alcock entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Vivien_Alcock entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Vivien_Alcock entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Vivien_Alcock> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Duke_Hayward entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Duke_Hayward entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Duke_Hayward entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Duke_Hayward entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Duke_Hayward entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Duke_Hayward entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Duke_Hayward> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Elizabeth_Whitmere entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Elizabeth_Whitmere entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Elizabeth_Whitmere entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Elizabeth_Whitmere entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Elizabeth_Whitmere entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Elizabeth_Whitmere entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Elizabeth_Whitmere> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Jennifer Tilly entwickelt?", "Was wurde von Personen geheiratet von Jennifer Tilly entwickelt?", "Welche Werke werden von Personen geheiratet von Jennifer Tilly entwickelt?", "Welche Werke wurden von Personen geheiratet von Jennifer Tilly entwickelt?", "Welches Werk wird von Personen geheiratet von Jennifer Tilly entwickelt?", "Welches Werk wurde von Personen geheiratet von Jennifer Tilly entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jennifer_Tilly> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Kate_Fleetwood entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Kate_Fleetwood entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Kate_Fleetwood entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Kate_Fleetwood entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Kate_Fleetwood entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Kate_Fleetwood entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kate_Fleetwood> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Mara_Brock_Akil entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Mara_Brock_Akil entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Mara_Brock_Akil entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Mara_Brock_Akil entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Mara_Brock_Akil entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Mara_Brock_Akil entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mara_Brock_Akil> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Julie_Dretzin entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Julie_Dretzin entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Julie_Dretzin entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Julie_Dretzin entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Julie_Dretzin entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Julie_Dretzin entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Julie_Dretzin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Sharon_Shore entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Sharon_Shore entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Sharon_Shore entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Sharon_Shore entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Sharon_Shore entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Sharon_Shore entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sharon_Shore> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Suzanne_Martin entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Suzanne_Martin entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Suzanne_Martin entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Suzanne_Martin entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Suzanne_Martin entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Suzanne_Martin entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Suzanne_Martin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Ivana Trump entwickelt?", "Was wurde von Personen geheiratet von Ivana Trump entwickelt?", "Welche Werke werden von Personen geheiratet von Ivana Trump entwickelt?", "Welche Werke wurden von Personen geheiratet von Ivana Trump entwickelt?", "Welches Werk wird von Personen geheiratet von Ivana Trump entwickelt?", "Welches Werk wurde von Personen geheiratet von Ivana Trump entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ivana_Trump> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Pamela Hensley entwickelt?", "Was wurde von Personen geheiratet von Pamela Hensley entwickelt?", "Welche Werke werden von Personen geheiratet von Pamela Hensley entwickelt?", "Welche Werke wurden von Personen geheiratet von Pamela Hensley entwickelt?", "Welches Werk wird von Personen geheiratet von Pamela Hensley entwickelt?", "Welches Werk wurde von Personen geheiratet von Pamela Hensley entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Pamela_Hensley> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Melania Trump entwickelt?", "Was wurde von Personen geheiratet von Melania Trump entwickelt?", "Welche Werke werden von Personen geheiratet von Melania Trump entwickelt?", "Welche Werke wurden von Personen geheiratet von Melania Trump entwickelt?", "Welches Werk wird von Personen geheiratet von Melania Trump entwickelt?", "Welches Werk wurde von Personen geheiratet von Melania Trump entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Melania_Trump> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Marla Maples entwickelt?", "Was wurde von Personen geheiratet von Marla Maples entwickelt?", "Welche Werke werden von Personen geheiratet von Marla Maples entwickelt?", "Welche Werke wurden von Personen geheiratet von Marla Maples entwickelt?", "Welches Werk wird von Personen geheiratet von Marla Maples entwickelt?", "Welches Werk wurde von Personen geheiratet von Marla Maples entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Marla_Maples> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Eric_Zicklin entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Eric_Zicklin entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Eric_Zicklin entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Eric_Zicklin entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Eric_Zicklin entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Eric_Zicklin entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Eric_Zicklin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Leona Helmsley entwickelt?", "Was wurde von Personen geheiratet von Leona Helmsley entwickelt?", "Welche Werke werden von Personen geheiratet von Leona Helmsley entwickelt?", "Welche Werke wurden von Personen geheiratet von Leona Helmsley entwickelt?", "Welches Werk wird von Personen geheiratet von Leona Helmsley entwickelt?", "Welches Werk wurde von Personen geheiratet von Leona Helmsley entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Leona_Helmsley> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von James Cameron entwickelt?", "Was wurde von Personen geheiratet von James Cameron entwickelt?", "Welche Werke werden von Personen geheiratet von James Cameron entwickelt?", "Welche Werke wurden von Personen geheiratet von James Cameron entwickelt?", "Welches Werk wird von Personen geheiratet von James Cameron entwickelt?", "Welches Werk wurde von Personen geheiratet von James Cameron entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/James_Cameron> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Elinor Donahue entwickelt?", "Was wurde von Personen geheiratet von Elinor Donahue entwickelt?", "Welche Werke werden von Personen geheiratet von Elinor Donahue entwickelt?", "Welche Werke wurden von Personen geheiratet von Elinor Donahue entwickelt?", "Welches Werk wird von Personen geheiratet von Elinor Donahue entwickelt?", "Welches Werk wurde von Personen geheiratet von Elinor Donahue entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Elinor_Donahue> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Jonathan Hensleigh entwickelt?", "Was wurde von Personen geheiratet von Jonathan Hensleigh entwickelt?", "Welche Werke werden von Personen geheiratet von Jonathan Hensleigh entwickelt?", "Welche Werke wurden von Personen geheiratet von Jonathan Hensleigh entwickelt?", "Welches Werk wird von Personen geheiratet von Jonathan Hensleigh entwickelt?", "Welches Werk wurde von Personen geheiratet von Jonathan Hensleigh entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jonathan_Hensleigh> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Mary Anne MacLeod Trump entwickelt?", "Was wurde von Personen geheiratet von Mary Anne MacLeod Trump entwickelt?", "Welche Werke werden von Personen geheiratet von Mary Anne MacLeod Trump entwickelt?", "Welche Werke wurden von Personen geheiratet von Mary Anne MacLeod Trump entwickelt?", "Welches Werk wird von Personen geheiratet von Mary Anne MacLeod Trump entwickelt?", "Welches Werk wurde von Personen geheiratet von Mary Anne MacLeod Trump entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mary_Anne_MacLeod_Trump> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Arlene_Klasky entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Arlene_Klasky entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Arlene_Klasky entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Arlene_Klasky entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Arlene_Klasky entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Arlene_Klasky entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Arlene_Klasky> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Cheryl_Saban entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Cheryl_Saban entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Cheryl_Saban entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Cheryl_Saban entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Cheryl_Saban entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Cheryl_Saban entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Cheryl_Saban> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Soleil Moon Frye entwickelt?", "Was wurde von Personen geheiratet von Soleil Moon Frye entwickelt?", "Welche Werke werden von Personen geheiratet von Soleil Moon Frye entwickelt?", "Welche Werke wurden von Personen geheiratet von Soleil Moon Frye entwickelt?", "Welches Werk wird von Personen geheiratet von Soleil Moon Frye entwickelt?", "Welches Werk wurde von Personen geheiratet von Soleil Moon Frye entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Soleil_Moon_Frye> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Constance Dowling entwickelt?", "Was wurde von Personen geheiratet von Constance Dowling entwickelt?", "Welche Werke werden von Personen geheiratet von Constance Dowling entwickelt?", "Welche Werke wurden von Personen geheiratet von Constance Dowling entwickelt?", "Welches Werk wird von Personen geheiratet von Constance Dowling entwickelt?", "Welches Werk wurde von Personen geheiratet von Constance Dowling entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Constance_Dowling> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Natasha_Halevi entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Natasha_Halevi entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Natasha_Halevi entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Natasha_Halevi entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Natasha_Halevi entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Natasha_Halevi entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Natasha_Halevi> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Eden Riegel entwickelt?", "Was wurde von Personen geheiratet von Eden Riegel entwickelt?", "Welche Werke werden von Personen geheiratet von Eden Riegel entwickelt?", "Welche Werke wurden von Personen geheiratet von Eden Riegel entwickelt?", "Welches Werk wird von Personen geheiratet von Eden Riegel entwickelt?", "Welches Werk wurde von Personen geheiratet von Eden Riegel entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Eden_Riegel> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Scott Weinger entwickelt?", "Was wurde von Personen geheiratet von Scott Weinger entwickelt?", "Welche Werke werden von Personen geheiratet von Scott Weinger entwickelt?", "Welche Werke wurden von Personen geheiratet von Scott Weinger entwickelt?", "Welches Werk wird von Personen geheiratet von Scott Weinger entwickelt?", "Welches Werk wurde von Personen geheiratet von Scott Weinger entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Scott_Weinger> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Katie_Ford_(CEO) entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Katie_Ford_(CEO) entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Katie_Ford_(CEO) entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Katie_Ford_(CEO) entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Katie_Ford_(CEO) entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Katie_Ford_(CEO) entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Katie_Ford_(CEO)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Gábor Csupó entwickelt?", "Was wurde von Personen geheiratet von Gábor Csupó entwickelt?", "Welche Werke werden von Personen geheiratet von Gábor Csupó entwickelt?", "Welche Werke wurden von Personen geheiratet von Gábor Csupó entwickelt?", "Welches Werk wird von Personen geheiratet von Gábor Csupó entwickelt?", "Welches Werk wurde von Personen geheiratet von Gábor Csupó entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gábor_Csupó> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Estelle_Lefébure entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Estelle_Lefébure entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Estelle_Lefébure entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Estelle_Lefébure entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Estelle_Lefébure entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Estelle_Lefébure entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Estelle_Lefébure> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Laetitia_Garriott_de_Cayeux entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Laetitia_Garriott_de_Cayeux entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Laetitia_Garriott_de_Cayeux entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Laetitia_Garriott_de_Cayeux entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Laetitia_Garriott_de_Cayeux entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Laetitia_Garriott_de_Cayeux entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Laetitia_Garriott_de_Cayeux> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Rosanna_Huffman entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Rosanna_Huffman entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Rosanna_Huffman entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Rosanna_Huffman entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Rosanna_Huffman entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Rosanna_Huffman entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rosanna_Huffman> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Lorraine_Adams entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Lorraine_Adams entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Lorraine_Adams entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Lorraine_Adams entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Lorraine_Adams entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Lorraine_Adams entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lorraine_Adams> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Giannina_Facio entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Giannina_Facio entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Giannina_Facio entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Giannina_Facio entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Giannina_Facio entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Giannina_Facio entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Giannina_Facio> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Erik_Stocklin entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Erik_Stocklin entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Erik_Stocklin entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Erik_Stocklin entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Erik_Stocklin entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Erik_Stocklin entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Erik_Stocklin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Hanna_Azoulay_Hasfari entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Hanna_Azoulay_Hasfari entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Hanna_Azoulay_Hasfari entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Hanna_Azoulay_Hasfari entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Hanna_Azoulay_Hasfari entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Hanna_Azoulay_Hasfari entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Hanna_Azoulay_Hasfari> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Emmanuelle Arsan entwickelt?", "Was wurde von Personen geheiratet von Emmanuelle Arsan entwickelt?", "Welche Werke werden von Personen geheiratet von Emmanuelle Arsan entwickelt?", "Welche Werke wurden von Personen geheiratet von Emmanuelle Arsan entwickelt?", "Welches Werk wird von Personen geheiratet von Emmanuelle Arsan entwickelt?", "Welches Werk wurde von Personen geheiratet von Emmanuelle Arsan entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Emmanuelle_Arsan> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Daniela_Simpson entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Daniela_Simpson entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Daniela_Simpson entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Daniela_Simpson entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Daniela_Simpson entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Daniela_Simpson entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Daniela_Simpson> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Lindsay Price entwickelt?", "Was wurde von Personen geheiratet von Lindsay Price entwickelt?", "Welche Werke werden von Personen geheiratet von Lindsay Price entwickelt?", "Welche Werke wurden von Personen geheiratet von Lindsay Price entwickelt?", "Welches Werk wird von Personen geheiratet von Lindsay Price entwickelt?", "Welches Werk wurde von Personen geheiratet von Lindsay Price entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lindsay_Price> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Sikes_Yorkin entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Sikes_Yorkin entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Sikes_Yorkin entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Sikes_Yorkin entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Sikes_Yorkin entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Cynthia_Sikes_Yorkin entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Cynthia_Sikes_Yorkin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Peg_Yorkin entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Peg_Yorkin entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Peg_Yorkin entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Peg_Yorkin entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Peg_Yorkin entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Peg_Yorkin entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Peg_Yorkin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Zsa Zsa Gabor entwickelt?", "Was wurde von Personen geheiratet von Zsa Zsa Gabor entwickelt?", "Welche Werke werden von Personen geheiratet von Zsa Zsa Gabor entwickelt?", "Welche Werke wurden von Personen geheiratet von Zsa Zsa Gabor entwickelt?", "Welches Werk wird von Personen geheiratet von Zsa Zsa Gabor entwickelt?", "Welches Werk wurde von Personen geheiratet von Zsa Zsa Gabor entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Zsa_Zsa_Gabor> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Samira Wiley entwickelt?", "Was wurde von Personen geheiratet von Samira Wiley entwickelt?", "Welche Werke werden von Personen geheiratet von Samira Wiley entwickelt?", "Welche Werke wurden von Personen geheiratet von Samira Wiley entwickelt?", "Welches Werk wird von Personen geheiratet von Samira Wiley entwickelt?", "Welches Werk wurde von Personen geheiratet von Samira Wiley entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Samira_Wiley> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von Lauren Faust entwickelt?", "Was wurde von Personen geheiratet von Lauren Faust entwickelt?", "Welche Werke werden von Personen geheiratet von Lauren Faust entwickelt?", "Welche Werke wurden von Personen geheiratet von Lauren Faust entwickelt?", "Welches Werk wird von Personen geheiratet von Lauren Faust entwickelt?", "Welches Werk wurde von Personen geheiratet von Lauren Faust entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lauren_Faust> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Patricia_Marshall entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Patricia_Marshall entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Patricia_Marshall entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Patricia_Marshall entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Patricia_Marshall entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Patricia_Marshall entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Patricia_Marshall> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "22",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "WORK",
    "frameType" : "APP",
    "sentences" : [ "Was wird von Personen geheiratet von http://dbpedia.org/resource/Mary_French_Rockefeller entwickelt?", "Was wurde von Personen geheiratet von http://dbpedia.org/resource/Mary_French_Rockefeller entwickelt?", "Welche Werke werden von Personen geheiratet von http://dbpedia.org/resource/Mary_French_Rockefeller entwickelt?", "Welche Werke wurden von Personen geheiratet von http://dbpedia.org/resource/Mary_French_Rockefeller entwickelt?", "Welches Werk wird von Personen geheiratet von http://dbpedia.org/resource/Mary_French_Rockefeller entwickelt?", "Welches Werk wurde von Personen geheiratet von http://dbpedia.org/resource/Mary_French_Rockefeller entwickelt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/developer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mary_French_Rockefeller> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Matt_Vogel_(puppeteer) gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Matt_Vogel_(puppeteer) gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Matt_Vogel_(puppeteer) gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Matt_Vogel_(puppeteer) gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Matt_Vogel_(puppeteer) gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Matt_Vogel_(puppeteer) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Matt_Vogel_(puppeteer)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Steve_Whitmire gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Steve_Whitmire gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Steve_Whitmire gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Steve_Whitmire gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Steve_Whitmire gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Steve_Whitmire gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Steve_Whitmire>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von Madelaine Petsch gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von Madelaine Petsch gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von Madelaine Petsch gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von Madelaine Petsch gespielt?", "Wer wird von fiktive Charaktere gespielt von Madelaine Petsch gespielt?", "Wer wurde von fiktive Charaktere gespielt von Madelaine Petsch gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Madelaine_Petsch>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von Es (2017) gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von Es (2017) gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von Es (2017) gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von Es (2017) gespielt?", "Wer wird von fiktive Charaktere gespielt von Es (2017) gespielt?", "Wer wurde von fiktive Charaktere gespielt von Es (2017) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/It_(2017_film)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von Stephen Kings Es gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von Stephen Kings Es gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von Stephen Kings Es gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von Stephen Kings Es gespielt?", "Wer wird von fiktive Charaktere gespielt von Stephen Kings Es gespielt?", "Wer wurde von fiktive Charaktere gespielt von Stephen Kings Es gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/It_(miniseries)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von Es Kapitel 2 gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von Es Kapitel 2 gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von Es Kapitel 2 gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von Es Kapitel 2 gespielt?", "Wer wird von fiktive Charaktere gespielt von Es Kapitel 2 gespielt?", "Wer wurde von fiktive Charaktere gespielt von Es Kapitel 2 gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/It_Chapter_Two>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von Jackson Robert Scott gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von Jackson Robert Scott gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von Jackson Robert Scott gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von Jackson Robert Scott gespielt?", "Wer wird von fiktive Charaktere gespielt von Jackson Robert Scott gespielt?", "Wer wurde von fiktive Charaktere gespielt von Jackson Robert Scott gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jackson_Robert_Scott>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tony_Dakota gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tony_Dakota gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tony_Dakota gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tony_Dakota gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tony_Dakota gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tony_Dakota gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Tony_Dakota>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Akira_Ohashi gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Akira_Ohashi gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Akira_Ohashi gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Akira_Ohashi gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Akira_Ohashi gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Akira_Ohashi gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Akira_Ohashi>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Hirofumi_Fukuzawa gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Hirofumi_Fukuzawa gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Hirofumi_Fukuzawa gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Hirofumi_Fukuzawa gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Hirofumi_Fukuzawa gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Hirofumi_Fukuzawa gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Hirofumi_Fukuzawa>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Teruo_Aragaki gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Teruo_Aragaki gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Teruo_Aragaki gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Teruo_Aragaki gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Teruo_Aragaki gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Teruo_Aragaki gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Teruo_Aragaki>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Mary_Poppins_(character) gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Mary_Poppins_(character) gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Mary_Poppins_(character) gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Mary_Poppins_(character) gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Mary_Poppins_(character) gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Mary_Poppins_(character) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mary_Poppins_(character)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Debi_Derryberry gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Debi_Derryberry gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Debi_Derryberry gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Debi_Derryberry gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Debi_Derryberry gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Debi_Derryberry gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Debi_Derryberry>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Emilija_Baranac gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Emilija_Baranac gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Emilija_Baranac gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Emilija_Baranac gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Emilija_Baranac gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Emilija_Baranac gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Emilija_Baranac>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von Kevin Clash gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von Kevin Clash gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von Kevin Clash gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von Kevin Clash gespielt?", "Wer wird von fiktive Charaktere gespielt von Kevin Clash gespielt?", "Wer wurde von fiktive Charaktere gespielt von Kevin Clash gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kevin_Clash>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von Elmo (Sesamstraße) gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von Elmo (Sesamstraße) gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von Elmo (Sesamstraße) gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von Elmo (Sesamstraße) gespielt?", "Wer wird von fiktive Charaktere gespielt von Elmo (Sesamstraße) gespielt?", "Wer wurde von fiktive Charaktere gespielt von Elmo (Sesamstraße) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Elmo>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Ryan_Dillon gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Ryan_Dillon gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Ryan_Dillon gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Ryan_Dillon gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Ryan_Dillon gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Ryan_Dillon gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ryan_Dillon>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "23",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tonya_Williams gespielt?", "Welche fiktiven Charaktere wurden von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tonya_Williams gespielt?", "Welcher fiktive Charakter wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tonya_Williams gespielt?", "Welcher fiktive Charakter wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tonya_Williams gespielt?", "Wer wird von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tonya_Williams gespielt?", "Wer wurde von fiktive Charaktere gespielt von http://dbpedia.org/resource/Tonya_Williams gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Tonya_Williams>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Lucille Ball gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Lucille Ball gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Lucille Ball gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Lucille Ball gespielt?", "Wer wird von Personen geheiratet von Lucille Ball gespielt?", "Wer wurde von Personen geheiratet von Lucille Ball gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucille_Ball> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Gordon Scott (Schauspieler) gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Gordon Scott (Schauspieler) gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Gordon Scott (Schauspieler) gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Gordon Scott (Schauspieler) gespielt?", "Wer wird von Personen geheiratet von Gordon Scott (Schauspieler) gespielt?", "Wer wurde von Personen geheiratet von Gordon Scott (Schauspieler) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gordon_Scott> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Rachel Rosenthal gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Rachel Rosenthal gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Rachel Rosenthal gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Rachel Rosenthal gespielt?", "Wer wird von Personen geheiratet von Rachel Rosenthal gespielt?", "Wer wurde von Personen geheiratet von Rachel Rosenthal gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rachel_Rosenthal> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Alan Halsall gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Alan Halsall gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Alan Halsall gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Alan Halsall gespielt?", "Wer wird von Personen geheiratet von Alan Halsall gespielt?", "Wer wurde von Personen geheiratet von Alan Halsall gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alan_Halsall> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Alan Thicke gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Alan Thicke gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Alan Thicke gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Alan Thicke gespielt?", "Wer wird von Personen geheiratet von Alan Thicke gespielt?", "Wer wurde von Personen geheiratet von Alan Thicke gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alan_Thicke> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Alec Baldwin gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Alec Baldwin gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Alec Baldwin gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Alec Baldwin gespielt?", "Wer wird von Personen geheiratet von Alec Baldwin gespielt?", "Wer wurde von Personen geheiratet von Alec Baldwin gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alec_Baldwin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Cecilia Nilsson (Schauspielerin) gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Cecilia Nilsson (Schauspielerin) gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Cecilia Nilsson (Schauspielerin) gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Cecilia Nilsson (Schauspielerin) gespielt?", "Wer wird von Personen geheiratet von Cecilia Nilsson (Schauspielerin) gespielt?", "Wer wurde von Personen geheiratet von Cecilia Nilsson (Schauspielerin) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Cecilia_Nilsson_(actress)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Chelsea Noble gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Chelsea Noble gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Chelsea Noble gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Chelsea Noble gespielt?", "Wer wird von Personen geheiratet von Chelsea Noble gespielt?", "Wer wurde von Personen geheiratet von Chelsea Noble gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chelsea_Noble> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Florenz Ziegfeld junior gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Florenz Ziegfeld junior gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Florenz Ziegfeld junior gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Florenz Ziegfeld junior gespielt?", "Wer wird von Personen geheiratet von Florenz Ziegfeld junior gespielt?", "Wer wurde von Personen geheiratet von Florenz Ziegfeld junior gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Florenz_Ziegfeld_Jr.> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Noah Bean gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Noah Bean gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Noah Bean gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Noah Bean gespielt?", "Wer wird von Personen geheiratet von Noah Bean gespielt?", "Wer wurde von Personen geheiratet von Noah Bean gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Noah_Bean> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Noah Danby gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Noah Danby gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Noah Danby gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Noah Danby gespielt?", "Wer wird von Personen geheiratet von Noah Danby gespielt?", "Wer wurde von Personen geheiratet von Noah Danby gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Noah_Danby> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Touriya Haoud gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Touriya Haoud gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Touriya Haoud gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Touriya Haoud gespielt?", "Wer wird von Personen geheiratet von Touriya Haoud gespielt?", "Wer wurde von Personen geheiratet von Touriya Haoud gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Touriya_Haoud> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Camilla Dallerup gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Camilla Dallerup gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Camilla Dallerup gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Camilla Dallerup gespielt?", "Wer wird von Personen geheiratet von Camilla Dallerup gespielt?", "Wer wurde von Personen geheiratet von Camilla Dallerup gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Camilla_Sacre-Dallerup> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Carmine Giovinazzo gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Carmine Giovinazzo gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Carmine Giovinazzo gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Carmine Giovinazzo gespielt?", "Wer wird von Personen geheiratet von Carmine Giovinazzo gespielt?", "Wer wurde von Personen geheiratet von Carmine Giovinazzo gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carmine_Giovinazzo> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Chris Evans (Moderator) gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Chris Evans (Moderator) gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Chris Evans (Moderator) gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Chris Evans (Moderator) gespielt?", "Wer wird von Personen geheiratet von Chris Evans (Moderator) gespielt?", "Wer wurde von Personen geheiratet von Chris Evans (Moderator) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chris_Evans_(presenter)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Christie Brinkley gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Christie Brinkley gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Christie Brinkley gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Christie Brinkley gespielt?", "Wer wird von Personen geheiratet von Christie Brinkley gespielt?", "Wer wurde von Personen geheiratet von Christie Brinkley gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christie_Brinkley> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Christopher Lambert gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Christopher Lambert gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Christopher Lambert gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Christopher Lambert gespielt?", "Wer wird von Personen geheiratet von Christopher Lambert gespielt?", "Wer wurde von Personen geheiratet von Christopher Lambert gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christopher_Lambert> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Clarence Williams III gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Clarence Williams III gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Clarence Williams III gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Clarence Williams III gespielt?", "Wer wird von Personen geheiratet von Clarence Williams III gespielt?", "Wer wurde von Personen geheiratet von Clarence Williams III gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Clarence_Williams_III> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Garfield Morgan gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Garfield Morgan gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Garfield Morgan gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Garfield Morgan gespielt?", "Wer wird von Personen geheiratet von Garfield Morgan gespielt?", "Wer wurde von Personen geheiratet von Garfield Morgan gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Garfield_Morgan> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Gary Oldman gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Gary Oldman gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Gary Oldman gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Gary Oldman gespielt?", "Wer wird von Personen geheiratet von Gary Oldman gespielt?", "Wer wurde von Personen geheiratet von Gary Oldman gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gary_Oldman> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von George Hearn gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von George Hearn gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von George Hearn gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von George Hearn gespielt?", "Wer wird von Personen geheiratet von George Hearn gespielt?", "Wer wurde von Personen geheiratet von George Hearn gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Hearn> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Jennifer Aniston gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Jennifer Aniston gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Jennifer Aniston gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Jennifer Aniston gespielt?", "Wer wird von Personen geheiratet von Jennifer Aniston gespielt?", "Wer wurde von Personen geheiratet von Jennifer Aniston gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jennifer_Aniston> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Jennifer Esposito gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Jennifer Esposito gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Jennifer Esposito gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Jennifer Esposito gespielt?", "Wer wird von Personen geheiratet von Jennifer Esposito gespielt?", "Wer wurde von Personen geheiratet von Jennifer Esposito gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jennifer_Esposito> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Jennifer Schwalbach Smith gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Jennifer Schwalbach Smith gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Jennifer Schwalbach Smith gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Jennifer Schwalbach Smith gespielt?", "Wer wird von Personen geheiratet von Jennifer Schwalbach Smith gespielt?", "Wer wurde von Personen geheiratet von Jennifer Schwalbach Smith gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jennifer_Schwalbach_Smith> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Joan Blondell gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Joan Blondell gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Joan Blondell gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Joan Blondell gespielt?", "Wer wird von Personen geheiratet von Joan Blondell gespielt?", "Wer wurde von Personen geheiratet von Joan Blondell gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Joan_Blondell> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Joanne Whalley gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Joanne Whalley gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Joanne Whalley gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Joanne Whalley gespielt?", "Wer wird von Personen geheiratet von Joanne Whalley gespielt?", "Wer wurde von Personen geheiratet von Joanne Whalley gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Joanne_Whalley> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von John Billingsley gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von John Billingsley gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von John Billingsley gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von John Billingsley gespielt?", "Wer wird von Personen geheiratet von John Billingsley gespielt?", "Wer wurde von Personen geheiratet von John Billingsley gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_Billingsley> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von John Malkovich gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von John Malkovich gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von John Malkovich gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von John Malkovich gespielt?", "Wer wird von Personen geheiratet von John Malkovich gespielt?", "Wer wurde von Personen geheiratet von John Malkovich gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_Malkovich> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Katherine LaNasa gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Katherine LaNasa gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Katherine LaNasa gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Katherine LaNasa gespielt?", "Wer wird von Personen geheiratet von Katherine LaNasa gespielt?", "Wer wurde von Personen geheiratet von Katherine LaNasa gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Katherine_LaNasa> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Keith Larsen gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Keith Larsen gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Keith Larsen gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Keith Larsen gespielt?", "Wer wird von Personen geheiratet von Keith Larsen gespielt?", "Wer wurde von Personen geheiratet von Keith Larsen gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Keith_Larsen> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Ken Campbell gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Ken Campbell gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Ken Campbell gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Ken Campbell gespielt?", "Wer wird von Personen geheiratet von Ken Campbell gespielt?", "Wer wurde von Personen geheiratet von Ken Campbell gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ken_Campbell> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Zach Gilford gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Zach Gilford gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Zach Gilford gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Zach Gilford gespielt?", "Wer wird von Personen geheiratet von Zach Gilford gespielt?", "Wer wurde von Personen geheiratet von Zach Gilford gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Zach_Gilford> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Michelle Phillips gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Michelle Phillips gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Michelle Phillips gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Michelle Phillips gespielt?", "Wer wird von Personen geheiratet von Michelle Phillips gespielt?", "Wer wurde von Personen geheiratet von Michelle Phillips gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Michelle_Phillips> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Ryan Reynolds gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Ryan Reynolds gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Ryan Reynolds gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Ryan Reynolds gespielt?", "Wer wird von Personen geheiratet von Ryan Reynolds gespielt?", "Wer wurde von Personen geheiratet von Ryan Reynolds gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ryan_Reynolds> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Franco Nero gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Franco Nero gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Franco Nero gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Franco Nero gespielt?", "Wer wird von Personen geheiratet von Franco Nero gespielt?", "Wer wurde von Personen geheiratet von Franco Nero gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Franco_Nero> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Gustaw Holoubek gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Gustaw Holoubek gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Gustaw Holoubek gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Gustaw Holoubek gespielt?", "Wer wird von Personen geheiratet von Gustaw Holoubek gespielt?", "Wer wurde von Personen geheiratet von Gustaw Holoubek gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gustaw_Holoubek> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Hal Holbrook gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Hal Holbrook gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Hal Holbrook gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Hal Holbrook gespielt?", "Wer wird von Personen geheiratet von Hal Holbrook gespielt?", "Wer wurde von Personen geheiratet von Hal Holbrook gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Hal_Holbrook> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Jack Wagner gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Jack Wagner gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Jack Wagner gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Jack Wagner gespielt?", "Wer wird von Personen geheiratet von Jack Wagner gespielt?", "Wer wurde von Personen geheiratet von Jack Wagner gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jack_Wagner_(actor)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Jane Kaczmarek gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Jane Kaczmarek gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Jane Kaczmarek gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Jane Kaczmarek gespielt?", "Wer wird von Personen geheiratet von Jane Kaczmarek gespielt?", "Wer wurde von Personen geheiratet von Jane Kaczmarek gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jane_Kaczmarek> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Jane Powell gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Jane Powell gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Jane Powell gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Jane Powell gespielt?", "Wer wird von Personen geheiratet von Jane Powell gespielt?", "Wer wurde von Personen geheiratet von Jane Powell gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jane_Powell> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Sebastian Roché gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Sebastian Roché gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Sebastian Roché gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Sebastian Roché gespielt?", "Wer wird von Personen geheiratet von Sebastian Roché gespielt?", "Wer wurde von Personen geheiratet von Sebastian Roché gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sebastian_Roché> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Amy Landecker gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Amy Landecker gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Amy Landecker gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Amy Landecker gespielt?", "Wer wird von Personen geheiratet von Amy Landecker gespielt?", "Wer wurde von Personen geheiratet von Amy Landecker gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Amy_Landecker> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Andrew Taylor (Künstler) gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Andrew Taylor (Künstler) gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Andrew Taylor (Künstler) gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Andrew Taylor (Künstler) gespielt?", "Wer wird von Personen geheiratet von Andrew Taylor (Künstler) gespielt?", "Wer wurde von Personen geheiratet von Andrew Taylor (Künstler) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Andrew_Taylor_(painter)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Angelina Jolie gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Angelina Jolie gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Angelina Jolie gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Angelina Jolie gespielt?", "Wer wird von Personen geheiratet von Angelina Jolie gespielt?", "Wer wurde von Personen geheiratet von Angelina Jolie gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Angelina_Jolie> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Anthony Havelock-Allan gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Anthony Havelock-Allan gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Anthony Havelock-Allan gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Anthony Havelock-Allan gespielt?", "Wer wird von Personen geheiratet von Anthony Havelock-Allan gespielt?", "Wer wurde von Personen geheiratet von Anthony Havelock-Allan gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Anthony_Havelock-Allan> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Aretha Franklin gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Aretha Franklin gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Aretha Franklin gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Aretha Franklin gespielt?", "Wer wird von Personen geheiratet von Aretha Franklin gespielt?", "Wer wurde von Personen geheiratet von Aretha Franklin gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Aretha_Franklin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Audrey Christie gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Audrey Christie gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Audrey Christie gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Audrey Christie gespielt?", "Wer wird von Personen geheiratet von Audrey Christie gespielt?", "Wer wurde von Personen geheiratet von Audrey Christie gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Audrey_Christie> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Olga Schoberová gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Olga Schoberová gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Olga Schoberová gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Olga Schoberová gespielt?", "Wer wird von Personen geheiratet von Olga Schoberová gespielt?", "Wer wurde von Personen geheiratet von Olga Schoberová gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Olga_Schoberová> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Owain Yeoman gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Owain Yeoman gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Owain Yeoman gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Owain Yeoman gespielt?", "Wer wird von Personen geheiratet von Owain Yeoman gespielt?", "Wer wurde von Personen geheiratet von Owain Yeoman gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Owain_Yeoman> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Rebecca Breeds gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Rebecca Breeds gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Rebecca Breeds gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Rebecca Breeds gespielt?", "Wer wird von Personen geheiratet von Rebecca Breeds gespielt?", "Wer wurde von Personen geheiratet von Rebecca Breeds gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rebecca_Breeds> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Adam Rayner gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Adam Rayner gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Adam Rayner gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Adam Rayner gespielt?", "Wer wird von Personen geheiratet von Adam Rayner gespielt?", "Wer wurde von Personen geheiratet von Adam Rayner gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Adam_Rayner> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Bruce Paltrow gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Bruce Paltrow gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Bruce Paltrow gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Bruce Paltrow gespielt?", "Wer wird von Personen geheiratet von Bruce Paltrow gespielt?", "Wer wurde von Personen geheiratet von Bruce Paltrow gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bruce_Paltrow> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Corey Feldman gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Corey Feldman gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Corey Feldman gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Corey Feldman gespielt?", "Wer wird von Personen geheiratet von Corey Feldman gespielt?", "Wer wurde von Personen geheiratet von Corey Feldman gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Corey_Feldman> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Courtney Ford gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Courtney Ford gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Courtney Ford gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Courtney Ford gespielt?", "Wer wird von Personen geheiratet von Courtney Ford gespielt?", "Wer wurde von Personen geheiratet von Courtney Ford gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Courtney_Ford> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Cynda Williams gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Cynda Williams gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Cynda Williams gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Cynda Williams gespielt?", "Wer wird von Personen geheiratet von Cynda Williams gespielt?", "Wer wurde von Personen geheiratet von Cynda Williams gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Cynda_Williams> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Laurence Fox gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Laurence Fox gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Laurence Fox gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Laurence Fox gespielt?", "Wer wird von Personen geheiratet von Laurence Fox gespielt?", "Wer wurde von Personen geheiratet von Laurence Fox gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Laurence_Fox> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Daria Halprin gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Daria Halprin gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Daria Halprin gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Daria Halprin gespielt?", "Wer wird von Personen geheiratet von Daria Halprin gespielt?", "Wer wurde von Personen geheiratet von Daria Halprin gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Daria_Halprin> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von David Walton (Schauspieler) gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von David Walton (Schauspieler) gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von David Walton (Schauspieler) gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von David Walton (Schauspieler) gespielt?", "Wer wird von Personen geheiratet von David Walton (Schauspieler) gespielt?", "Wer wurde von Personen geheiratet von David Walton (Schauspieler) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/David_Walton_(actor)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Dax Shepard gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Dax Shepard gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Dax Shepard gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Dax Shepard gespielt?", "Wer wird von Personen geheiratet von Dax Shepard gespielt?", "Wer wurde von Personen geheiratet von Dax Shepard gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Dax_Shepard> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Paul Wegener gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Paul Wegener gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Paul Wegener gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Paul Wegener gespielt?", "Wer wird von Personen geheiratet von Paul Wegener gespielt?", "Wer wurde von Personen geheiratet von Paul Wegener gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Paul_Wegener> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Peter Gilmore gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Peter Gilmore gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Peter Gilmore gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Peter Gilmore gespielt?", "Wer wird von Personen geheiratet von Peter Gilmore gespielt?", "Wer wurde von Personen geheiratet von Peter Gilmore gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Peter_Gilmore> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Peter Sarsgaard gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Peter Sarsgaard gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Peter Sarsgaard gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Peter Sarsgaard gespielt?", "Wer wird von Personen geheiratet von Peter Sarsgaard gespielt?", "Wer wurde von Personen geheiratet von Peter Sarsgaard gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Peter_Sarsgaard> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Robert G. Tapert gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Robert G. Tapert gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Robert G. Tapert gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Robert G. Tapert gespielt?", "Wer wird von Personen geheiratet von Robert G. Tapert gespielt?", "Wer wurde von Personen geheiratet von Robert G. Tapert gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Robert_Tapert> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Rose Leslie gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Rose Leslie gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Rose Leslie gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Rose Leslie gespielt?", "Wer wird von Personen geheiratet von Rose Leslie gespielt?", "Wer wurde von Personen geheiratet von Rose Leslie gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rose_Leslie> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Sheila Gish gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Sheila Gish gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Sheila Gish gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Sheila Gish gespielt?", "Wer wird von Personen geheiratet von Sheila Gish gespielt?", "Wer wurde von Personen geheiratet von Sheila Gish gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Sheila_Gish> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Silvana Gallardo gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Silvana Gallardo gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Silvana Gallardo gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Silvana Gallardo gespielt?", "Wer wird von Personen geheiratet von Silvana Gallardo gespielt?", "Wer wurde von Personen geheiratet von Silvana Gallardo gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Silvana_Gallardo> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Susan Yeagley gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Susan Yeagley gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Susan Yeagley gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Susan Yeagley gespielt?", "Wer wird von Personen geheiratet von Susan Yeagley gespielt?", "Wer wurde von Personen geheiratet von Susan Yeagley gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Susan_Yeagley> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Tamara Lees gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Tamara Lees gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Tamara Lees gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Tamara Lees gespielt?", "Wer wird von Personen geheiratet von Tamara Lees gespielt?", "Wer wurde von Personen geheiratet von Tamara Lees gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Tamara_Lees> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Tatjana Jewgenjewna Samoilowa gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Tatjana Jewgenjewna Samoilowa gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Tatjana Jewgenjewna Samoilowa gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Tatjana Jewgenjewna Samoilowa gespielt?", "Wer wird von Personen geheiratet von Tatjana Jewgenjewna Samoilowa gespielt?", "Wer wurde von Personen geheiratet von Tatjana Jewgenjewna Samoilowa gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Tatiana_Samoilova> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Virginia McKenna gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Virginia McKenna gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Virginia McKenna gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Virginia McKenna gespielt?", "Wer wird von Personen geheiratet von Virginia McKenna gespielt?", "Wer wurde von Personen geheiratet von Virginia McKenna gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Virginia_McKenna> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Ethan Hawke gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Ethan Hawke gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Ethan Hawke gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Ethan Hawke gespielt?", "Wer wird von Personen geheiratet von Ethan Hawke gespielt?", "Wer wurde von Personen geheiratet von Ethan Hawke gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ethan_Hawke> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Nick Jonas gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Nick Jonas gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Nick Jonas gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Nick Jonas gespielt?", "Wer wird von Personen geheiratet von Nick Jonas gespielt?", "Wer wurde von Personen geheiratet von Nick Jonas gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Nick_Jonas> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Phoebe Cates gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Phoebe Cates gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Phoebe Cates gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Phoebe Cates gespielt?", "Wer wird von Personen geheiratet von Phoebe Cates gespielt?", "Wer wurde von Personen geheiratet von Phoebe Cates gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Phoebe_Cates> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Phyllis Logan gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Phyllis Logan gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Phyllis Logan gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Phyllis Logan gespielt?", "Wer wird von Personen geheiratet von Phyllis Logan gespielt?", "Wer wurde von Personen geheiratet von Phyllis Logan gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Phyllis_Logan> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Pollyanna McIntosh gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Pollyanna McIntosh gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Pollyanna McIntosh gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Pollyanna McIntosh gespielt?", "Wer wird von Personen geheiratet von Pollyanna McIntosh gespielt?", "Wer wurde von Personen geheiratet von Pollyanna McIntosh gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Pollyanna_McIntosh> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Wayne Northrop gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Wayne Northrop gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Wayne Northrop gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Wayne Northrop gespielt?", "Wer wird von Personen geheiratet von Wayne Northrop gespielt?", "Wer wurde von Personen geheiratet von Wayne Northrop gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Wayne_Northrop> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Eleanor Powell gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Eleanor Powell gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Eleanor Powell gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Eleanor Powell gespielt?", "Wer wird von Personen geheiratet von Eleanor Powell gespielt?", "Wer wurde von Personen geheiratet von Eleanor Powell gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Eleanor_Powell> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Eliza Taylor gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Eliza Taylor gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Eliza Taylor gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Eliza Taylor gespielt?", "Wer wird von Personen geheiratet von Eliza Taylor gespielt?", "Wer wurde von Personen geheiratet von Eliza Taylor gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Eliza_Taylor> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Elizabeth Berridge gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Elizabeth Berridge gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Elizabeth Berridge gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Elizabeth Berridge gespielt?", "Wer wird von Personen geheiratet von Elizabeth Berridge gespielt?", "Wer wurde von Personen geheiratet von Elizabeth Berridge gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Elizabeth_Berridge_(actress)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Elvis Presley gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Elvis Presley gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Elvis Presley gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Elvis Presley gespielt?", "Wer wird von Personen geheiratet von Elvis Presley gespielt?", "Wer wurde von Personen geheiratet von Elvis Presley gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Elvis_Presley> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Herbert Berghof gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Herbert Berghof gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Herbert Berghof gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Herbert Berghof gespielt?", "Wer wird von Personen geheiratet von Herbert Berghof gespielt?", "Wer wurde von Personen geheiratet von Herbert Berghof gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Herbert_Berghof> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von John Pankow gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von John Pankow gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von John Pankow gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von John Pankow gespielt?", "Wer wird von Personen geheiratet von John Pankow gespielt?", "Wer wurde von Personen geheiratet von John Pankow gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_Pankow> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von John Profumo gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von John Profumo gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von John Profumo gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von John Profumo gespielt?", "Wer wird von Personen geheiratet von John Profumo gespielt?", "Wer wurde von Personen geheiratet von John Profumo gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_Profumo> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von José Ferrer gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von José Ferrer gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von José Ferrer gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von José Ferrer gespielt?", "Wer wird von Personen geheiratet von José Ferrer gespielt?", "Wer wurde von Personen geheiratet von José Ferrer gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/José_Ferrer> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von June Allyson gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von June Allyson gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von June Allyson gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von June Allyson gespielt?", "Wer wird von Personen geheiratet von June Allyson gespielt?", "Wer wurde von Personen geheiratet von June Allyson gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/June_Allyson> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Maurice Gibb gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Maurice Gibb gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Maurice Gibb gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Maurice Gibb gespielt?", "Wer wird von Personen geheiratet von Maurice Gibb gespielt?", "Wer wurde von Personen geheiratet von Maurice Gibb gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Maurice_Gibb> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Melanie Griffith gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Melanie Griffith gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Melanie Griffith gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Melanie Griffith gespielt?", "Wer wird von Personen geheiratet von Melanie Griffith gespielt?", "Wer wurde von Personen geheiratet von Melanie Griffith gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Melanie_Griffith> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Melissa Benoist gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Melissa Benoist gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Melissa Benoist gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Melissa Benoist gespielt?", "Wer wird von Personen geheiratet von Melissa Benoist gespielt?", "Wer wurde von Personen geheiratet von Melissa Benoist gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Melissa_Benoist> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Michael Brandon (Schauspieler) gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Michael Brandon (Schauspieler) gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Michael Brandon (Schauspieler) gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Michael Brandon (Schauspieler) gespielt?", "Wer wird von Personen geheiratet von Michael Brandon (Schauspieler) gespielt?", "Wer wurde von Personen geheiratet von Michael Brandon (Schauspieler) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Michael_Brandon> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Marcy Walker gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Marcy Walker gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Marcy Walker gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Marcy Walker gespielt?", "Wer wird von Personen geheiratet von Marcy Walker gespielt?", "Wer wurde von Personen geheiratet von Marcy Walker gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Marcy_Walker> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Margot Bennett (Schauspielerin) gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Margot Bennett (Schauspielerin) gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Margot Bennett (Schauspielerin) gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Margot Bennett (Schauspielerin) gespielt?", "Wer wird von Personen geheiratet von Margot Bennett (Schauspielerin) gespielt?", "Wer wurde von Personen geheiratet von Margot Bennett (Schauspielerin) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Margot_Bennett_(actress)> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Martin Cummins gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Martin Cummins gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Martin Cummins gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Martin Cummins gespielt?", "Wer wird von Personen geheiratet von Martin Cummins gespielt?", "Wer wurde von Personen geheiratet von Martin Cummins gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Martin_Cummins> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Timothy West (Schauspieler) gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Timothy West (Schauspieler) gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Timothy West (Schauspieler) gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Timothy West (Schauspieler) gespielt?", "Wer wird von Personen geheiratet von Timothy West (Schauspieler) gespielt?", "Wer wurde von Personen geheiratet von Timothy West (Schauspieler) gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Timothy_West> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Leticia Tish Cyrus gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Leticia Tish Cyrus gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Leticia Tish Cyrus gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Leticia Tish Cyrus gespielt?", "Wer wird von Personen geheiratet von Leticia Tish Cyrus gespielt?", "Wer wurde von Personen geheiratet von Leticia Tish Cyrus gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Tish_Cyrus> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von Tony Richardson gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von Tony Richardson gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von Tony Richardson gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von Tony Richardson gespielt?", "Wer wird von Personen geheiratet von Tony Richardson gespielt?", "Wer wurde von Personen geheiratet von Tony Richardson gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Tony_Richardson> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von http://dbpedia.org/resource/Luisa_Ranieri gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von http://dbpedia.org/resource/Luisa_Ranieri gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von http://dbpedia.org/resource/Luisa_Ranieri gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von http://dbpedia.org/resource/Luisa_Ranieri gespielt?", "Wer wird von Personen geheiratet von http://dbpedia.org/resource/Luisa_Ranieri gespielt?", "Wer wurde von Personen geheiratet von http://dbpedia.org/resource/Luisa_Ranieri gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Luisa_Ranieri> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von http://dbpedia.org/resource/Gloria_Carrá gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von http://dbpedia.org/resource/Gloria_Carrá gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von http://dbpedia.org/resource/Gloria_Carrá gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von http://dbpedia.org/resource/Gloria_Carrá gespielt?", "Wer wird von Personen geheiratet von http://dbpedia.org/resource/Gloria_Carrá gespielt?", "Wer wurde von Personen geheiratet von http://dbpedia.org/resource/Gloria_Carrá gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gloria_Carrá> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von http://dbpedia.org/resource/Gary_Morton gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von http://dbpedia.org/resource/Gary_Morton gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von http://dbpedia.org/resource/Gary_Morton gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von http://dbpedia.org/resource/Gary_Morton gespielt?", "Wer wird von Personen geheiratet von http://dbpedia.org/resource/Gary_Morton gespielt?", "Wer wurde von Personen geheiratet von http://dbpedia.org/resource/Gary_Morton gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gary_Morton> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von http://dbpedia.org/resource/Christopher_Horsey gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von http://dbpedia.org/resource/Christopher_Horsey gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von http://dbpedia.org/resource/Christopher_Horsey gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von http://dbpedia.org/resource/Christopher_Horsey gespielt?", "Wer wird von Personen geheiratet von http://dbpedia.org/resource/Christopher_Horsey gespielt?", "Wer wurde von Personen geheiratet von http://dbpedia.org/resource/Christopher_Horsey gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christopher_Horsey> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "24",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche fiktiven Charaktere werden von Personen geheiratet von http://dbpedia.org/resource/Mark_Bonnar gespielt?", "Welche fiktiven Charaktere wurden von Personen geheiratet von http://dbpedia.org/resource/Mark_Bonnar gespielt?", "Welcher fiktive Charakter wird von Personen geheiratet von http://dbpedia.org/resource/Mark_Bonnar gespielt?", "Welcher fiktive Charakter wurde von Personen geheiratet von http://dbpedia.org/resource/Mark_Bonnar gespielt?", "Wer wird von Personen geheiratet von http://dbpedia.org/resource/Mark_Bonnar gespielt?", "Wer wurde von Personen geheiratet von http://dbpedia.org/resource/Mark_Bonnar gespielt?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Mark_Bonnar> <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Luke Macfarlane geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Luke Macfarlane geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Luke Macfarlane geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Luke Macfarlane geheiratet?", "Wer wird von fiktive Charaktere gespielt von Luke Macfarlane geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Luke Macfarlane geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Luke_Macfarlane>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Lysette Anthony geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Lysette Anthony geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Lysette Anthony geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Lysette Anthony geheiratet?", "Wer wird von fiktive Charaktere gespielt von Lysette Anthony geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Lysette Anthony geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lysette_Anthony>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Maleficent – Die dunkle Fee geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Maleficent – Die dunkle Fee geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Maleficent – Die dunkle Fee geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Maleficent – Die dunkle Fee geheiratet?", "Wer wird von fiktive Charaktere gespielt von Maleficent – Die dunkle Fee geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Maleficent – Die dunkle Fee geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Maleficent_(film)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Lana Hutton Bowen-Judd geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Lana Hutton Bowen-Judd geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Lana Hutton Bowen-Judd geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Lana Hutton Bowen-Judd geheiratet?", "Wer wird von fiktive Charaktere gespielt von Lana Hutton Bowen-Judd geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Lana Hutton Bowen-Judd geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sara_Woods>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Billie Lourd geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Billie Lourd geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Billie Lourd geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Billie Lourd geheiratet?", "Wer wird von fiktive Charaktere gespielt von Billie Lourd geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Billie Lourd geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Billie_Lourd>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Dennis Franz geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Dennis Franz geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Dennis Franz geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Dennis Franz geheiratet?", "Wer wird von fiktive Charaktere gespielt von Dennis Franz geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Dennis Franz geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Dennis_Franz>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Descendants – Die Nachkommen geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Descendants – Die Nachkommen geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Descendants – Die Nachkommen geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Descendants – Die Nachkommen geheiratet?", "Wer wird von fiktive Charaktere gespielt von Descendants – Die Nachkommen geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Descendants – Die Nachkommen geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Descendants_(2015_film)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Diahann Carroll geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Diahann Carroll geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Diahann Carroll geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Diahann Carroll geheiratet?", "Wer wird von fiktive Charaktere gespielt von Diahann Carroll geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Diahann Carroll geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Diahann_Carroll>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Goran Višnjić geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Goran Višnjić geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Goran Višnjić geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Goran Višnjić geheiratet?", "Wer wird von fiktive Charaktere gespielt von Goran Višnjić geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Goran Višnjić geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Goran_Višnjić>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Grant Show geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Grant Show geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Grant Show geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Grant Show geheiratet?", "Wer wird von fiktive Charaktere gespielt von Grant Show geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Grant Show geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Grant_Show>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Greg Vaughan geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Greg Vaughan geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Greg Vaughan geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Greg Vaughan geheiratet?", "Wer wird von fiktive Charaktere gespielt von Greg Vaughan geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Greg Vaughan geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Greg_Vaughan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Khary Payton geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Khary Payton geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Khary Payton geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Khary Payton geheiratet?", "Wer wird von fiktive Charaktere gespielt von Khary Payton geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Khary Payton geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Khary_Payton>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Krista Allen geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Krista Allen geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Krista Allen geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Krista Allen geheiratet?", "Wer wird von fiktive Charaktere gespielt von Krista Allen geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Krista Allen geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Krista_Allen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Krista Tesreau geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Krista Tesreau geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Krista Tesreau geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Krista Tesreau geheiratet?", "Wer wird von fiktive Charaktere gespielt von Krista Tesreau geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Krista Tesreau geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Krista_Tesreau>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Kristin Chenoweth geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Kristin Chenoweth geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Kristin Chenoweth geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Kristin Chenoweth geheiratet?", "Wer wird von fiktive Charaktere gespielt von Kristin Chenoweth geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Kristin Chenoweth geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kristin_Chenoweth>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Prunella Scales geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Prunella Scales geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Prunella Scales geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Prunella Scales geheiratet?", "Wer wird von fiktive Charaktere gespielt von Prunella Scales geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Prunella Scales geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Prunella_Scales>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Alexander Beyer geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Alexander Beyer geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Alexander Beyer geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Alexander Beyer geheiratet?", "Wer wird von fiktive Charaktere gespielt von Alexander Beyer geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Alexander Beyer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Alexander_Beyer>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Catherine O’Hara geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Catherine O’Hara geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Catherine O’Hara geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Catherine O’Hara geheiratet?", "Wer wird von fiktive Charaktere gespielt von Catherine O’Hara geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Catherine O’Hara geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Catherine_O'Hara>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Catherine Zeta-Jones geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Catherine Zeta-Jones geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Catherine Zeta-Jones geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Catherine Zeta-Jones geheiratet?", "Wer wird von fiktive Charaktere gespielt von Catherine Zeta-Jones geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Catherine Zeta-Jones geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Catherine_Zeta-Jones>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Chad Michael Murray geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Chad Michael Murray geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Chad Michael Murray geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Chad Michael Murray geheiratet?", "Wer wird von fiktive Charaktere gespielt von Chad Michael Murray geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Chad Michael Murray geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Chad_Michael_Murray>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Charlton Heston geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Charlton Heston geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Charlton Heston geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Charlton Heston geheiratet?", "Wer wird von fiktive Charaktere gespielt von Charlton Heston geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Charlton Heston geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Charlton_Heston>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Noah Ringer geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Noah Ringer geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Noah Ringer geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Noah Ringer geheiratet?", "Wer wird von fiktive Charaktere gespielt von Noah Ringer geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Noah Ringer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Noah_Ringer>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Mitch Pileggi geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Mitch Pileggi geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Mitch Pileggi geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Mitch Pileggi geheiratet?", "Wer wird von fiktive Charaktere gespielt von Mitch Pileggi geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Mitch Pileggi geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mitch_Pileggi>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Nathalie Kelley geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Nathalie Kelley geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Nathalie Kelley geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Nathalie Kelley geheiratet?", "Wer wird von fiktive Charaktere gespielt von Nathalie Kelley geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Nathalie Kelley geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Nathalie_Kelley>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Barbara Crampton geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Barbara Crampton geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Barbara Crampton geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Barbara Crampton geheiratet?", "Wer wird von fiktive Charaktere gespielt von Barbara Crampton geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Barbara Crampton geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Barbara_Crampton>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Barbara Hershey geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Barbara Hershey geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Barbara Hershey geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Barbara Hershey geheiratet?", "Wer wird von fiktive Charaktere gespielt von Barbara Hershey geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Barbara Hershey geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Barbara_Hershey>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Carrie Fisher geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Carrie Fisher geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Carrie Fisher geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Carrie Fisher geheiratet?", "Wer wird von fiktive Charaktere gespielt von Carrie Fisher geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Carrie Fisher geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Carrie_Fisher>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Chris Pratt geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Chris Pratt geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Chris Pratt geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Chris Pratt geheiratet?", "Wer wird von fiktive Charaktere gespielt von Chris Pratt geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Chris Pratt geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Chris_Pratt>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Christian Serratos geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Christian Serratos geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Christian Serratos geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Christian Serratos geheiratet?", "Wer wird von fiktive Charaktere gespielt von Christian Serratos geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Christian Serratos geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Christian_Serratos>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Claude Jade geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Claude Jade geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Claude Jade geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Claude Jade geheiratet?", "Wer wird von fiktive Charaktere gespielt von Claude Jade geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Claude Jade geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Claude_Jade>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Giancarlo Giannini geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Giancarlo Giannini geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Giancarlo Giannini geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Giancarlo Giannini geheiratet?", "Wer wird von fiktive Charaktere gespielt von Giancarlo Giannini geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Giancarlo Giannini geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Giancarlo_Giannini>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Jeanine Mason geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Jeanine Mason geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Jeanine Mason geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Jeanine Mason geheiratet?", "Wer wird von fiktive Charaktere gespielt von Jeanine Mason geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Jeanine Mason geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jeanine_Mason>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Jennifer Garner geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Jennifer Garner geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Jennifer Garner geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Jennifer Garner geheiratet?", "Wer wird von fiktive Charaktere gespielt von Jennifer Garner geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Jennifer Garner geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jennifer_Garner>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Jimmy Smits geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Jimmy Smits geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Jimmy Smits geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Jimmy Smits geheiratet?", "Wer wird von fiktive Charaktere gespielt von Jimmy Smits geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Jimmy Smits geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jimmy_Smits>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Joey Luthman geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Joey Luthman geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Joey Luthman geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Joey Luthman geheiratet?", "Wer wird von fiktive Charaktere gespielt von Joey Luthman geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Joey Luthman geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Joey_Luthman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von John Goodman geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von John Goodman geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von John Goodman geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von John Goodman geheiratet?", "Wer wird von fiktive Charaktere gespielt von John Goodman geheiratet?", "Wer wurde von fiktive Charaktere gespielt von John Goodman geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/John_Goodman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Bebe Neuwirth geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Bebe Neuwirth geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Bebe Neuwirth geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Bebe Neuwirth geheiratet?", "Wer wird von fiktive Charaktere gespielt von Bebe Neuwirth geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Bebe Neuwirth geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Bebe_Neuwirth>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Betty White geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Betty White geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Betty White geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Betty White geheiratet?", "Wer wird von fiktive Charaktere gespielt von Betty White geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Betty White geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Betty_White>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Beverly Archer geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Beverly Archer geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Beverly Archer geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Beverly Archer geheiratet?", "Wer wird von fiktive Charaktere gespielt von Beverly Archer geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Beverly Archer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Beverly_Archer>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Kassie DePaiva geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Kassie DePaiva geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Kassie DePaiva geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Kassie DePaiva geheiratet?", "Wer wird von fiktive Charaktere gespielt von Kassie DePaiva geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Kassie DePaiva geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kassie_DePaiva>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Kathy Bates geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Kathy Bates geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Kathy Bates geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Kathy Bates geheiratet?", "Wer wird von fiktive Charaktere gespielt von Kathy Bates geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Kathy Bates geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kathy_Bates>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Ken Berry (Schauspieler) geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Ken Berry (Schauspieler) geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Ken Berry (Schauspieler) geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Ken Berry (Schauspieler) geheiratet?", "Wer wird von fiktive Charaktere gespielt von Ken Berry (Schauspieler) geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Ken Berry (Schauspieler) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ken_Berry>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Lexi Ainsworth geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Lexi Ainsworth geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Lexi Ainsworth geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Lexi Ainsworth geheiratet?", "Wer wird von fiktive Charaktere gespielt von Lexi Ainsworth geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Lexi Ainsworth geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lexi_Ainsworth>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Linda Evans geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Linda Evans geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Linda Evans geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Linda Evans geheiratet?", "Wer wird von fiktive Charaktere gespielt von Linda Evans geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Linda Evans geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Linda_Evans>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Lindsay Wagner geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Lindsay Wagner geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Lindsay Wagner geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Lindsay Wagner geheiratet?", "Wer wird von fiktive Charaktere gespielt von Lindsay Wagner geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Lindsay Wagner geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lindsay_Wagner>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Lindsey Morgan geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Lindsey Morgan geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Lindsey Morgan geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Lindsey Morgan geheiratet?", "Wer wird von fiktive Charaktere gespielt von Lindsey Morgan geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Lindsey Morgan geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lindsey_Morgan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Lisa Rinna geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Lisa Rinna geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Lisa Rinna geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Lisa Rinna geheiratet?", "Wer wird von fiktive Charaktere gespielt von Lisa Rinna geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Lisa Rinna geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Lisa_Rinna>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Teri Hatcher geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Teri Hatcher geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Teri Hatcher geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Teri Hatcher geheiratet?", "Wer wird von fiktive Charaktere gespielt von Teri Hatcher geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Teri Hatcher geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Teri_Hatcher>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Yvonne Strahovski geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Yvonne Strahovski geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Yvonne Strahovski geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Yvonne Strahovski geheiratet?", "Wer wird von fiktive Charaktere gespielt von Yvonne Strahovski geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Yvonne Strahovski geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Yvonne_Strahovski>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Kimberley Simms geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Kimberley Simms geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Kimberley Simms geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Kimberley Simms geheiratet?", "Wer wird von fiktive Charaktere gespielt von Kimberley Simms geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Kimberley Simms geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Kimberley_Simms>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Michael Jackson geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Michael Jackson geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Michael Jackson geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Michael Jackson geheiratet?", "Wer wird von fiktive Charaktere gespielt von Michael Jackson geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Michael Jackson geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michael_Jackson>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Michael Michele geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Michael Michele geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Michael Michele geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Michael Michele geheiratet?", "Wer wird von fiktive Charaktere gespielt von Michael Michele geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Michael Michele geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michael_Michele>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Michael Nader geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Michael Nader geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Michael Nader geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Michael Nader geheiratet?", "Wer wird von fiktive Charaktere gespielt von Michael Nader geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Michael Nader geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michael_Nader>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Michaela Conlin geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Michaela Conlin geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Michaela Conlin geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Michaela Conlin geheiratet?", "Wer wird von fiktive Charaktere gespielt von Michaela Conlin geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Michaela Conlin geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michaela_Conlin>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Michelle Clunie geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Michelle Clunie geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Michelle Clunie geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Michelle Clunie geheiratet?", "Wer wird von fiktive Charaktere gespielt von Michelle Clunie geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Michelle Clunie geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Michelle_Clunie>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Mili Avital geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Mili Avital geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Mili Avital geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Mili Avital geheiratet?", "Wer wird von fiktive Charaktere gespielt von Mili Avital geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Mili Avital geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Mili_Avital>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Rue McClanahan geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Rue McClanahan geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Rue McClanahan geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Rue McClanahan geheiratet?", "Wer wird von fiktive Charaktere gespielt von Rue McClanahan geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Rue McClanahan geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Rue_McClanahan>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Makyla Smith geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Makyla Smith geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Makyla Smith geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Makyla Smith geheiratet?", "Wer wird von fiktive Charaktere gespielt von Makyla Smith geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Makyla Smith geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Makyla_Smith>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Die Hexen von Oz geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Die Hexen von Oz geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Die Hexen von Oz geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Die Hexen von Oz geheiratet?", "Wer wird von fiktive Charaktere gespielt von Die Hexen von Oz geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Die Hexen von Oz geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Dorothy_and_the_Witches_of_Oz>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Dragonball Evolution geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Dragonball Evolution geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Dragonball Evolution geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Dragonball Evolution geheiratet?", "Wer wird von fiktive Charaktere gespielt von Dragonball Evolution geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Dragonball Evolution geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Dragonball_Evolution>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Drea de Matteo geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Drea de Matteo geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Drea de Matteo geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Drea de Matteo geheiratet?", "Wer wird von fiktive Charaktere gespielt von Drea de Matteo geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Drea de Matteo geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Drea_de_Matteo>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Children of Dune geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Children of Dune geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Children of Dune geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Children of Dune geheiratet?", "Wer wird von fiktive Charaktere gespielt von Children of Dune geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Children of Dune geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Frank_Herbert's_Children_of_Dune>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Hal Sparks geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Hal Sparks geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Hal Sparks geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Hal Sparks geheiratet?", "Wer wird von fiktive Charaktere gespielt von Hal Sparks geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Hal Sparks geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Hal_Sparks>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) geheiratet?", "Wer wird von fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Ian Carmichael (Schauspieler) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ian_Carmichael>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Ian Somerhalder geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Ian Somerhalder geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Ian Somerhalder geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Ian Somerhalder geheiratet?", "Wer wird von fiktive Charaktere gespielt von Ian Somerhalder geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Ian Somerhalder geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ian_Somerhalder>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Ingvild Deila geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Ingvild Deila geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Ingvild Deila geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Ingvild Deila geheiratet?", "Wer wird von fiktive Charaktere gespielt von Ingvild Deila geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Ingvild Deila geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ingvild_Deila>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Jack Huston geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Jack Huston geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Jack Huston geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Jack Huston geheiratet?", "Wer wird von fiktive Charaktere gespielt von Jack Huston geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Jack Huston geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jack_Huston>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Jack Wetherall geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Jack Wetherall geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Jack Wetherall geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Jack Wetherall geheiratet?", "Wer wird von fiktive Charaktere gespielt von Jack Wetherall geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Jack Wetherall geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jack_Wetherall>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Jackson Browne geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Jackson Browne geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Jackson Browne geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Jackson Browne geheiratet?", "Wer wird von fiktive Charaktere gespielt von Jackson Browne geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Jackson Browne geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jackson_Browne>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von James Patrick Stuart geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von James Patrick Stuart geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von James Patrick Stuart geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von James Patrick Stuart geheiratet?", "Wer wird von fiktive Charaktere gespielt von James Patrick Stuart geheiratet?", "Wer wurde von fiktive Charaktere gespielt von James Patrick Stuart geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/James_Patrick_Stuart>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Jason Behr geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Jason Behr geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Jason Behr geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Jason Behr geheiratet?", "Wer wird von fiktive Charaktere gespielt von Jason Behr geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Jason Behr geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jason_Behr>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Jayne Atkinson geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Jayne Atkinson geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Jayne Atkinson geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Jayne Atkinson geheiratet?", "Wer wird von fiktive Charaktere gespielt von Jayne Atkinson geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Jayne Atkinson geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Jayne_Atkinson>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Sarah Jessica Parker geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Sarah Jessica Parker geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Sarah Jessica Parker geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Sarah Jessica Parker geheiratet?", "Wer wird von fiktive Charaktere gespielt von Sarah Jessica Parker geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Sarah Jessica Parker geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sarah_Jessica_Parker>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk geheiratet?", "Wer wird von fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Sergei Fjodorowitsch Bondartschuk geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Sergei_Bondarchuk>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Amy Brenneman geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Amy Brenneman geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Amy Brenneman geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Amy Brenneman geheiratet?", "Wer wird von fiktive Charaktere gespielt von Amy Brenneman geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Amy Brenneman geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Amy_Brenneman>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Andy Griffith geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Andy Griffith geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Andy Griffith geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Andy Griffith geheiratet?", "Wer wird von fiktive Charaktere gespielt von Andy Griffith geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Andy Griffith geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Andy_Griffith>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Angela Kinsey geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Angela Kinsey geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Angela Kinsey geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Angela Kinsey geheiratet?", "Wer wird von fiktive Charaktere gespielt von Angela Kinsey geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Angela Kinsey geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Angela_Kinsey>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Angelina Jolie geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Angelina Jolie geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Angelina Jolie geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Angelina Jolie geheiratet?", "Wer wird von fiktive Charaktere gespielt von Angelina Jolie geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Angelina Jolie geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Angelina_Jolie>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Anjelica Huston geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Anjelica Huston geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Anjelica Huston geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Anjelica Huston geheiratet?", "Wer wird von fiktive Charaktere gespielt von Anjelica Huston geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Anjelica Huston geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anjelica_Huston>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von AnnaSophia Robb geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von AnnaSophia Robb geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von AnnaSophia Robb geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von AnnaSophia Robb geheiratet?", "Wer wird von fiktive Charaktere gespielt von AnnaSophia Robb geheiratet?", "Wer wurde von fiktive Charaktere gespielt von AnnaSophia Robb geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/AnnaSophia_Robb>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Anna Karina geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Anna Karina geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Anna Karina geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Anna Karina geheiratet?", "Wer wird von fiktive Charaktere gespielt von Anna Karina geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Anna Karina geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anna_Karina>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Annette Haven geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Annette Haven geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Annette Haven geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Annette Haven geheiratet?", "Wer wird von fiktive Charaktere gespielt von Annette Haven geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Annette Haven geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Annette_Haven>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Anthony Geary geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Anthony Geary geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Anthony Geary geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Anthony Geary geheiratet?", "Wer wird von fiktive Charaktere gespielt von Anthony Geary geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Anthony Geary geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anthony_Geary>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Anthony Hopkins geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Anthony Hopkins geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Anthony Hopkins geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Anthony Hopkins geheiratet?", "Wer wird von fiktive Charaktere gespielt von Anthony Hopkins geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Anthony Hopkins geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Anthony_Hopkins>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Arthur Darvill geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Arthur Darvill geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Arthur Darvill geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Arthur Darvill geheiratet?", "Wer wird von fiktive Charaktere gespielt von Arthur Darvill geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Arthur Darvill geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Arthur_Darvill>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Ashley Benson geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Ashley Benson geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Ashley Benson geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Ashley Benson geheiratet?", "Wer wird von fiktive Charaktere gespielt von Ashley Benson geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Ashley Benson geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ashley_Benson>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Ashley Peldon geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Ashley Peldon geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Ashley Peldon geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Ashley Peldon geheiratet?", "Wer wird von fiktive Charaktere gespielt von Ashley Peldon geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Ashley Peldon geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ashley_Peldon>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Oliver Jackson-Cohen geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Oliver Jackson-Cohen geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Oliver Jackson-Cohen geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Oliver Jackson-Cohen geheiratet?", "Wer wird von fiktive Charaktere gespielt von Oliver Jackson-Cohen geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Oliver Jackson-Cohen geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Oliver_Jackson-Cohen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Ramón Novarro geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Ramón Novarro geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Ramón Novarro geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Ramón Novarro geheiratet?", "Wer wird von fiktive Charaktere gespielt von Ramón Novarro geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Ramón Novarro geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ramon_Novarro>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Ray Bolger geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Ray Bolger geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Ray Bolger geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Ray Bolger geheiratet?", "Wer wird von fiktive Charaktere gespielt von Ray Bolger geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Ray Bolger geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Ray_Bolger>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Oz – Eine fantastische Welt geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Oz – Eine fantastische Welt geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Oz – Eine fantastische Welt geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Oz – Eine fantastische Welt geheiratet?", "Wer wird von fiktive Charaktere gespielt von Oz – Eine fantastische Welt geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Oz – Eine fantastische Welt geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Return_to_Oz>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Rhea Seehorn geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Rhea Seehorn geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Rhea Seehorn geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Rhea Seehorn geheiratet?", "Wer wird von fiktive Charaktere gespielt von Rhea Seehorn geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Rhea Seehorn geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Rhea_Seehorn>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Richard Burgi geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Richard Burgi geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Richard Burgi geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Richard Burgi geheiratet?", "Wer wird von fiktive Charaktere gespielt von Richard Burgi geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Richard Burgi geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Richard_Burgi>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Tessa Allen geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Tessa Allen geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Tessa Allen geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Tessa Allen geheiratet?", "Wer wird von fiktive Charaktere gespielt von Tessa Allen geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Tessa Allen geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Tessa_Allen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) geheiratet?", "Wer wird von fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) geheiratet?", "Wer wurde von fiktive Charaktere gespielt von The Carrie Diaries (Fernsehserie) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/The_Carrie_Diaries_(TV_series)>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Theresa Underberg geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Theresa Underberg geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Theresa Underberg geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Theresa Underberg geheiratet?", "Wer wird von fiktive Charaktere gespielt von Theresa Underberg geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Theresa Underberg geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Theresa_Underberg>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Simon Woods geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Simon Woods geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Simon Woods geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Simon Woods geheiratet?", "Wer wird von fiktive Charaktere gespielt von Simon Woods geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Simon Woods geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Simon_Woods>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Brooke Shields geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Brooke Shields geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Brooke Shields geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Brooke Shields geheiratet?", "Wer wird von fiktive Charaktere gespielt von Brooke Shields geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Brooke Shields geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Brooke_Shields>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Larry Semon geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Larry Semon geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Larry Semon geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Larry Semon geheiratet?", "Wer wird von fiktive Charaktere gespielt von Larry Semon geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Larry Semon geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Larry_Semon>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "25",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von fiktive Charaktere gespielt von Laura Allen geheiratet?", "Welche Person wurde von fiktive Charaktere gespielt von Laura Allen geheiratet?", "Welche Personen werden von fiktive Charaktere gespielt von Laura Allen geheiratet?", "Welche Personen wurden von fiktive Charaktere gespielt von Laura Allen geheiratet?", "Wer wird von fiktive Charaktere gespielt von Laura Allen geheiratet?", "Wer wurde von fiktive Charaktere gespielt von Laura Allen geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Laura_Allen>)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Lucia Moholy geheiratet?", "Welche Person wurde von Personen geheiratet von Lucia Moholy geheiratet?", "Welche Personen werden von Personen geheiratet von Lucia Moholy geheiratet?", "Welche Personen wurden von Personen geheiratet von Lucia Moholy geheiratet?", "Wer wird von Personen geheiratet von Lucia Moholy geheiratet?", "Wer wurde von Personen geheiratet von Lucia Moholy geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucia_Moholy> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Lucilla geheiratet?", "Welche Person wurde von Personen geheiratet von Lucilla geheiratet?", "Welche Personen werden von Personen geheiratet von Lucilla geheiratet?", "Welche Personen wurden von Personen geheiratet von Lucilla geheiratet?", "Wer wird von Personen geheiratet von Lucilla geheiratet?", "Wer wurde von Personen geheiratet von Lucilla geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucilla> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Lucius Verus geheiratet?", "Welche Person wurde von Personen geheiratet von Lucius Verus geheiratet?", "Welche Personen werden von Personen geheiratet von Lucius Verus geheiratet?", "Welche Personen wurden von Personen geheiratet von Lucius Verus geheiratet?", "Wer wird von Personen geheiratet von Lucius Verus geheiratet?", "Wer wurde von Personen geheiratet von Lucius Verus geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lucius_Verus> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Luis Fortuño geheiratet?", "Welche Person wurde von Personen geheiratet von Luis Fortuño geheiratet?", "Welche Personen werden von Personen geheiratet von Luis Fortuño geheiratet?", "Welche Personen wurden von Personen geheiratet von Luis Fortuño geheiratet?", "Wer wird von Personen geheiratet von Luis Fortuño geheiratet?", "Wer wurde von Personen geheiratet von Luis Fortuño geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Luis_Fortuño> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Lynn Whitfield geheiratet?", "Welche Person wurde von Personen geheiratet von Lynn Whitfield geheiratet?", "Welche Personen werden von Personen geheiratet von Lynn Whitfield geheiratet?", "Welche Personen wurden von Personen geheiratet von Lynn Whitfield geheiratet?", "Wer wird von Personen geheiratet von Lynn Whitfield geheiratet?", "Wer wurde von Personen geheiratet von Lynn Whitfield geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lynn_Whitfield> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Lysette Anthony geheiratet?", "Welche Person wurde von Personen geheiratet von Lysette Anthony geheiratet?", "Welche Personen werden von Personen geheiratet von Lysette Anthony geheiratet?", "Welche Personen wurden von Personen geheiratet von Lysette Anthony geheiratet?", "Wer wird von Personen geheiratet von Lysette Anthony geheiratet?", "Wer wurde von Personen geheiratet von Lysette Anthony geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lysette_Anthony> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von László Moholy-Nagy geheiratet?", "Welche Person wurde von Personen geheiratet von László Moholy-Nagy geheiratet?", "Welche Personen werden von Personen geheiratet von László Moholy-Nagy geheiratet?", "Welche Personen wurden von Personen geheiratet von László Moholy-Nagy geheiratet?", "Wer wird von Personen geheiratet von László Moholy-Nagy geheiratet?", "Wer wurde von Personen geheiratet von László Moholy-Nagy geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/László_Moholy-Nagy> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von M. G. Ramachandran geheiratet?", "Welche Person wurde von Personen geheiratet von M. G. Ramachandran geheiratet?", "Welche Personen werden von Personen geheiratet von M. G. Ramachandran geheiratet?", "Welche Personen wurden von Personen geheiratet von M. G. Ramachandran geheiratet?", "Wer wird von Personen geheiratet von M. G. Ramachandran geheiratet?", "Wer wurde von Personen geheiratet von M. G. Ramachandran geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/M._G._Ramachandran> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Malcolm Turnbull geheiratet?", "Welche Person wurde von Personen geheiratet von Malcolm Turnbull geheiratet?", "Welche Personen werden von Personen geheiratet von Malcolm Turnbull geheiratet?", "Welche Personen wurden von Personen geheiratet von Malcolm Turnbull geheiratet?", "Wer wird von Personen geheiratet von Malcolm Turnbull geheiratet?", "Wer wurde von Personen geheiratet von Malcolm Turnbull geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Malcolm_Turnbull> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Vera Tschechowa geheiratet?", "Welche Person wurde von Personen geheiratet von Vera Tschechowa geheiratet?", "Welche Personen werden von Personen geheiratet von Vera Tschechowa geheiratet?", "Welche Personen wurden von Personen geheiratet von Vera Tschechowa geheiratet?", "Wer wird von Personen geheiratet von Vera Tschechowa geheiratet?", "Wer wurde von Personen geheiratet von Vera Tschechowa geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Vera_Tschechowa> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Suriyothai geheiratet?", "Welche Person wurde von Personen geheiratet von Suriyothai geheiratet?", "Welche Personen werden von Personen geheiratet von Suriyothai geheiratet?", "Welche Personen wurden von Personen geheiratet von Suriyothai geheiratet?", "Wer wird von Personen geheiratet von Suriyothai geheiratet?", "Wer wurde von Personen geheiratet von Suriyothai geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Suriyothai> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Manuel Sadosky geheiratet?", "Welche Person wurde von Personen geheiratet von Manuel Sadosky geheiratet?", "Welche Personen werden von Personen geheiratet von Manuel Sadosky geheiratet?", "Welche Personen wurden von Personen geheiratet von Manuel Sadosky geheiratet?", "Wer wird von Personen geheiratet von Manuel Sadosky geheiratet?", "Wer wurde von Personen geheiratet von Manuel Sadosky geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Manuel_Sadosky> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Blanche von Namur geheiratet?", "Welche Person wurde von Personen geheiratet von Blanche von Namur geheiratet?", "Welche Personen werden von Personen geheiratet von Blanche von Namur geheiratet?", "Welche Personen wurden von Personen geheiratet von Blanche von Namur geheiratet?", "Wer wird von Personen geheiratet von Blanche von Namur geheiratet?", "Wer wurde von Personen geheiratet von Blanche von Namur geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Blanche_of_Namur> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Derya Alabora geheiratet?", "Welche Person wurde von Personen geheiratet von Derya Alabora geheiratet?", "Welche Personen werden von Personen geheiratet von Derya Alabora geheiratet?", "Welche Personen wurden von Personen geheiratet von Derya Alabora geheiratet?", "Wer wird von Personen geheiratet von Derya Alabora geheiratet?", "Wer wurde von Personen geheiratet von Derya Alabora geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Derya_Alabora> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Desmond FitzGerald geheiratet?", "Welche Person wurde von Personen geheiratet von Desmond FitzGerald geheiratet?", "Welche Personen werden von Personen geheiratet von Desmond FitzGerald geheiratet?", "Welche Personen wurden von Personen geheiratet von Desmond FitzGerald geheiratet?", "Wer wird von Personen geheiratet von Desmond FitzGerald geheiratet?", "Wer wurde von Personen geheiratet von Desmond FitzGerald geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Desmond_FitzGerald_(politician)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Dick Cheney geheiratet?", "Welche Person wurde von Personen geheiratet von Dick Cheney geheiratet?", "Welche Personen werden von Personen geheiratet von Dick Cheney geheiratet?", "Welche Personen wurden von Personen geheiratet von Dick Cheney geheiratet?", "Wer wird von Personen geheiratet von Dick Cheney geheiratet?", "Wer wurde von Personen geheiratet von Dick Cheney geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Dick_Cheney> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Gladys Moore Vanderbilt geheiratet?", "Welche Person wurde von Personen geheiratet von Gladys Moore Vanderbilt geheiratet?", "Welche Personen werden von Personen geheiratet von Gladys Moore Vanderbilt geheiratet?", "Welche Personen wurden von Personen geheiratet von Gladys Moore Vanderbilt geheiratet?", "Wer wird von Personen geheiratet von Gladys Moore Vanderbilt geheiratet?", "Wer wurde von Personen geheiratet von Gladys Moore Vanderbilt geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gladys_Vanderbilt_Széchenyi> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Grigori Wassiljewitsch Alexandrow geheiratet?", "Welche Person wurde von Personen geheiratet von Grigori Wassiljewitsch Alexandrow geheiratet?", "Welche Personen werden von Personen geheiratet von Grigori Wassiljewitsch Alexandrow geheiratet?", "Welche Personen wurden von Personen geheiratet von Grigori Wassiljewitsch Alexandrow geheiratet?", "Wer wird von Personen geheiratet von Grigori Wassiljewitsch Alexandrow geheiratet?", "Wer wurde von Personen geheiratet von Grigori Wassiljewitsch Alexandrow geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Grigori_Aleksandrov> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Kishore Kumar geheiratet?", "Welche Person wurde von Personen geheiratet von Kishore Kumar geheiratet?", "Welche Personen werden von Personen geheiratet von Kishore Kumar geheiratet?", "Welche Personen wurden von Personen geheiratet von Kishore Kumar geheiratet?", "Wer wird von Personen geheiratet von Kishore Kumar geheiratet?", "Wer wurde von Personen geheiratet von Kishore Kumar geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Kishore_Kumar> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Franz Xaver von Bourbon-Parma geheiratet?", "Welche Person wurde von Personen geheiratet von Franz Xaver von Bourbon-Parma geheiratet?", "Welche Personen werden von Personen geheiratet von Franz Xaver von Bourbon-Parma geheiratet?", "Welche Personen wurden von Personen geheiratet von Franz Xaver von Bourbon-Parma geheiratet?", "Wer wird von Personen geheiratet von Franz Xaver von Bourbon-Parma geheiratet?", "Wer wurde von Personen geheiratet von Franz Xaver von Bourbon-Parma geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Prince_Xavier_of_Bourbon-Parma> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Ratna von Nepal geheiratet?", "Welche Person wurde von Personen geheiratet von Ratna von Nepal geheiratet?", "Welche Personen werden von Personen geheiratet von Ratna von Nepal geheiratet?", "Welche Personen wurden von Personen geheiratet von Ratna von Nepal geheiratet?", "Wer wird von Personen geheiratet von Ratna von Nepal geheiratet?", "Wer wurde von Personen geheiratet von Ratna von Nepal geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Queen_Ratna_of_Nepal> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Quinn Martin geheiratet?", "Welche Person wurde von Personen geheiratet von Quinn Martin geheiratet?", "Welche Personen werden von Personen geheiratet von Quinn Martin geheiratet?", "Welche Personen wurden von Personen geheiratet von Quinn Martin geheiratet?", "Wer wird von Personen geheiratet von Quinn Martin geheiratet?", "Wer wurde von Personen geheiratet von Quinn Martin geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Quinn_Martin> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Rachel Miner geheiratet?", "Welche Person wurde von Personen geheiratet von Rachel Miner geheiratet?", "Welche Personen werden von Personen geheiratet von Rachel Miner geheiratet?", "Welche Personen wurden von Personen geheiratet von Rachel Miner geheiratet?", "Wer wird von Personen geheiratet von Rachel Miner geheiratet?", "Wer wurde von Personen geheiratet von Rachel Miner geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rachel_Miner> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Rachel Portman geheiratet?", "Welche Person wurde von Personen geheiratet von Rachel Portman geheiratet?", "Welche Personen werden von Personen geheiratet von Rachel Portman geheiratet?", "Welche Personen wurden von Personen geheiratet von Rachel Portman geheiratet?", "Wer wird von Personen geheiratet von Rachel Portman geheiratet?", "Wer wurde von Personen geheiratet von Rachel Portman geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Rachel_Portman> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Jakob II. (Zypern) geheiratet?", "Welche Person wurde von Personen geheiratet von Jakob II. (Zypern) geheiratet?", "Welche Personen werden von Personen geheiratet von Jakob II. (Zypern) geheiratet?", "Welche Personen wurden von Personen geheiratet von Jakob II. (Zypern) geheiratet?", "Wer wird von Personen geheiratet von Jakob II. (Zypern) geheiratet?", "Wer wurde von Personen geheiratet von Jakob II. (Zypern) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/James_II_of_Cyprus> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Alan Halsall geheiratet?", "Welche Person wurde von Personen geheiratet von Alan Halsall geheiratet?", "Welche Personen werden von Personen geheiratet von Alan Halsall geheiratet?", "Welche Personen wurden von Personen geheiratet von Alan Halsall geheiratet?", "Wer wird von Personen geheiratet von Alan Halsall geheiratet?", "Wer wurde von Personen geheiratet von Alan Halsall geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alan_Halsall> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Albert S. Ruddy geheiratet?", "Welche Person wurde von Personen geheiratet von Albert S. Ruddy geheiratet?", "Welche Personen werden von Personen geheiratet von Albert S. Ruddy geheiratet?", "Welche Personen wurden von Personen geheiratet von Albert S. Ruddy geheiratet?", "Wer wird von Personen geheiratet von Albert S. Ruddy geheiratet?", "Wer wurde von Personen geheiratet von Albert S. Ruddy geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Albert_S._Ruddy> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Alex O’Loughlin geheiratet?", "Welche Person wurde von Personen geheiratet von Alex O’Loughlin geheiratet?", "Welche Personen werden von Personen geheiratet von Alex O’Loughlin geheiratet?", "Welche Personen wurden von Personen geheiratet von Alex O’Loughlin geheiratet?", "Wer wird von Personen geheiratet von Alex O’Loughlin geheiratet?", "Wer wurde von Personen geheiratet von Alex O’Loughlin geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alex_O'Loughlin> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Alexander Borissowitsch Godunow geheiratet?", "Welche Person wurde von Personen geheiratet von Alexander Borissowitsch Godunow geheiratet?", "Welche Personen werden von Personen geheiratet von Alexander Borissowitsch Godunow geheiratet?", "Welche Personen wurden von Personen geheiratet von Alexander Borissowitsch Godunow geheiratet?", "Wer wird von Personen geheiratet von Alexander Borissowitsch Godunow geheiratet?", "Wer wurde von Personen geheiratet von Alexander Borissowitsch Godunow geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alexander_Godunov> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Alfonso I. d’Este geheiratet?", "Welche Person wurde von Personen geheiratet von Alfonso I. d’Este geheiratet?", "Welche Personen werden von Personen geheiratet von Alfonso I. d’Este geheiratet?", "Welche Personen wurden von Personen geheiratet von Alfonso I. d’Este geheiratet?", "Wer wird von Personen geheiratet von Alfonso I. d’Este geheiratet?", "Wer wurde von Personen geheiratet von Alfonso I. d’Este geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alfonso_I_d'Este,_Duke_of_Ferrara> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Alfred Lunt geheiratet?", "Welche Person wurde von Personen geheiratet von Alfred Lunt geheiratet?", "Welche Personen werden von Personen geheiratet von Alfred Lunt geheiratet?", "Welche Personen wurden von Personen geheiratet von Alfred Lunt geheiratet?", "Wer wird von Personen geheiratet von Alfred Lunt geheiratet?", "Wer wurde von Personen geheiratet von Alfred Lunt geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alfred_Lunt> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von ʿAlī ibn Abī Tālib geheiratet?", "Welche Person wurde von Personen geheiratet von ʿAlī ibn Abī Tālib geheiratet?", "Welche Personen werden von Personen geheiratet von ʿAlī ibn Abī Tālib geheiratet?", "Welche Personen wurden von Personen geheiratet von ʿAlī ibn Abī Tālib geheiratet?", "Wer wird von Personen geheiratet von ʿAlī ibn Abī Tālib geheiratet?", "Wer wurde von Personen geheiratet von ʿAlī ibn Abī Tālib geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Ali> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Alistair Petrie geheiratet?", "Welche Person wurde von Personen geheiratet von Alistair Petrie geheiratet?", "Welche Personen werden von Personen geheiratet von Alistair Petrie geheiratet?", "Welche Personen wurden von Personen geheiratet von Alistair Petrie geheiratet?", "Wer wird von Personen geheiratet von Alistair Petrie geheiratet?", "Wer wurde von Personen geheiratet von Alistair Petrie geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alistair_Petrie> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Alma Adamkienė geheiratet?", "Welche Person wurde von Personen geheiratet von Alma Adamkienė geheiratet?", "Welche Personen werden von Personen geheiratet von Alma Adamkienė geheiratet?", "Welche Personen wurden von Personen geheiratet von Alma Adamkienė geheiratet?", "Wer wird von Personen geheiratet von Alma Adamkienė geheiratet?", "Wer wurde von Personen geheiratet von Alma Adamkienė geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Alma_Adamkienė> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Karl I. (Valois) geheiratet?", "Welche Person wurde von Personen geheiratet von Karl I. (Valois) geheiratet?", "Welche Personen werden von Personen geheiratet von Karl I. (Valois) geheiratet?", "Welche Personen wurden von Personen geheiratet von Karl I. (Valois) geheiratet?", "Wer wird von Personen geheiratet von Karl I. (Valois) geheiratet?", "Wer wurde von Personen geheiratet von Karl I. (Valois) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles,_Count_of_Valois> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Karl III. Philipp (Pfalz) geheiratet?", "Welche Person wurde von Personen geheiratet von Karl III. Philipp (Pfalz) geheiratet?", "Welche Personen werden von Personen geheiratet von Karl III. Philipp (Pfalz) geheiratet?", "Welche Personen wurden von Personen geheiratet von Karl III. Philipp (Pfalz) geheiratet?", "Wer wird von Personen geheiratet von Karl III. Philipp (Pfalz) geheiratet?", "Wer wurde von Personen geheiratet von Karl III. Philipp (Pfalz) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles_III_Philip,_Elector_Palatine> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) geheiratet?", "Welche Person wurde von Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) geheiratet?", "Welche Personen werden von Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) geheiratet?", "Welche Personen wurden von Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) geheiratet?", "Wer wird von Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) geheiratet?", "Wer wurde von Personen geheiratet von Karl III. Wilhelm (Baden-Durlach) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles_III_William,_Margrave_of_Baden-Durlach> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Karl XI. (Schweden) geheiratet?", "Welche Person wurde von Personen geheiratet von Karl XI. (Schweden) geheiratet?", "Welche Personen werden von Personen geheiratet von Karl XI. (Schweden) geheiratet?", "Welche Personen wurden von Personen geheiratet von Karl XI. (Schweden) geheiratet?", "Wer wird von Personen geheiratet von Karl XI. (Schweden) geheiratet?", "Wer wurde von Personen geheiratet von Karl XI. (Schweden) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charles_XI_of_Sweden> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Charlton Heston geheiratet?", "Welche Person wurde von Personen geheiratet von Charlton Heston geheiratet?", "Welche Personen werden von Personen geheiratet von Charlton Heston geheiratet?", "Welche Personen wurden von Personen geheiratet von Charlton Heston geheiratet?", "Wer wird von Personen geheiratet von Charlton Heston geheiratet?", "Wer wurde von Personen geheiratet von Charlton Heston geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Charlton_Heston> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Chetan Anand (Regisseur) geheiratet?", "Welche Person wurde von Personen geheiratet von Chetan Anand (Regisseur) geheiratet?", "Welche Personen werden von Personen geheiratet von Chetan Anand (Regisseur) geheiratet?", "Welche Personen wurden von Personen geheiratet von Chetan Anand (Regisseur) geheiratet?", "Wer wird von Personen geheiratet von Chetan Anand (Regisseur) geheiratet?", "Wer wurde von Personen geheiratet von Chetan Anand (Regisseur) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chetan_Anand_(director)> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Nieves Navarro geheiratet?", "Welche Person wurde von Personen geheiratet von Nieves Navarro geheiratet?", "Welche Personen werden von Personen geheiratet von Nieves Navarro geheiratet?", "Welche Personen wurden von Personen geheiratet von Nieves Navarro geheiratet?", "Wer wird von Personen geheiratet von Nieves Navarro geheiratet?", "Wer wurde von Personen geheiratet von Nieves Navarro geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Nieves_Navarro> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Nnamdi Azikiwe geheiratet?", "Welche Person wurde von Personen geheiratet von Nnamdi Azikiwe geheiratet?", "Welche Personen werden von Personen geheiratet von Nnamdi Azikiwe geheiratet?", "Welche Personen wurden von Personen geheiratet von Nnamdi Azikiwe geheiratet?", "Wer wird von Personen geheiratet von Nnamdi Azikiwe geheiratet?", "Wer wurde von Personen geheiratet von Nnamdi Azikiwe geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Nnamdi_Azikiwe> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Noah Bean geheiratet?", "Welche Person wurde von Personen geheiratet von Noah Bean geheiratet?", "Welche Personen werden von Personen geheiratet von Noah Bean geheiratet?", "Welche Personen wurden von Personen geheiratet von Noah Bean geheiratet?", "Wer wird von Personen geheiratet von Noah Bean geheiratet?", "Wer wurde von Personen geheiratet von Noah Bean geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Noah_Bean> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Georg I. (Hessen-Darmstadt) geheiratet?", "Welche Person wurde von Personen geheiratet von Georg I. (Hessen-Darmstadt) geheiratet?", "Welche Personen werden von Personen geheiratet von Georg I. (Hessen-Darmstadt) geheiratet?", "Welche Personen wurden von Personen geheiratet von Georg I. (Hessen-Darmstadt) geheiratet?", "Wer wird von Personen geheiratet von Georg I. (Hessen-Darmstadt) geheiratet?", "Wer wurde von Personen geheiratet von Georg I. (Hessen-Darmstadt) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_I,_Landgrave_of_Hesse-Darmstadt> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Barbara Stühlmeyer geheiratet?", "Welche Person wurde von Personen geheiratet von Barbara Stühlmeyer geheiratet?", "Welche Personen werden von Personen geheiratet von Barbara Stühlmeyer geheiratet?", "Welche Personen wurden von Personen geheiratet von Barbara Stühlmeyer geheiratet?", "Wer wird von Personen geheiratet von Barbara Stühlmeyer geheiratet?", "Wer wurde von Personen geheiratet von Barbara Stühlmeyer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Barbara_Stühlmeyer> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Barbara von Brandenburg (1422–1481) geheiratet?", "Welche Person wurde von Personen geheiratet von Barbara von Brandenburg (1422–1481) geheiratet?", "Welche Personen werden von Personen geheiratet von Barbara von Brandenburg (1422–1481) geheiratet?", "Welche Personen wurden von Personen geheiratet von Barbara von Brandenburg (1422–1481) geheiratet?", "Wer wird von Personen geheiratet von Barbara von Brandenburg (1422–1481) geheiratet?", "Wer wurde von Personen geheiratet von Barbara von Brandenburg (1422–1481) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Barbara_of_Brandenburg,_Marquise_of_Mantua> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Barry Levinson geheiratet?", "Welche Person wurde von Personen geheiratet von Barry Levinson geheiratet?", "Welche Personen werden von Personen geheiratet von Barry Levinson geheiratet?", "Welche Personen wurden von Personen geheiratet von Barry Levinson geheiratet?", "Wer wird von Personen geheiratet von Barry Levinson geheiratet?", "Wer wurde von Personen geheiratet von Barry Levinson geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Barry_Levinson> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Frederick Cavendish geheiratet?", "Welche Person wurde von Personen geheiratet von Frederick Cavendish geheiratet?", "Welche Personen werden von Personen geheiratet von Frederick Cavendish geheiratet?", "Welche Personen wurden von Personen geheiratet von Frederick Cavendish geheiratet?", "Wer wird von Personen geheiratet von Frederick Cavendish geheiratet?", "Wer wurde von Personen geheiratet von Frederick Cavendish geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lord_Frederick_Cavendish> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Lorenzo di Piero de’ Medici geheiratet?", "Welche Person wurde von Personen geheiratet von Lorenzo di Piero de’ Medici geheiratet?", "Welche Personen werden von Personen geheiratet von Lorenzo di Piero de’ Medici geheiratet?", "Welche Personen wurden von Personen geheiratet von Lorenzo di Piero de’ Medici geheiratet?", "Wer wird von Personen geheiratet von Lorenzo di Piero de’ Medici geheiratet?", "Wer wurde von Personen geheiratet von Lorenzo di Piero de’ Medici geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Lorenzo_de'_Medici,_Duke_of_Urbino> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Louis-Ferdinand Céline geheiratet?", "Welche Person wurde von Personen geheiratet von Louis-Ferdinand Céline geheiratet?", "Welche Personen werden von Personen geheiratet von Louis-Ferdinand Céline geheiratet?", "Welche Personen wurden von Personen geheiratet von Louis-Ferdinand Céline geheiratet?", "Wer wird von Personen geheiratet von Louis-Ferdinand Céline geheiratet?", "Wer wurde von Personen geheiratet von Louis-Ferdinand Céline geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Louis-Ferdinand_Céline> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) geheiratet?", "Welche Person wurde von Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) geheiratet?", "Welche Personen werden von Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) geheiratet?", "Welche Personen wurden von Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) geheiratet?", "Wer wird von Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) geheiratet?", "Wer wurde von Personen geheiratet von Ludwig Friedrich II. (Schwarzburg-Rudolstadt) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Louis_Frederick_II,_Prince_of_Schwarzburg-Rudolstadt> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Ludwig der Kelheimer geheiratet?", "Welche Person wurde von Personen geheiratet von Ludwig der Kelheimer geheiratet?", "Welche Personen werden von Personen geheiratet von Ludwig der Kelheimer geheiratet?", "Welche Personen wurden von Personen geheiratet von Ludwig der Kelheimer geheiratet?", "Wer wird von Personen geheiratet von Ludwig der Kelheimer geheiratet?", "Wer wurde von Personen geheiratet von Ludwig der Kelheimer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Louis_I,_Duke_of_Bavaria> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Tullia die Jüngere geheiratet?", "Welche Person wurde von Personen geheiratet von Tullia die Jüngere geheiratet?", "Welche Personen werden von Personen geheiratet von Tullia die Jüngere geheiratet?", "Welche Personen wurden von Personen geheiratet von Tullia die Jüngere geheiratet?", "Wer wird von Personen geheiratet von Tullia die Jüngere geheiratet?", "Wer wurde von Personen geheiratet von Tullia die Jüngere geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Tullia_Minor> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Caitlin Stasey geheiratet?", "Welche Person wurde von Personen geheiratet von Caitlin Stasey geheiratet?", "Welche Personen werden von Personen geheiratet von Caitlin Stasey geheiratet?", "Welche Personen wurden von Personen geheiratet von Caitlin Stasey geheiratet?", "Wer wird von Personen geheiratet von Caitlin Stasey geheiratet?", "Wer wurde von Personen geheiratet von Caitlin Stasey geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Caitlin_Stasey> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Carl Sagan geheiratet?", "Welche Person wurde von Personen geheiratet von Carl Sagan geheiratet?", "Welche Personen werden von Personen geheiratet von Carl Sagan geheiratet?", "Welche Personen wurden von Personen geheiratet von Carl Sagan geheiratet?", "Wer wird von Personen geheiratet von Carl Sagan geheiratet?", "Wer wurde von Personen geheiratet von Carl Sagan geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carl_Sagan> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Ilich Ramírez Sánchez geheiratet?", "Welche Person wurde von Personen geheiratet von Ilich Ramírez Sánchez geheiratet?", "Welche Personen werden von Personen geheiratet von Ilich Ramírez Sánchez geheiratet?", "Welche Personen wurden von Personen geheiratet von Ilich Ramírez Sánchez geheiratet?", "Wer wird von Personen geheiratet von Ilich Ramírez Sánchez geheiratet?", "Wer wurde von Personen geheiratet von Ilich Ramírez Sánchez geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carlos_the_Jackal> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Carmine Giovinazzo geheiratet?", "Welche Person wurde von Personen geheiratet von Carmine Giovinazzo geheiratet?", "Welche Personen werden von Personen geheiratet von Carmine Giovinazzo geheiratet?", "Welche Personen wurden von Personen geheiratet von Carmine Giovinazzo geheiratet?", "Wer wird von Personen geheiratet von Carmine Giovinazzo geheiratet?", "Wer wurde von Personen geheiratet von Carmine Giovinazzo geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carmine_Giovinazzo> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Karl II. (Rumänien) geheiratet?", "Welche Person wurde von Personen geheiratet von Karl II. (Rumänien) geheiratet?", "Welche Personen werden von Personen geheiratet von Karl II. (Rumänien) geheiratet?", "Welche Personen wurden von Personen geheiratet von Karl II. (Rumänien) geheiratet?", "Wer wird von Personen geheiratet von Karl II. (Rumänien) geheiratet?", "Wer wurde von Personen geheiratet von Karl II. (Rumänien) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Carol_II_of_Romania> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Chien-Shiung Wu geheiratet?", "Welche Person wurde von Personen geheiratet von Chien-Shiung Wu geheiratet?", "Welche Personen werden von Personen geheiratet von Chien-Shiung Wu geheiratet?", "Welche Personen wurden von Personen geheiratet von Chien-Shiung Wu geheiratet?", "Wer wird von Personen geheiratet von Chien-Shiung Wu geheiratet?", "Wer wurde von Personen geheiratet von Chien-Shiung Wu geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chien-Shiung_Wu> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Chris Hardwick geheiratet?", "Welche Person wurde von Personen geheiratet von Chris Hardwick geheiratet?", "Welche Personen werden von Personen geheiratet von Chris Hardwick geheiratet?", "Welche Personen wurden von Personen geheiratet von Chris Hardwick geheiratet?", "Wer wird von Personen geheiratet von Chris Hardwick geheiratet?", "Wer wurde von Personen geheiratet von Chris Hardwick geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chris_Hardwick> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Christian von Dänemark geheiratet?", "Welche Person wurde von Personen geheiratet von Christian von Dänemark geheiratet?", "Welche Personen werden von Personen geheiratet von Christian von Dänemark geheiratet?", "Welche Personen wurden von Personen geheiratet von Christian von Dänemark geheiratet?", "Wer wird von Personen geheiratet von Christian von Dänemark geheiratet?", "Wer wurde von Personen geheiratet von Christian von Dänemark geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christian,_Prince-Elect_of_Denmark> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Christine Boyer geheiratet?", "Welche Person wurde von Personen geheiratet von Christine Boyer geheiratet?", "Welche Personen werden von Personen geheiratet von Christine Boyer geheiratet?", "Welche Personen wurden von Personen geheiratet von Christine Boyer geheiratet?", "Wer wird von Personen geheiratet von Christine Boyer geheiratet?", "Wer wurde von Personen geheiratet von Christine Boyer geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christine_Boyer> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Christopher George geheiratet?", "Welche Person wurde von Personen geheiratet von Christopher George geheiratet?", "Welche Personen werden von Personen geheiratet von Christopher George geheiratet?", "Welche Personen wurden von Personen geheiratet von Christopher George geheiratet?", "Wer wird von Personen geheiratet von Christopher George geheiratet?", "Wer wurde von Personen geheiratet von Christopher George geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Christopher_George> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Chuck Robb geheiratet?", "Welche Person wurde von Personen geheiratet von Chuck Robb geheiratet?", "Welche Personen werden von Personen geheiratet von Chuck Robb geheiratet?", "Welche Personen wurden von Personen geheiratet von Chuck Robb geheiratet?", "Wer wird von Personen geheiratet von Chuck Robb geheiratet?", "Wer wurde von Personen geheiratet von Chuck Robb geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Chuck_Robb> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Cindy Pickett geheiratet?", "Welche Person wurde von Personen geheiratet von Cindy Pickett geheiratet?", "Welche Personen werden von Personen geheiratet von Cindy Pickett geheiratet?", "Welche Personen wurden von Personen geheiratet von Cindy Pickett geheiratet?", "Wer wird von Personen geheiratet von Cindy Pickett geheiratet?", "Wer wurde von Personen geheiratet von Cindy Pickett geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Cindy_Pickett> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Clifford Odets geheiratet?", "Welche Person wurde von Personen geheiratet von Clifford Odets geheiratet?", "Welche Personen werden von Personen geheiratet von Clifford Odets geheiratet?", "Welche Personen wurden von Personen geheiratet von Clifford Odets geheiratet?", "Wer wird von Personen geheiratet von Clifford Odets geheiratet?", "Wer wurde von Personen geheiratet von Clifford Odets geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Clifford_Odets> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Albia Domnica geheiratet?", "Welche Person wurde von Personen geheiratet von Albia Domnica geheiratet?", "Welche Personen werden von Personen geheiratet von Albia Domnica geheiratet?", "Welche Personen wurden von Personen geheiratet von Albia Domnica geheiratet?", "Wer wird von Personen geheiratet von Albia Domnica geheiratet?", "Wer wurde von Personen geheiratet von Albia Domnica geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Albia_Dominica> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Gamze Özçelik geheiratet?", "Welche Person wurde von Personen geheiratet von Gamze Özçelik geheiratet?", "Welche Personen werden von Personen geheiratet von Gamze Özçelik geheiratet?", "Welche Personen wurden von Personen geheiratet von Gamze Özçelik geheiratet?", "Wer wird von Personen geheiratet von Gamze Özçelik geheiratet?", "Wer wurde von Personen geheiratet von Gamze Özçelik geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gamze_Özçelik> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von García IV. (Navarra) geheiratet?", "Welche Person wurde von Personen geheiratet von García IV. (Navarra) geheiratet?", "Welche Personen werden von Personen geheiratet von García IV. (Navarra) geheiratet?", "Welche Personen wurden von Personen geheiratet von García IV. (Navarra) geheiratet?", "Wer wird von Personen geheiratet von García IV. (Navarra) geheiratet?", "Wer wurde von Personen geheiratet von García IV. (Navarra) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/García_Ramírez_of_Navarre> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Gary Oldman geheiratet?", "Welche Person wurde von Personen geheiratet von Gary Oldman geheiratet?", "Welche Personen werden von Personen geheiratet von Gary Oldman geheiratet?", "Welche Personen wurden von Personen geheiratet von Gary Oldman geheiratet?", "Wer wird von Personen geheiratet von Gary Oldman geheiratet?", "Wer wurde von Personen geheiratet von Gary Oldman geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gary_Oldman> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Gaspar Noé geheiratet?", "Welche Person wurde von Personen geheiratet von Gaspar Noé geheiratet?", "Welche Personen werden von Personen geheiratet von Gaspar Noé geheiratet?", "Welche Personen wurden von Personen geheiratet von Gaspar Noé geheiratet?", "Wer wird von Personen geheiratet von Gaspar Noé geheiratet?", "Wer wurde von Personen geheiratet von Gaspar Noé geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gaspar_Noé> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Gaston de Foix (Viana) geheiratet?", "Welche Person wurde von Personen geheiratet von Gaston de Foix (Viana) geheiratet?", "Welche Personen werden von Personen geheiratet von Gaston de Foix (Viana) geheiratet?", "Welche Personen wurden von Personen geheiratet von Gaston de Foix (Viana) geheiratet?", "Wer wird von Personen geheiratet von Gaston de Foix (Viana) geheiratet?", "Wer wurde von Personen geheiratet von Gaston de Foix (Viana) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gaston,_Prince_of_Viana> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von George Montagu, 8. Duke of Manchester geheiratet?", "Welche Person wurde von Personen geheiratet von George Montagu, 8. Duke of Manchester geheiratet?", "Welche Personen werden von Personen geheiratet von George Montagu, 8. Duke of Manchester geheiratet?", "Welche Personen wurden von Personen geheiratet von George Montagu, 8. Duke of Manchester geheiratet?", "Wer wird von Personen geheiratet von George Montagu, 8. Duke of Manchester geheiratet?", "Wer wurde von Personen geheiratet von George Montagu, 8. Duke of Manchester geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Montagu,_8th_Duke_of_Manchester> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von George Sanders (Schauspieler) geheiratet?", "Welche Person wurde von Personen geheiratet von George Sanders (Schauspieler) geheiratet?", "Welche Personen werden von Personen geheiratet von George Sanders (Schauspieler) geheiratet?", "Welche Personen wurden von Personen geheiratet von George Sanders (Schauspieler) geheiratet?", "Wer wird von Personen geheiratet von George Sanders (Schauspieler) geheiratet?", "Wer wurde von Personen geheiratet von George Sanders (Schauspieler) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Sanders> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von George Wallace geheiratet?", "Welche Person wurde von Personen geheiratet von George Wallace geheiratet?", "Welche Personen werden von Personen geheiratet von George Wallace geheiratet?", "Welche Personen wurden von Personen geheiratet von George Wallace geheiratet?", "Wer wird von Personen geheiratet von George Wallace geheiratet?", "Wer wurde von Personen geheiratet von George Wallace geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/George_Wallace> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Georges Rivière (Schauspieler) geheiratet?", "Welche Person wurde von Personen geheiratet von Georges Rivière (Schauspieler) geheiratet?", "Welche Personen werden von Personen geheiratet von Georges Rivière (Schauspieler) geheiratet?", "Welche Personen wurden von Personen geheiratet von Georges Rivière (Schauspieler) geheiratet?", "Wer wird von Personen geheiratet von Georges Rivière (Schauspieler) geheiratet?", "Wer wurde von Personen geheiratet von Georges Rivière (Schauspieler) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Georges_Rivière> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Gia Long geheiratet?", "Welche Person wurde von Personen geheiratet von Gia Long geheiratet?", "Welche Personen werden von Personen geheiratet von Gia Long geheiratet?", "Welche Personen wurden von Personen geheiratet von Gia Long geheiratet?", "Wer wird von Personen geheiratet von Gia Long geheiratet?", "Wer wurde von Personen geheiratet von Gia Long geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Gia_Long> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Giorgi Margwelaschwili geheiratet?", "Welche Person wurde von Personen geheiratet von Giorgi Margwelaschwili geheiratet?", "Welche Personen werden von Personen geheiratet von Giorgi Margwelaschwili geheiratet?", "Welche Personen wurden von Personen geheiratet von Giorgi Margwelaschwili geheiratet?", "Wer wird von Personen geheiratet von Giorgi Margwelaschwili geheiratet?", "Wer wurde von Personen geheiratet von Giorgi Margwelaschwili geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Giorgi_Margvelashvili> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Giovanni di Pierfrancesco de’ Medici geheiratet?", "Welche Person wurde von Personen geheiratet von Giovanni di Pierfrancesco de’ Medici geheiratet?", "Welche Personen werden von Personen geheiratet von Giovanni di Pierfrancesco de’ Medici geheiratet?", "Welche Personen wurden von Personen geheiratet von Giovanni di Pierfrancesco de’ Medici geheiratet?", "Wer wird von Personen geheiratet von Giovanni di Pierfrancesco de’ Medici geheiratet?", "Wer wurde von Personen geheiratet von Giovanni di Pierfrancesco de’ Medici geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Giovanni_il_Popolano> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Girish Kasaravalli geheiratet?", "Welche Person wurde von Personen geheiratet von Girish Kasaravalli geheiratet?", "Welche Personen werden von Personen geheiratet von Girish Kasaravalli geheiratet?", "Welche Personen wurden von Personen geheiratet von Girish Kasaravalli geheiratet?", "Wer wird von Personen geheiratet von Girish Kasaravalli geheiratet?", "Wer wurde von Personen geheiratet von Girish Kasaravalli geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Girish_Kasaravalli> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Girolamo Riario geheiratet?", "Welche Person wurde von Personen geheiratet von Girolamo Riario geheiratet?", "Welche Personen werden von Personen geheiratet von Girolamo Riario geheiratet?", "Welche Personen wurden von Personen geheiratet von Girolamo Riario geheiratet?", "Wer wird von Personen geheiratet von Girolamo Riario geheiratet?", "Wer wurde von Personen geheiratet von Girolamo Riario geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Girolamo_Riario> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Jean-Louis Barrault geheiratet?", "Welche Person wurde von Personen geheiratet von Jean-Louis Barrault geheiratet?", "Welche Personen werden von Personen geheiratet von Jean-Louis Barrault geheiratet?", "Welche Personen wurden von Personen geheiratet von Jean-Louis Barrault geheiratet?", "Wer wird von Personen geheiratet von Jean-Louis Barrault geheiratet?", "Wer wurde von Personen geheiratet von Jean-Louis Barrault geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jean-Louis_Barrault> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Jean-Marie Roland de La Platière geheiratet?", "Welche Person wurde von Personen geheiratet von Jean-Marie Roland de La Platière geheiratet?", "Welche Personen werden von Personen geheiratet von Jean-Marie Roland de La Platière geheiratet?", "Welche Personen wurden von Personen geheiratet von Jean-Marie Roland de La Platière geheiratet?", "Wer wird von Personen geheiratet von Jean-Marie Roland de La Platière geheiratet?", "Wer wurde von Personen geheiratet von Jean-Marie Roland de La Platière geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jean-Marie_Roland_de_la_Platière> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Jeff Bezos geheiratet?", "Welche Person wurde von Personen geheiratet von Jeff Bezos geheiratet?", "Welche Personen werden von Personen geheiratet von Jeff Bezos geheiratet?", "Welche Personen wurden von Personen geheiratet von Jeff Bezos geheiratet?", "Wer wird von Personen geheiratet von Jeff Bezos geheiratet?", "Wer wurde von Personen geheiratet von Jeff Bezos geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jeff_Bezos> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Jefferson Davis geheiratet?", "Welche Person wurde von Personen geheiratet von Jefferson Davis geheiratet?", "Welche Personen werden von Personen geheiratet von Jefferson Davis geheiratet?", "Welche Personen wurden von Personen geheiratet von Jefferson Davis geheiratet?", "Wer wird von Personen geheiratet von Jefferson Davis geheiratet?", "Wer wurde von Personen geheiratet von Jefferson Davis geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jefferson_Davis> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Jenny Gröllmann geheiratet?", "Welche Person wurde von Personen geheiratet von Jenny Gröllmann geheiratet?", "Welche Personen werden von Personen geheiratet von Jenny Gröllmann geheiratet?", "Welche Personen wurden von Personen geheiratet von Jenny Gröllmann geheiratet?", "Wer wird von Personen geheiratet von Jenny Gröllmann geheiratet?", "Wer wurde von Personen geheiratet von Jenny Gröllmann geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Jenny_Gröllmann> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Joachim II. (Brandenburg) geheiratet?", "Welche Person wurde von Personen geheiratet von Joachim II. (Brandenburg) geheiratet?", "Welche Personen werden von Personen geheiratet von Joachim II. (Brandenburg) geheiratet?", "Welche Personen wurden von Personen geheiratet von Joachim II. (Brandenburg) geheiratet?", "Wer wird von Personen geheiratet von Joachim II. (Brandenburg) geheiratet?", "Wer wurde von Personen geheiratet von Joachim II. (Brandenburg) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Joachim_II_Hector,_Elector_of_Brandenburg> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Joanne Whalley geheiratet?", "Welche Person wurde von Personen geheiratet von Joanne Whalley geheiratet?", "Welche Personen werden von Personen geheiratet von Joanne Whalley geheiratet?", "Welche Personen wurden von Personen geheiratet von Joanne Whalley geheiratet?", "Wer wird von Personen geheiratet von Joanne Whalley geheiratet?", "Wer wurde von Personen geheiratet von Joanne Whalley geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Joanne_Whalley> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Johann Georg I. (Sachsen) geheiratet?", "Welche Person wurde von Personen geheiratet von Johann Georg I. (Sachsen) geheiratet?", "Welche Personen werden von Personen geheiratet von Johann Georg I. (Sachsen) geheiratet?", "Welche Personen wurden von Personen geheiratet von Johann Georg I. (Sachsen) geheiratet?", "Wer wird von Personen geheiratet von Johann Georg I. (Sachsen) geheiratet?", "Wer wurde von Personen geheiratet von Johann Georg I. (Sachsen) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_George_I,_Elector_of_Saxony> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Johann I. (Pfalz-Zweibrücken) geheiratet?", "Welche Person wurde von Personen geheiratet von Johann I. (Pfalz-Zweibrücken) geheiratet?", "Welche Personen werden von Personen geheiratet von Johann I. (Pfalz-Zweibrücken) geheiratet?", "Welche Personen wurden von Personen geheiratet von Johann I. (Pfalz-Zweibrücken) geheiratet?", "Wer wird von Personen geheiratet von Johann I. (Pfalz-Zweibrücken) geheiratet?", "Wer wurde von Personen geheiratet von Johann I. (Pfalz-Zweibrücken) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_I,_Count_Palatine_of_Zweibrücken> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Johann IV. (Portugal) geheiratet?", "Welche Person wurde von Personen geheiratet von Johann IV. (Portugal) geheiratet?", "Welche Personen werden von Personen geheiratet von Johann IV. (Portugal) geheiratet?", "Welche Personen wurden von Personen geheiratet von Johann IV. (Portugal) geheiratet?", "Wer wird von Personen geheiratet von Johann IV. (Portugal) geheiratet?", "Wer wurde von Personen geheiratet von Johann IV. (Portugal) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_IV_of_Portugal> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von John Jacob Astor IV geheiratet?", "Welche Person wurde von Personen geheiratet von John Jacob Astor IV geheiratet?", "Welche Personen werden von Personen geheiratet von John Jacob Astor IV geheiratet?", "Welche Personen wurden von Personen geheiratet von John Jacob Astor IV geheiratet?", "Wer wird von Personen geheiratet von John Jacob Astor IV geheiratet?", "Wer wurde von Personen geheiratet von John Jacob Astor IV geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_Jacob_Astor_IV> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von John James Audubon geheiratet?", "Welche Person wurde von Personen geheiratet von John James Audubon geheiratet?", "Welche Personen werden von Personen geheiratet von John James Audubon geheiratet?", "Welche Personen wurden von Personen geheiratet von John James Audubon geheiratet?", "Wer wird von Personen geheiratet von John James Audubon geheiratet?", "Wer wurde von Personen geheiratet von John James Audubon geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_James_Audubon> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von John Katzenbach geheiratet?", "Welche Person wurde von Personen geheiratet von John Katzenbach geheiratet?", "Welche Personen werden von Personen geheiratet von John Katzenbach geheiratet?", "Welche Personen wurden von Personen geheiratet von John Katzenbach geheiratet?", "Wer wird von Personen geheiratet von John Katzenbach geheiratet?", "Wer wurde von Personen geheiratet von John Katzenbach geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_Katzenbach> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von John Maynard Keynes geheiratet?", "Welche Person wurde von Personen geheiratet von John Maynard Keynes geheiratet?", "Welche Personen werden von Personen geheiratet von John Maynard Keynes geheiratet?", "Welche Personen wurden von Personen geheiratet von John Maynard Keynes geheiratet?", "Wer wird von Personen geheiratet von John Maynard Keynes geheiratet?", "Wer wurde von Personen geheiratet von John Maynard Keynes geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/John_Maynard_Keynes> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Beatrice d’Este (Sforza) geheiratet?", "Welche Person wurde von Personen geheiratet von Beatrice d’Este (Sforza) geheiratet?", "Welche Personen werden von Personen geheiratet von Beatrice d’Este (Sforza) geheiratet?", "Welche Personen wurden von Personen geheiratet von Beatrice d’Este (Sforza) geheiratet?", "Wer wird von Personen geheiratet von Beatrice d’Este (Sforza) geheiratet?", "Wer wurde von Personen geheiratet von Beatrice d’Este (Sforza) geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Beatrice_d'Este> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Bernard Herrmann geheiratet?", "Welche Person wurde von Personen geheiratet von Bernard Herrmann geheiratet?", "Welche Personen werden von Personen geheiratet von Bernard Herrmann geheiratet?", "Welche Personen wurden von Personen geheiratet von Bernard Herrmann geheiratet?", "Wer wird von Personen geheiratet von Bernard Herrmann geheiratet?", "Wer wurde von Personen geheiratet von Bernard Herrmann geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bernard_Herrmann> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Betty Shabazz geheiratet?", "Welche Person wurde von Personen geheiratet von Betty Shabazz geheiratet?", "Welche Personen werden von Personen geheiratet von Betty Shabazz geheiratet?", "Welche Personen wurden von Personen geheiratet von Betty Shabazz geheiratet?", "Wer wird von Personen geheiratet von Betty Shabazz geheiratet?", "Wer wurde von Personen geheiratet von Betty Shabazz geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Betty_Shabazz> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Bidhya Devi Bhandari geheiratet?", "Welche Person wurde von Personen geheiratet von Bidhya Devi Bhandari geheiratet?", "Welche Personen werden von Personen geheiratet von Bidhya Devi Bhandari geheiratet?", "Welche Personen wurden von Personen geheiratet von Bidhya Devi Bhandari geheiratet?", "Wer wird von Personen geheiratet von Bidhya Devi Bhandari geheiratet?", "Wer wurde von Personen geheiratet von Bidhya Devi Bhandari geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bidhya_Devi_Bhandari> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  }, {
    "id" : "26",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "Welche Person wird von Personen geheiratet von Bill Baxley geheiratet?", "Welche Person wurde von Personen geheiratet von Bill Baxley geheiratet?", "Welche Personen werden von Personen geheiratet von Bill Baxley geheiratet?", "Welche Personen wurden von Personen geheiratet von Bill Baxley geheiratet?", "Wer wird von Personen geheiratet von Bill Baxley geheiratet?", "Wer wurde von Personen geheiratet von Bill Baxley geheiratet?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple <http://dbpedia.org/resource/Bill_Baxley> <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : null
    },
    "combination" : true
  } ]
}